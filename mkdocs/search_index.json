{
    "docs": [
        {
            "location": "/index.html",
            "text": "CS2030 Programming Methodology II\n\n\n15 November 2017\n\n\nLab 11\n is out.\n\n\n9 November 2017\n\n\nLab 10\n is released.  Video for Lecture 11 is missing due to technical error \ud83d\ude2d\n\n\n1 November 2017\n\n\nLab 9\n is relesed.  Videos for \nLecture 9\n and \nLecture 10\n were published in the last two days as well.\n\n\n30 October 2017\n\n\nHere is \nLecture 10\n\n\n25 October 2017\n\n\nLab 8\n is here.\n\n\n18 October 2017\n\n\nLab 7\n is up!\n\n\n16 October 2017\n\n\nExercise 5\n on streams are posted -- please try them out.  We will discuss the solution at the beginning of Lab 7.\n\n\n15 October 2017\n\n\nNotes for \nLecture 8\n posted.  \nVideo for Lecture 7\n is also available now. \n\n\n9 October 2017\n\n\nNotes for \nLecture 7\n posted.  We will also discuss \nmidterm\n today.\n\n\n17 September 2017\n\n\nNotes for \nLecture 6\n posted.\n\n\n15 September 2017\n\n\nUpdates:\n- Lecture 5 video and slides (under \nschedule\n)\n- More \nreview questions\n\n- Tops for using \nvim\n\n\n13 September, 2017\n\n\nUpdates:\n\n\n\n\nLab 3\n\n\nJavadoc\n Guide\n\n\nCS2030 \nstyle guide\n\n\n\n\n10 September, 2017\n\n\nHere's the notes on \nLecture 5\n\n\n9 September, 2017\n\n\nAnother set of updates:\n\n\n\n\nReview Questions\n -  I will keep adding to this, do check it out, try to answer them, before verifying them in \njshell\n or small Java snippet.  Most important is to understand why.\n\n\nLab 1 Comments\n - Important lessons for you from your Lab 1.\n\n\nI added two articles on using setters and getters under \nReadings\n\n\n\n\n5 September, 2017\n\n\nA bunch of stuffs where updated on this site since 27 August.\n\n\n\n\nLab 2\n\n\nLecture 4 \nnotes\n, \nexecise\n, \nslides\n, \nvideo\n.\n\n\n\n\n27 August, 2017\n\n\nLecture 3\n and \nExercise 3\n are posted.  \n\n\n20 August, 2017\n\n\nLecture 2\n and \nExercise 2\n are posted.  \n\n\nYou should have received an email from the School of Computing about creating an account on \nsunfire\n.  If you have not done so, please do so ASAP at \nhttps://mysoc.nus.edu.sg/~newacct/\n.\n\n\n11 August, 2017\n\n\nMany of you are starting a new and exciting journey at NUS.  Congratulations, and welcome to NUS Computing!\n\n\nYou are looking at the main website for CS2030.  This is where you will get all of your module information (labs, lecture notes, etc).  \n\n\nThere are two other websites that we will use regularly over the course of the semester:\n\n\n\n\nPiazza\n, which we will use for Q&A, and\n\n\nIVLE\n, which we will use for \ngrade dissemination\n, \nclass roster\n, etc.\n\n\n\n\nHere are some things that you can read on this site, before the first class:\n\n\n\n\nAssumed prior knowledge\n: What we expect you to know before the class, from CS1010 or its equivalent;\n\n\nSome readings for 1\nst\n year students\n: Useful for senior students as well;\n\n\nAnd, if you feel up for it, \nthe notes for Lecture 1\n\n\n\n\nAlready have a question?  Ask us over at \nPiazza\n!",
            "title": "Home"
        },
        {
            "location": "/index.html#cs2030-programming-methodology-ii",
            "text": "",
            "title": "CS2030 Programming Methodology II"
        },
        {
            "location": "/index.html#15-november-2017",
            "text": "Lab 11  is out.",
            "title": "15 November 2017"
        },
        {
            "location": "/index.html#9-november-2017",
            "text": "Lab 10  is released.  Video for Lecture 11 is missing due to technical error \ud83d\ude2d",
            "title": "9 November 2017"
        },
        {
            "location": "/index.html#1-november-2017",
            "text": "Lab 9  is relesed.  Videos for  Lecture 9  and  Lecture 10  were published in the last two days as well.",
            "title": "1 November 2017"
        },
        {
            "location": "/index.html#30-october-2017",
            "text": "Here is  Lecture 10",
            "title": "30 October 2017"
        },
        {
            "location": "/index.html#25-october-2017",
            "text": "Lab 8  is here.",
            "title": "25 October 2017"
        },
        {
            "location": "/index.html#18-october-2017",
            "text": "Lab 7  is up!",
            "title": "18 October 2017"
        },
        {
            "location": "/index.html#16-october-2017",
            "text": "Exercise 5  on streams are posted -- please try them out.  We will discuss the solution at the beginning of Lab 7.",
            "title": "16 October 2017"
        },
        {
            "location": "/index.html#15-october-2017",
            "text": "Notes for  Lecture 8  posted.   Video for Lecture 7  is also available now.",
            "title": "15 October 2017"
        },
        {
            "location": "/index.html#9-october-2017",
            "text": "Notes for  Lecture 7  posted.  We will also discuss  midterm  today.",
            "title": "9 October 2017"
        },
        {
            "location": "/index.html#17-september-2017",
            "text": "Notes for  Lecture 6  posted.",
            "title": "17 September 2017"
        },
        {
            "location": "/index.html#15-september-2017",
            "text": "Updates:\n- Lecture 5 video and slides (under  schedule )\n- More  review questions \n- Tops for using  vim",
            "title": "15 September 2017"
        },
        {
            "location": "/index.html#13-september-2017",
            "text": "Updates:   Lab 3  Javadoc  Guide  CS2030  style guide",
            "title": "13 September, 2017"
        },
        {
            "location": "/index.html#10-september-2017",
            "text": "Here's the notes on  Lecture 5",
            "title": "10 September, 2017"
        },
        {
            "location": "/index.html#9-september-2017",
            "text": "Another set of updates:   Review Questions  -  I will keep adding to this, do check it out, try to answer them, before verifying them in  jshell  or small Java snippet.  Most important is to understand why.  Lab 1 Comments  - Important lessons for you from your Lab 1.  I added two articles on using setters and getters under  Readings",
            "title": "9 September, 2017"
        },
        {
            "location": "/index.html#5-september-2017",
            "text": "A bunch of stuffs where updated on this site since 27 August.   Lab 2  Lecture 4  notes ,  execise ,  slides ,  video .",
            "title": "5 September, 2017"
        },
        {
            "location": "/index.html#27-august-2017",
            "text": "Lecture 3  and  Exercise 3  are posted.",
            "title": "27 August, 2017"
        },
        {
            "location": "/index.html#20-august-2017",
            "text": "Lecture 2  and  Exercise 2  are posted.    You should have received an email from the School of Computing about creating an account on  sunfire .  If you have not done so, please do so ASAP at  https://mysoc.nus.edu.sg/~newacct/ .",
            "title": "20 August, 2017"
        },
        {
            "location": "/index.html#11-august-2017",
            "text": "Many of you are starting a new and exciting journey at NUS.  Congratulations, and welcome to NUS Computing!  You are looking at the main website for CS2030.  This is where you will get all of your module information (labs, lecture notes, etc).    There are two other websites that we will use regularly over the course of the semester:   Piazza , which we will use for Q&A, and  IVLE , which we will use for  grade dissemination ,  class roster , etc.   Here are some things that you can read on this site, before the first class:   Assumed prior knowledge : What we expect you to know before the class, from CS1010 or its equivalent;  Some readings for 1 st  year students : Useful for senior students as well;  And, if you feel up for it,  the notes for Lecture 1   Already have a question?  Ask us over at  Piazza !",
            "title": "11 August, 2017"
        },
        {
            "location": "/about/index.html",
            "text": "CS2030 Programming Methodology II\n\n\nAbout\n\n\nThis module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.  \n\n\nWho/When/Where\n\n\n\n\nLecture:\n 10am - 12noon, every Monday\n\n\nVenue:\n LT19\n\n\nInstructor:\n \nOoi Wei Tsang\n (\nooiwt@comp.nus.edu.sg\n)\n\n\nTeaching Assistant:\n Kenneth Lu (\nlu.yang.kenneth@u.nus.edu\n)\n\n\nLab:\n Every Thursday (Week 3 - Week 13)\n\n\nMidterm Test:\n October 2, 2017, Monday, 10am\n\n\nFinal Assessment:\n November 29, 2017, Wednesday, 9am.\n\n\n\n\nWorkload\n\n\nBesides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.\n\n\nHistory\n\n\nCS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.\n\n\nLearning Outcomes\n\n\nAfter completing the module, students should:\n\n\n\n\nbe confident in reading and developing medium-scale programs (up to 10K lines of code)\n\n\nbe familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO\n\n\nbe able to apply OO concepts to design and implement medium to large scale  programs, including\n\n\ndesign and implement a class\n\n\ndecompose a problem solution into classes and define members and methods for each class\n\n\nuse polymorphism effectively\n\n\nuse inheritance to design simple class hierarchies that allow code reuse\n\n\ntrace the control flow of a programs that use dynamic dispatch\n\n\nuse encapsulation mechanisms such as interfaces, private methods/members\n\n\n\n\n\n\nbe familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.\n\n\nbe able to apply functional programming concepts to design and implement , including:\n\n\nImplement basic algorithms in functions that are effect free.\n\n\nImplement useful functions that take/return another function\n\n\nWrite correct and effective code using lambda expressions and/or infinite streams\n\n\n\n\n\n\nbe able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation\n\n\nbe aware of how the OOP and FP concepts are implemented in different ways in different programming languages\n\n\nbe confident enough to learn new programming languages that uses OOP and FP paradigm\n\n\nattain proficiency in Java 8 (and above)\n\n\nbe equipped with solid programming foundations for further studies in computer science\n\n\n\n\nTextbook\n\n\nThere is no textbook for this class.\n\n\nThere are many good books and online articles written about the topics covered in the module.  These will be listed under the \nReadings\n section.",
            "title": "About"
        },
        {
            "location": "/about/index.html#cs2030-programming-methodology-ii",
            "text": "",
            "title": "CS2030 Programming Methodology II"
        },
        {
            "location": "/about/index.html#about",
            "text": "This module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.",
            "title": "About"
        },
        {
            "location": "/about/index.html#whowhenwhere",
            "text": "Lecture:  10am - 12noon, every Monday  Venue:  LT19  Instructor:   Ooi Wei Tsang  ( ooiwt@comp.nus.edu.sg )  Teaching Assistant:  Kenneth Lu ( lu.yang.kenneth@u.nus.edu )  Lab:  Every Thursday (Week 3 - Week 13)  Midterm Test:  October 2, 2017, Monday, 10am  Final Assessment:  November 29, 2017, Wednesday, 9am.",
            "title": "Who/When/Where"
        },
        {
            "location": "/about/index.html#workload",
            "text": "Besides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.",
            "title": "Workload"
        },
        {
            "location": "/about/index.html#history",
            "text": "CS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.",
            "title": "History"
        },
        {
            "location": "/about/index.html#learning-outcomes",
            "text": "After completing the module, students should:   be confident in reading and developing medium-scale programs (up to 10K lines of code)  be familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO  be able to apply OO concepts to design and implement medium to large scale  programs, including  design and implement a class  decompose a problem solution into classes and define members and methods for each class  use polymorphism effectively  use inheritance to design simple class hierarchies that allow code reuse  trace the control flow of a programs that use dynamic dispatch  use encapsulation mechanisms such as interfaces, private methods/members    be familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.  be able to apply functional programming concepts to design and implement , including:  Implement basic algorithms in functions that are effect free.  Implement useful functions that take/return another function  Write correct and effective code using lambda expressions and/or infinite streams    be able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation  be aware of how the OOP and FP concepts are implemented in different ways in different programming languages  be confident enough to learn new programming languages that uses OOP and FP paradigm  attain proficiency in Java 8 (and above)  be equipped with solid programming foundations for further studies in computer science",
            "title": "Learning Outcomes"
        },
        {
            "location": "/about/index.html#textbook",
            "text": "There is no textbook for this class.  There are many good books and online articles written about the topics covered in the module.  These will be listed under the  Readings  section.",
            "title": "Textbook"
        },
        {
            "location": "/prereqs/index.html",
            "text": "Assumed Prior Knowledge\n\n\nCS2030 has the prerequisite of CS1010 or its equivalent.  There are, however, several versions of CS1010, and some students are waived from doing CS1010 due to prior programming knowledge.  This document here outlines the prior knowledge that the instructors assume the students have before entering CS2030.\n\n\nBasic computational problem solving and programming skills\n\n\nHere are some learning outcomes that students should attained after taking CS1010.  Students should be familiar with:\n\n\n\n\nthe computational thinking process of formulating a problem and coming up with a solution,\n\n\nfundamental programming concepts, including variables, assignments, conditions, branches, loops, expressions, functions, recursions, and structures\n\n\nhow to program a given solution in a programming language\n\n\ndifferent classes of programming errors (logical errors, syntax errors, run-time errors)\n\n\ncommon debugging techniques and strategies\n\n\ngood programming practices (comments, naming convention, indentation, modular code)\n\n\nsimple data structures (e.g., arrays)\n\n\nwriting test cases to check correctness of own program\n\n\nhow a program is executed and represented in a computing device (at a high level)\n\n\nthe compilation process (at a high level)\n\n\nthe concept of reusability and the use of standard/3\nrd\n party software\n\n\nbubble sort, insertion sort, linear search, and binary search\n\n\n\n\nStudents who take CS2030 are assumed to have sufficient knowledge of the above.  If there are specific components that you are not familiar with, please pick up the notes from CS1010 and self-learn.\n\n\nUNIX command line\n\n\nWe will use the \nsunfire\n computing server for this module.  As such, you are expected to be comfortable with using CLI (command line interface) and the basic UNIX commands, in a text window without fancy windows and mouse, and the concept of \nssh\n-ing into a remote host and work remotely.\n\n\nIf you are not familiar with this concept, take a look at the \nslides from the CS1010/CS1020 workshop\n.\n\n\nSource code editors\n\n\nYou are expected to be familiar with one or more source code editors.  Note that source code editor is not the same as text editor (e.g., Notepad).  A source code editor automatically highlights syntax, indents the code, matches parenthesis, supports autocompletion and code folding, and integrates with the software development process (such as revision control).\n\n\nCS1010 started (or would have started) you off with \nvim\n.  Many good source code editors exists, such as \nAtom\n, \nVS Code\n, and of course \nemacs\n1\n!\n\n\nFor your career, you should pick one and master it.  If you want to learn \nvim\n, the command \nvimtutor\n is a good place to start.  There are also many tutorials, webcasts, games, etc, online to help you learn \nvim\n.  Just google.\n\n\nDeveloper's Friendly OS\n\n\nYour life through the computing modules would be much much better if you are using a developer's friendly operating system on your personal computer.  \n\n\n\n\n\n\nIf you uses Linux or macOS, you are all set.  For macOS users, \nbrew\n is highly recommended.\n\n\n\n\n\n\nIf you use Windows 10, you should definitely install the Ubuntu Bash Shell.  There are many excellent tutorials online (such as \nthis one\n).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI can't mention \nvim\n without mentioning \nemacs\n\u00a0\n\u21a9",
            "title": "Prerequisites"
        },
        {
            "location": "/prereqs/index.html#assumed-prior-knowledge",
            "text": "CS2030 has the prerequisite of CS1010 or its equivalent.  There are, however, several versions of CS1010, and some students are waived from doing CS1010 due to prior programming knowledge.  This document here outlines the prior knowledge that the instructors assume the students have before entering CS2030.",
            "title": "Assumed Prior Knowledge"
        },
        {
            "location": "/prereqs/index.html#basic-computational-problem-solving-and-programming-skills",
            "text": "Here are some learning outcomes that students should attained after taking CS1010.  Students should be familiar with:   the computational thinking process of formulating a problem and coming up with a solution,  fundamental programming concepts, including variables, assignments, conditions, branches, loops, expressions, functions, recursions, and structures  how to program a given solution in a programming language  different classes of programming errors (logical errors, syntax errors, run-time errors)  common debugging techniques and strategies  good programming practices (comments, naming convention, indentation, modular code)  simple data structures (e.g., arrays)  writing test cases to check correctness of own program  how a program is executed and represented in a computing device (at a high level)  the compilation process (at a high level)  the concept of reusability and the use of standard/3 rd  party software  bubble sort, insertion sort, linear search, and binary search   Students who take CS2030 are assumed to have sufficient knowledge of the above.  If there are specific components that you are not familiar with, please pick up the notes from CS1010 and self-learn.",
            "title": "Basic computational problem solving and programming skills"
        },
        {
            "location": "/prereqs/index.html#unix-command-line",
            "text": "We will use the  sunfire  computing server for this module.  As such, you are expected to be comfortable with using CLI (command line interface) and the basic UNIX commands, in a text window without fancy windows and mouse, and the concept of  ssh -ing into a remote host and work remotely.  If you are not familiar with this concept, take a look at the  slides from the CS1010/CS1020 workshop .",
            "title": "UNIX command line"
        },
        {
            "location": "/prereqs/index.html#source-code-editors",
            "text": "You are expected to be familiar with one or more source code editors.  Note that source code editor is not the same as text editor (e.g., Notepad).  A source code editor automatically highlights syntax, indents the code, matches parenthesis, supports autocompletion and code folding, and integrates with the software development process (such as revision control).  CS1010 started (or would have started) you off with  vim .  Many good source code editors exists, such as  Atom ,  VS Code , and of course  emacs 1 !  For your career, you should pick one and master it.  If you want to learn  vim , the command  vimtutor  is a good place to start.  There are also many tutorials, webcasts, games, etc, online to help you learn  vim .  Just google.",
            "title": "Source code editors"
        },
        {
            "location": "/prereqs/index.html#developers-friendly-os",
            "text": "Your life through the computing modules would be much much better if you are using a developer's friendly operating system on your personal computer.      If you uses Linux or macOS, you are all set.  For macOS users,  brew  is highly recommended.    If you use Windows 10, you should definitely install the Ubuntu Bash Shell.  There are many excellent tutorials online (such as  this one ).        I can't mention  vim  without mentioning  emacs \u00a0 \u21a9",
            "title": "Developer's Friendly OS"
        },
        {
            "location": "/policies/index.html",
            "text": "Policies\n\n\nEmail Communication\n\n\n\n\n\n\nPlease use only your official NUS email for communication with the teaching staffs -- either the one with \n@u.nus.edu\n or \n@comp.nus.edu.sg\n.  \n\n\n\n\n\n\nPlease use email only for private matters.  Prefix your email subject with \n[CS2030]\n.\n\n\n\n\n\n\nPlease use \nPiazza\n for other matters related to the module.  If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.\n\n\n\n\n\n\nLab Sessions\n\n\n\n\n\n\nWe do take attendance during the lab sessions, but it does not affect your grades if you do not attend the lab sessions as long as you still need to submit the graded lab exercises.  \n\n\n\n\n\n\nYou should stick to your allocated time slot for labs.  If there is a strong reason for your to attend another lab session, please inform your lab instructors.\n\n\n\n\n\n\nLate Submissions\n\n\n\n\n\n\nAll graded exercise must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.  \n\n\n\n\n\n\nFor late submission, there is a 1% penalty (of the assessment grade) for every minute after the deadline, capped at 80%.  For example, if a homework is deserved 40 marks, and it is submitted 20 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 2 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).\n\n\n\n\n\n\nDiscussions and Plagiarism\n\n\n\n\n\n\nWe encourage discussions among students for lab assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate.  \n\n\n\n\n\n\nNUS and School of Computing have a high standard on academic honesty and take any violation seriously.  In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a series violation.   Please read the page \nPreventing Plagiarism\n from the school's website to familiarize yourself with the policy.\n\n\n\n\n\n\nI adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism.  Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.\n\n\n\n\n\n\nLecture Video\n\n\n\n\n\n\nScreencast will be recorded and posted online 2-3 days after the lecture. \nThis will be done on a 'best effort' basis and screencast will not be guaranteed to be available.  \n\n\n\n\n\n\nPosting of screencast is meant to help students who attended the lecture to recap the content, or to help those who are not able to attend the lecture due to unexpected circumstances.  It does not mean that you should skip lecture.\n\n\n\n\n\n\nModel Solutions and Slides\n\n\n\n\n\n\nSlides will be posted \nafter\n the class.  Note that slides are used as a \nvisual aid\n to assist me during lecture.  It is not meant as summary of lectures nor a replacement of lecture notes.\n\n\n\n\n\n\nIn a module like CS2030, there is often not a single correct answer.  Hence, there is no model solution for this module.  Sample solutions may be posted (both good and bad ones) for discussion.  I strongly encourage students to discuss your solution with me, instead of just comparing your solution with the sample solution.\n\n\n\n\n\n\nGrading\n\n\n\n\nStudents will received the grades they deserved irrespective of how the other students in the class performed (i.e., no bell curve)\n\n\n\n\nOpen Book Assessment\n\n\n\n\n\n\nAll assessment, including graded labs, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other \nanalog\n reference materials.  Java documentation will be made available during labs.  Relevant Java APIs will be provided during midterm tests and final assessments.\n\n\n\n\n\n\nThere is \nnothing to memorize\n for this class.",
            "title": "Policies"
        },
        {
            "location": "/policies/index.html#policies",
            "text": "",
            "title": "Policies"
        },
        {
            "location": "/policies/index.html#email-communication",
            "text": "Please use only your official NUS email for communication with the teaching staffs -- either the one with  @u.nus.edu  or  @comp.nus.edu.sg .      Please use email only for private matters.  Prefix your email subject with  [CS2030] .    Please use  Piazza  for other matters related to the module.  If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.",
            "title": "Email Communication"
        },
        {
            "location": "/policies/index.html#lab-sessions",
            "text": "We do take attendance during the lab sessions, but it does not affect your grades if you do not attend the lab sessions as long as you still need to submit the graded lab exercises.      You should stick to your allocated time slot for labs.  If there is a strong reason for your to attend another lab session, please inform your lab instructors.",
            "title": "Lab Sessions"
        },
        {
            "location": "/policies/index.html#late-submissions",
            "text": "All graded exercise must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.      For late submission, there is a 1% penalty (of the assessment grade) for every minute after the deadline, capped at 80%.  For example, if a homework is deserved 40 marks, and it is submitted 20 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 2 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).",
            "title": "Late Submissions"
        },
        {
            "location": "/policies/index.html#discussions-and-plagiarism",
            "text": "We encourage discussions among students for lab assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate.      NUS and School of Computing have a high standard on academic honesty and take any violation seriously.  In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a series violation.   Please read the page  Preventing Plagiarism  from the school's website to familiarize yourself with the policy.    I adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism.  Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.",
            "title": "Discussions and Plagiarism"
        },
        {
            "location": "/policies/index.html#lecture-video",
            "text": "Screencast will be recorded and posted online 2-3 days after the lecture. \nThis will be done on a 'best effort' basis and screencast will not be guaranteed to be available.      Posting of screencast is meant to help students who attended the lecture to recap the content, or to help those who are not able to attend the lecture due to unexpected circumstances.  It does not mean that you should skip lecture.",
            "title": "Lecture Video"
        },
        {
            "location": "/policies/index.html#model-solutions-and-slides",
            "text": "Slides will be posted  after  the class.  Note that slides are used as a  visual aid  to assist me during lecture.  It is not meant as summary of lectures nor a replacement of lecture notes.    In a module like CS2030, there is often not a single correct answer.  Hence, there is no model solution for this module.  Sample solutions may be posted (both good and bad ones) for discussion.  I strongly encourage students to discuss your solution with me, instead of just comparing your solution with the sample solution.",
            "title": "Model Solutions and Slides"
        },
        {
            "location": "/policies/index.html#grading",
            "text": "Students will received the grades they deserved irrespective of how the other students in the class performed (i.e., no bell curve)",
            "title": "Grading"
        },
        {
            "location": "/policies/index.html#open-book-assessment",
            "text": "All assessment, including graded labs, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other  analog  reference materials.  Java documentation will be made available during labs.  Relevant Java APIs will be provided during midterm tests and final assessments.    There is  nothing to memorize  for this class.",
            "title": "Open Book Assessment"
        },
        {
            "location": "/schedule/index.html",
            "text": "Schedule and Learning Material\n\n\n\n\n\n\n\n\nWeek\n\n\nDate\n\n\nTopics\n\n\nResources\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2017-08-14\n\n\n1. Abstraction and Encapsulation\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n2\n\n\n2017-08-21\n\n\n2. Inheritance and Polymorphism\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n3\n\n\n2017-08-28\n\n\n3. Inheritance, Continued\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n4\n\n\n2017-09-04\n\n\n4. Memory, Generics, and Exceptions\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n5\n\n\n2017-09-11\n\n\n5. Java Collections\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n6\n\n\n2017-09-18\n\n\n6. Nested Classes, Enums\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n\n\n2017-09-25\n\n\nBreak\n\n\n\n\n\n\n\n\n\n\n7\n\n\n2017-10-02\n\n\nMidterm\n\n\n\n\n\n\n\n\n\n\n8\n\n\n2017-10-09\n\n\n7. Function and Lambdas\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n9\n\n\n2017-10-16\n\n\n8. Lambdas and Stream\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n10\n\n\n2017-10-23\n\n\n9. Functors, Monads, Collections\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n11\n\n\n2017-10-30\n\n\n10. Parallel Streams\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n12\n\n\n2017-11-06\n\n\n11. Asynchronous Programming\n\n\nNotes\n . \nSlides\n . [No Video]\n\n\n\n\n\n\n\n\n13\n\n\n2017-11-13\n\n\n12. Recap\n\n\nNo Notes . \nSlides\n . \nVideo",
            "title": "Schedule"
        },
        {
            "location": "/schedule/index.html#schedule-and-learning-material",
            "text": "Week  Date  Topics  Resources       1  2017-08-14  1. Abstraction and Encapsulation  Notes  .  Slides  .  Video     2  2017-08-21  2. Inheritance and Polymorphism  Notes  .  Slides  .  Video     3  2017-08-28  3. Inheritance, Continued  Notes  .  Slides  .  Video     4  2017-09-04  4. Memory, Generics, and Exceptions  Notes  .  Slides  .  Video     5  2017-09-11  5. Java Collections  Notes  .  Slides  .  Video     6  2017-09-18  6. Nested Classes, Enums  Notes  .  Slides  .  Video      2017-09-25  Break      7  2017-10-02  Midterm      8  2017-10-09  7. Function and Lambdas  Notes  .  Slides  .  Video     9  2017-10-16  8. Lambdas and Stream  Notes  .  Slides  .  Video     10  2017-10-23  9. Functors, Monads, Collections  Notes  .  Slides  .  Video     11  2017-10-30  10. Parallel Streams  Notes  .  Slides  .  Video     12  2017-11-06  11. Asynchronous Programming  Notes  .  Slides  . [No Video]     13  2017-11-13  12. Recap  No Notes .  Slides  .  Video",
            "title": "Schedule and Learning Material"
        },
        {
            "location": "/readings/index.html",
            "text": "Readings\n\n\nHere is a collection of readings related to CS2030 or otherwise.\n\n\nOn UNIX, Vim, and Emacs\n\n\n\n\n\n\nStackExchange: \nTime to Drop Emacs and Vim?\n\n\n\n\n\n\nBook: \nThe Art of UNIX Programming\n, online version, by Eric Steven Raymond, 2003. \n\n\n\n\n\n\nOn Programming Practices\n\n\n\n\nGoogle Java Style Guide\n\n\n\n\nOn OOP\n\n\n\n\n\n\nWhy extends is evil\n by Allen Holub. \n\"Good designers write most of their code in terms of interfaces, not concrete base classes.\"\n\n\n\n\n\n\nGoodbye, Object Oriented Programming\n by Charles Scalfani. \n\"One day, my code works and the next day it stops working. Here\u2019s the kicker. I didn\u2019t change my code.\n\"\n\n\n\n\n\n\nWhy getters and setters methods are evil\n, by Allen Holub. \"\nThough getter/setter methods are commonplace in Java, they are not particularly object oriented (OO). In fact, they can damage your code's maintainability. Moreover, the presence of numerous getter and setter methods is a red flag that the program isn't necessarily well designed from an OO perspective.\n\"\n\n\n\n\n\n\nGetters/Setters.  Evil.  Period\n, by Yegor Bygayenko.  \"\nThe gist of the following text is this: getters and setters is a terrible practice and those who use it can't be excused.\n\"\n\n\n\n\n\n\nTell, Don't Ask\n by Thoughtbot Inc. \n\"Good OOP is about telling objects what you want done, not querying an object and acting on its behalf. Data and operations that depend on that data belong in the same object.\"\n\n\n\n\n\n\nTell, Don't Ask\n by The Pragmatic Bookshelf. \n\"Procedural code gets information then makes decisions. Object-oriented code tells objects to do things.\"\n\n\n\n\n\n\nFor 1\nst\n Year Students\n\n\n\n\n\n\nNotes to Computer Science Freshmen, From the Future\n: \nEarly into the AY12/13 academic year, Prof Tay Yong Chiang organized a supper for Computer Science freshmen at Tembusu College. The bunch of seniors who were gathered there put together a document for NUS computing freshmen. This is that document.\n\n\n\n\n\n\nHow Not to Go About a Programming Assignment, by Agustin Cernuda del Rio\n: \nComputer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again)..\n\n\n\n\n\n\nBest Teacher I Ever Had, by David Owen\n: \nMr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..\n\n\n\n\n\n\nAcademic Honesty\n: \nAll students share the responsibility for upholding the academic standards and reputation of the University. Academic honesty is a prerequisite condition in the pursuit and acquisition of knowledge..",
            "title": "Readings"
        },
        {
            "location": "/readings/index.html#readings",
            "text": "Here is a collection of readings related to CS2030 or otherwise.",
            "title": "Readings"
        },
        {
            "location": "/readings/index.html#on-unix-vim-and-emacs",
            "text": "StackExchange:  Time to Drop Emacs and Vim?    Book:  The Art of UNIX Programming , online version, by Eric Steven Raymond, 2003.",
            "title": "On UNIX, Vim, and Emacs"
        },
        {
            "location": "/readings/index.html#on-programming-practices",
            "text": "Google Java Style Guide",
            "title": "On Programming Practices"
        },
        {
            "location": "/readings/index.html#on-oop",
            "text": "Why extends is evil  by Allen Holub.  \"Good designers write most of their code in terms of interfaces, not concrete base classes.\"    Goodbye, Object Oriented Programming  by Charles Scalfani.  \"One day, my code works and the next day it stops working. Here\u2019s the kicker. I didn\u2019t change my code.\n\"    Why getters and setters methods are evil , by Allen Holub. \" Though getter/setter methods are commonplace in Java, they are not particularly object oriented (OO). In fact, they can damage your code's maintainability. Moreover, the presence of numerous getter and setter methods is a red flag that the program isn't necessarily well designed from an OO perspective. \"    Getters/Setters.  Evil.  Period , by Yegor Bygayenko.  \" The gist of the following text is this: getters and setters is a terrible practice and those who use it can't be excused. \"    Tell, Don't Ask  by Thoughtbot Inc.  \"Good OOP is about telling objects what you want done, not querying an object and acting on its behalf. Data and operations that depend on that data belong in the same object.\"    Tell, Don't Ask  by The Pragmatic Bookshelf.  \"Procedural code gets information then makes decisions. Object-oriented code tells objects to do things.\"",
            "title": "On OOP"
        },
        {
            "location": "/readings/index.html#for-1st-year-students",
            "text": "Notes to Computer Science Freshmen, From the Future :  Early into the AY12/13 academic year, Prof Tay Yong Chiang organized a supper for Computer Science freshmen at Tembusu College. The bunch of seniors who were gathered there put together a document for NUS computing freshmen. This is that document.    How Not to Go About a Programming Assignment, by Agustin Cernuda del Rio :  Computer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again)..    Best Teacher I Ever Had, by David Owen :  Mr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..    Academic Honesty :  All students share the responsibility for upholding the academic standards and reputation of the University. Academic honesty is a prerequisite condition in the pursuit and acquisition of knowledge..",
            "title": "For 1st Year Students"
        },
        {
            "location": "/reviews/index.html",
            "text": "Review Questions\n\n\nThese set of questions are designed to illustrate certain rules and principles about Java.\nYou can easily find out the answer yourselves using \njshell\n or write small programs.\n\n\nIt is more important to understand why -- there are some underlying principles/rules in Java that cause the compiler / code to behave the way it does.\n\n\nNote that the code is terse by design, and is never meant to be a positive example of good Java code.\n\n\n\n\n\n\nCan, or not?\n\n\n1\n2\n3\n4\n5\n6\nint\n \ni\n;\n\n\ndouble\n \nd\n;\n\n\ni\n \n=\n \nd\n;\n\n\nd\n \n=\n \ni\n;\n\n\ni\n \n=\n \n(\nint\n)\n \nd\n;\n\n\nd\n \n=\n \n(\ndouble\n)\n \ni\n;\n\n\n\n\n\n\n\n\n\n\n\nCan, or not?\n\n\n1\n2\n3\n4\n5\n6\nint\n \ni\n;\n\n\nboolean\n \nb\n;\n\n\ni\n \n=\n \nb\n;\n\n\nb\n \n=\n \ni\n;\n\n\ni\n \n=\n \n(\nint\n)\n \nb\n;\n\n\nb\n \n=\n \n(\nboolean\n)\n \ni\n;\n\n\n\n\n\n\n\n\n\n\n\nCan, or not?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nclass\n \nA\n \n{\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n\n}\n\n\n\nA\n \na\n \n=\n \nnew\n \nB\n();\n\n\nB\n \nb\n \n=\n \nnew\n \nA\n();\n\n\n\n\n\n\n\n\n\n\n\nCan, or not?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nclass\n \nA\n \n{\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n\n}\n\n\n\nA\n \na\n \n=\n \nnew\n \nA\n();\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n \n=\n \n(\nB\n)\na\n;\n\n\na\n \n=\n \n(\nA\n)\nb\n;\n\n\n\n\n\n\n\n\n\n\n\nCan, or not?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ninterface\n \nI\n \n{\n\n\n}\n\n\n\nclass\n \nA\n \nimplements\n \nI\n \n{\n\n\n}\n\n\n\nI\n \ni1\n \n=\n \nnew\n \nI\n();\n\n\nI\n \ni2\n \n=\n \nnew\n \nA\n();\n\n\nA\n \na1\n \n=\n \ni2\n;\n\n\nA\n \na2\n \n=\n \n(\nA\n)\ni2\n;\n\n\n\n\n\n\n\n\n\n\n\nCan, or not?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\ninterface\n \nI\n \n{\n\n\n}\n\n\n\ninterface\n \nJ\n \nextends\n \nI\n \n{\n\n\n}\n\n\n\nclass\n \nA\n \nimplements\n \nJ\n \n{\n\n\n}\n\n\n\nA\n \na\n \n=\n \nnew\n \nA\n();\n\n\nI\n \ni\n \n=\n \na\n;\n\n\nJ\n \nj\n \n=\n \na\n;\n\n\ni\n \n=\n \nj\n;\n\n\nj\n \n=\n \ni\n;\n\n\nj\n \n=\n \n(\nJ\n)\ni\n;\n\n\na\n \n=\n \ni\n;\n\n\na\n \n=\n \nj\n;\n\n\na\n \n=\n \n(\nA\n)\ni\n;\n\n\na\n \n=\n \n(\nA\n)\nj\n;\n\n\n\n\n\n\n\n\n\n\n\nCan, or not?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\ninterface\n \nI\n \n{\n\n\n}\n\n\n\ninterface\n \nJ\n \n{\n\n\n}\n\n\n\nclass\n \nA\n \nimplements\n \nI\n,\n \nJ\n \n{\n\n\n}\n\n\n\nA\n \na\n \n=\n \nnew\n \nA\n();\n\n\nI\n \ni\n \n=\n \na\n;\n\n\nJ\n \nj\n \n=\n \na\n;\n\n\ni\n \n=\n \nj\n;\n\n\nj\n \n=\n \ni\n;\n\n\nj\n \n=\n \n(\nJ\n)\ni\n;\n\n\nI\n \n=\n \n(\nI\n)\nj\n;\n\n\na\n \n=\n \ni\n;\n\n\na\n \n=\n \nj\n;\n\n\na\n \n=\n \n(\nA\n)\ni\n;\n\n\na\n \n=\n \n(\nA\n)\nj\n;\n\n\n\n\n\n\n\n\n\n\n\nCan, or not?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nclass\n \nA\n \n{\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n\n}\n\n\n\nclass\n \nC\n \nextends\n \nA\n \n{\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\nC\n \nc\n \n=\n \nb\n;\n\n\nA\n \na\n \n=\n \n(\nA\n)\nb\n;\n\n\nC\n \nc\n \n=\n \n(\nC\n)\nb\n;\n\n\n\n\n\n\n\n\n\n\n\nCan, or not? If can, print what?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nCan, or not? If can, print what?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\na\n \n=\n \nnew\n \nA\n();\n\n\na\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nCan, or not? If can, print what?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nsuper\n.\nf\n();\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nCan, or not? If can, print what?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nthis\n.\nf\n();\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nCan, or not? If can, print what?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nint\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n    \nreturn\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nCan, or not? If can, print what?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nA\n \n{\n\n  \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nvoid\n \nf\n(\nint\n \nx\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n    \nreturn\n \nx\n;\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\nb\n.\nf\n(\n0\n);\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\na\n.\nf\n(\n0\n);\n\n\n\n\n\n\n\n\n\n\n\nCan, or not?  If can, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nclass\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nCan, or not?  If can, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nclass\n \nA\n \n{\n\n  \nprivate\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nDeleted question - duplicate of Q16\n\n\n\n\n\n\nCan, or not?  If can, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nclass\n \nA\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\na\n.\nf\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nCan, or not?  If can, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nclass\n \nA\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"A f\"\n);\n\n  \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"B f\"\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nA\n \na\n \n=\n \nb\n;\n\n\nA\n.\nf\n();\n\n\nB\n.\nf\n();\n\n\na\n.\nf\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? Why?\n\n\n1\n2\n3\n4\nclass\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \nx\n)\n \n{}\n\n  \npublic\n \nvoid\n \nf\n(\nboolean\n \ny\n)\n \n{}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? Why?\n\n\n1\n2\n3\n4\nclass\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \nx\n)\n \n{}\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \ny\n)\n \n{}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? Why?\n\n\n1\n2\n3\n4\nclass\n \nA\n \n{\n\n  \nprivate\n \nvoid\n \nf\n(\nint\n \nx\n)\n \n{}\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \ny\n)\n \n{}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? Why?\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nA\n \n{\n\n  \npublic\n \nint\n \nf\n(\nint\n \nx\n)\n \n{\n\n      \nreturn\n \nx\n;\n\n  \n}\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \ny\n)\n \n{}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile?  Why?\n\n\n1\n2\n3\n4\nclass\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \nx\n,\n \nString\n \ns\n)\n \n{}\n\n  \npublic\n \nvoid\n \nf\n(\nString\n \ns\n,\n \nint\n \ny\n)\n \n{}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? Why?\n\n\n1\n2\n3\n4\nclass\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \nx\n)\n \n{}\n\n  \npublic\n \nvoid\n \nf\n(\nint\n \ny\n)\n \nthrows\n \nIOException\n \n{}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile?  If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nA\n \n{\n\n  \nprivate\n \nint\n \nx\n \n=\n \n0\n;\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\nx\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile?  If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nA\n \n{\n\n  \nprivate\n \nint\n \nx\n \n=\n \n0\n;\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\nsuper\n.\nx\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile?  If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nA\n \n{\n\n  \nprotected\n \nint\n \nx\n \n=\n \n0\n;\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\nx\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile?  If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nclass\n \nA\n \n{\n\n  \nprotected\n \nint\n \nx\n \n=\n \n0\n;\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nint\n \nx\n \n=\n \n1\n;\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\nx\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile?  If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nclass\n \nA\n \n{\n\n  \nprotected\n \nint\n \nx\n \n=\n \n0\n;\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n  \npublic\n \nint\n \nx\n \n=\n \n1\n;\n\n  \npublic\n \nvoid\n \nf\n()\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\nsuper\n.\nx\n);\n\n  \n}\n\n\n}\n\n\n\nB\n \nb\n \n=\n \nnew\n \nB\n();\n\n\nb\n.\nf\n();\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nclass\n \nMain\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \nthrows\n \nIllegalArgumentException\n \n{\n\n    \ntry\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Before throw\"\n);\n\n      \nthrow\n \nnew\n \nIllegalArgumentException\n();\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"After throw\"\n);\n\n    \n}\n \ncatch\n \n(\nIllegalArgumentException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in f\"\n);\n\n    \n}\n\n  \n}\n\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \ntry\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Before f\"\n);\n\n      \nf\n();\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"After f\"\n);\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in main\"\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nMain\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \nthrows\n \nIllegalArgumentException\n \n{\n\n    \ntry\n \n{\n\n      \nthrow\n \nnew\n \nIllegalArgumentException\n();\n\n    \n}\n \ncatch\n \n(\nIllegalArgumentException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in f\"\n);\n\n    \n}\n\n  \n}\n\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \ntry\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Before f\"\n);\n\n      \nf\n();\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"After f\"\n);\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in main\"\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nMain\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \nthrows\n \nIllegalArgumentException\n \n{\n\n    \ntry\n \n{\n\n      \nthrow\n \nnew\n \nException\n();\n\n    \n}\n \ncatch\n \n(\nIllegalArgumentException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in f\"\n);\n\n    \n}\n\n  \n}\n\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \ntry\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Before f\"\n);\n\n      \nf\n();\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"After f\"\n);\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in main\"\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nMain\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \nthrows\n \nException\n \n{\n\n    \ntry\n \n{\n\n      \nthrow\n \nnew\n \nIllegalArgumentException\n();\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in f\"\n);\n\n    \n}\n\n  \n}\n\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \ntry\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Before f\"\n);\n\n      \nf\n();\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"After f\"\n);\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in main\"\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nMain\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \nthrows\n \nException\n \n{\n\n    \ntry\n \n{\n\n      \nthrow\n \nnew\n \nArrayIndexOutOfBoundsException\n();\n\n    \n}\n \ncatch\n \n(\nIllegalArgumentException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in f\"\n);\n\n    \n}\n\n  \n}\n\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \ntry\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Before f\"\n);\n\n      \nf\n();\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"After f\"\n);\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in main\"\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nclass\n \nMain\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \nthrows\n \nException\n \n{\n\n    \ntry\n \n{\n\n      \nthrow\n \nnew\n \nArrayIndexOutOfBoundsException\n();\n\n    \n}\n \ncatch\n \n(\nIllegalArgumentException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught IA exception in f\"\n);\n\n    \n}\n \ncatch\n \n(\nArrayIndexOutOfBoundsException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught AIOOB exception in f\"\n);\n\n    \n}\n\n  \n}\n\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \ntry\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Before f\"\n);\n\n      \nf\n();\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"After f\"\n);\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in main\"\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nclass\n \nMain\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \nthrows\n \nException\n \n{\n\n    \ntry\n \n{\n\n      \nthrow\n \nnew\n \nArrayIndexOutOfBoundsException\n();\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught exception in f\"\n);\n\n    \n}\n \ncatch\n \n(\nArrayIndexOutOfBoundsException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught AIOOB exception in f\"\n);\n\n    \n}\n\n  \n}\n\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \ntry\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Before f\"\n);\n\n      \nf\n();\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"After f\"\n);\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in main\"\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nclass\n \nMain\n \n{\n\n  \nstatic\n \nvoid\n \nf\n()\n \nthrows\n \nException\n \n{\n\n    \ntry\n \n{\n\n      \nthrow\n \nnew\n \nArrayIndexOutOfBoundsException\n();\n\n    \n}\n \ncatch\n \n(\nArrayIndexOutOfBoundsException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught AIOOB exception in f\"\n);\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught exception in f\"\n);\n\n    \n}\n\n  \n}\n\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \ntry\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Before f\"\n);\n\n      \nf\n();\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"After f\"\n);\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\n\"Caught in main\"\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nList\n<\nInteger\n>\n \nlist\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nint\n \none\n \n=\n \n1\n;\n\n\nInteger\n \ntwo\n \n=\n \n2\n;\n\n\n\nlist\n.\nadd\n(\none\n);\n\n\nlist\n.\nadd\n(\ntwo\n);\n\n\nlist\n.\nadd\n(\n3\n);\n\n\n\nfor\n \n(\nInteger\n \nnum\n \n:\n \nlist\n)\n \n{\n\n  \nSystem\n.\nout\n.\nprintln\n(\nnum\n);\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nList\n<\nInteger\n>\n \nlist\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nint\n \none\n \n=\n \n1\n;\n\n\nInteger\n \ntwo\n \n=\n \n2\n;\n\n\n\nlist\n.\nadd\n(\none\n);\n\n\nlist\n.\nadd\n(\ntwo\n);\n\n\nlist\n.\nadd\n(\n3\n);\n\n\n\nfor\n \n(\nint\n \nnum\n \n:\n \nlist\n)\n \n{\n\n  \nSystem\n.\nout\n.\nprintln\n(\nnum\n);\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\nList\n<\nInteger\n>\n \nlist\n \n=\n \nArrays\n.\nasList\n(\n1\n,\n \n2\n,\n \n3\n);\n\n\n\nfor\n \n(\nDouble\n \nnum\n \n:\n \nlist\n)\n \n{\n\n  \nSystem\n.\nout\n.\nprintln\n(\nnum\n);\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\nList\n<\nInteger\n>\n \nlist\n \n=\n \nArrays\n.\nasList\n(\n1\n,\n \n2\n,\n \n3\n);\n\n\n\nfor\n \n(\ndouble\n \nnum\n \n:\n \nlist\n)\n \n{\n\n  \nSystem\n.\nout\n.\nprintln\n(\nnum\n);\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\ndouble\n \nd\n \n=\n \n5\n;\n\n\nint\n \ni\n \n=\n \n2.5\n;\n\n\n\nSystem\n.\nout\n.\nprintln\n(\nd\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\ndouble\n \nd\n \n=\n \n(\nint\n)\n \n5\n;\n\n\nint\n \ni\n \n=\n \n(\ndouble\n)\n \n2.5\n;\n\n\n\nSystem\n.\nout\n.\nprintln\n(\nd\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\ndouble\n \nd\n \n=\n \n(\nint\n)\n \n5.5\n;\n\n\nint\n \ni\n \n=\n \n(\nint\n)\n \n2.5\n;\n\n\n\nSystem\n.\nout\n.\nprintln\n(\nd\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\nDouble\n \nd\n \n=\n \n5\n;\n\n\nInteger\n \ni\n \n=\n \n2.5\n;\n\n\n\nSystem\n.\nout\n.\nprintln\n(\nd\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\nDouble\n \nd\n \n=\n \n(\ndouble\n)\n \n5\n;\n\n\nInteger\n \ni\n \n=\n \n(\nint\n)\n \n2.5\n;\n\n\n\nSystem\n.\nout\n.\nprintln\n(\nd\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\ndouble\n \nd\n \n=\n \n(\nInteger\n)\n \n5\n;\n\n\nint\n \ni\n \n=\n \n(\nInteger\n)\n \n2\n;\n\n\n\nSystem\n.\nout\n.\nprintln\n(\nd\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\ndouble\n \nd\n \n=\n \n(\nDouble\n)\n \n5\n;\n\n\nint\n \ni\n \n=\n \n(\nInteger\n)\n \n2\n;\n\n\n\nSystem\n.\nout\n.\nprintln\n(\nd\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nList\n<\nInteger\n>\n \nlist\n \n=\n \nnew\n \nLinkedList\n<>();\n\n\nlist\n.\nadd\n(\n5\n);\n\n\nlist\n.\nadd\n(\n4\n);\n\n\nlist\n.\nadd\n(\n3\n);\n\n\nlist\n.\nadd\n(\n2\n);\n\n\nlist\n.\nadd\n(\n1\n);\n\n\n\nIterator\n<\nInteger\n>\n \nit\n \n=\n \nlist\n.\niterator\n();\n\n\nwhile\n \n(\nit\n.\nhasNext\n())\n \n{\n\n  \nSystem\n.\nout\n.\nprintln\n(\nit\n.\nnext\n());\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nArrayList\n<\nInteger\n>\n \nlist\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nlist\n.\nadd\n(\n5\n);\n\n\nlist\n.\nadd\n(\n4\n);\n\n\nlist\n.\nadd\n(\n3\n);\n\n\nlist\n.\nadd\n(\n2\n);\n\n\nlist\n.\nadd\n(\n1\n);\n\n\n\nCollections\n.\nsort\n(\nlist\n);\n\n\n\nfor\n \n(\nint\n \ni\n \n:\n \nlist\n)\n \n{\n\n  \nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nList\n<\nInteger\n>\n \nlist\n \n=\n \nArrays\n.\nasList\n(\n1\n,\n \n2\n,\n \n4\n,\n \n4\n,\n \n5\n);\n\n\n\nCollections\n.\nsort\n(\nlist\n,\n \nnew\n \nComparator\n<>()\n \n{\n\n  \n@Override\n\n  \npublic\n \nint\n \ncompare\n(\nInteger\n \ni1\n,\n \nInteger\n \ni2\n)\n \n{\n\n    \nreturn\n \n-\ni1\n.\ncompareTo\n(\ni2\n);\n\n  \n}\n\n\n});\n\n\n\nlist\n.\nforEach\n(\nSystem\n.\nout\n::\nprintln\n);\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\nSet\n<\nInteger\n>\n \nset\n \n=\n \nnew\n \nHashSet\n<>(\nArrays\n.\nasList\n(\n5\n,\n \n2\n,\n \n4\n,\n \n1\n,\n \n4\n,\n \n2\n));\n\n\n\nset\n.\nforEach\n(\nSystem\n.\nout\n::\nprintln\n);\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nMap\n<\nInteger\n,\n \nString\n>\n \nmap\n \n=\n \nnew\n \nHashMap\n<>();\n\n\nmap\n.\nput\n(\n2\n,\n \n\"world\"\n);\n\n\nmap\n.\nput\n(\n2\n,\n \n\"cs2030\"\n);\n\n\nmap\n.\nput\n(\n1\n,\n \n\"hello\"\n);\n\n\n\nfor\n \n(\nMap\n.\nEntry\n<\nInteger\n,\n \nString\n>\n \nentry\n \n:\n \nmap\n.\nentrySet\n())\n \n{\n\n  \nSystem\n.\nout\n.\nprintln\n(\nentry\n.\ngetKey\n()\n \n+\n \n\": \"\n \n+\n \nentry\n.\ngetValue\n());\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\n6\nMap\n<\nInteger\n,\n \nString\n>\n \nmap\n \n=\n \nnew\n \nHashMap\n<>();\n\n\nmap\n.\nput\n(\n1\n,\n \n\"bell\"\n);\n\n\nmap\n.\nput\n(\n2\n,\n \n\"curve\"\n);\n\n\nmap\n.\nput\n(\n9001\n,\n \n\"god\"\n);\n\n\n\nmap\n.\nforEach\n((\nk\n,\n \nv\n)\n \n->\n \nSystem\n.\nout\n.\nprintln\n(\nk\n \n+\n \n\": \"\n \n+\n \nv\n));\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\n6\nMap\n<\nInteger\n,\n \nString\n>\n \nmap\n \n=\n \nnew\n \nHashMap\n<>();\n\n\nmap\n.\nput\n(\n2\n,\n \n\"bell\"\n);\n\n\nmap\n.\nput\n(\n1\n,\n \n\"curve\"\n);\n\n\nmap\n.\nput\n(\n9001\n,\n \n\"god\"\n);\n\n\n\nmap\n.\nforEach\n((\nk\n,\n \nv\n)\n \n->\n \nSystem\n.\nout\n.\nprintln\n(\nk\n \n+\n \n\": \"\n \n+\n \nv\n));\n\n\n\n\n\n\n\n\n\n\n\nWill the following code compile? If so, what will be printed?\n\n\n1\n2\n3\n4\n5\n6\nMap\n<\nInteger\n,\n \nString\n>\n \nmap\n \n=\n \nnew\n \nHashMap\n<>();\n\n\nmap\n.\nput\n(\n10\n,\n \n\"bell\"\n);\n\n\nmap\n.\nput\n(\n1\n,\n \n\"curve\"\n);\n\n\nmap\n.\nput\n(\n9001\n,\n \n\"god\"\n);\n\n\n\nmap\n.\nforEach\n((\nk\n,\n \nv\n)\n \n->\n \nSystem\n.\nout\n.\nprintln\n(\nk\n \n+\n \n\": \"\n \n+\n \nv\n));",
            "title": "Review Qs"
        },
        {
            "location": "/reviews/index.html#review-questions",
            "text": "These set of questions are designed to illustrate certain rules and principles about Java.\nYou can easily find out the answer yourselves using  jshell  or write small programs.  It is more important to understand why -- there are some underlying principles/rules in Java that cause the compiler / code to behave the way it does.  Note that the code is terse by design, and is never meant to be a positive example of good Java code.    Can, or not?  1\n2\n3\n4\n5\n6 int   i ;  double   d ;  i   =   d ;  d   =   i ;  i   =   ( int )   d ;  d   =   ( double )   i ;      Can, or not?  1\n2\n3\n4\n5\n6 int   i ;  boolean   b ;  i   =   b ;  b   =   i ;  i   =   ( int )   b ;  b   =   ( boolean )   i ;      Can, or not?  1\n2\n3\n4\n5\n6\n7\n8 class   A   {  }  class   B   extends   A   {  }  A   a   =   new   B ();  B   b   =   new   A ();      Can, or not?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 class   A   {  }  class   B   extends   A   {  }  A   a   =   new   A ();  B   b   =   new   B ();  b   =   ( B ) a ;  a   =   ( A ) b ;      Can, or not?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 interface   I   {  }  class   A   implements   I   {  }  I   i1   =   new   I ();  I   i2   =   new   A ();  A   a1   =   i2 ;  A   a2   =   ( A ) i2 ;      Can, or not?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 interface   I   {  }  interface   J   extends   I   {  }  class   A   implements   J   {  }  A   a   =   new   A ();  I   i   =   a ;  J   j   =   a ;  i   =   j ;  j   =   i ;  j   =   ( J ) i ;  a   =   i ;  a   =   j ;  a   =   ( A ) i ;  a   =   ( A ) j ;      Can, or not?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 interface   I   {  }  interface   J   {  }  class   A   implements   I ,   J   {  }  A   a   =   new   A ();  I   i   =   a ;  J   j   =   a ;  i   =   j ;  j   =   i ;  j   =   ( J ) i ;  I   =   ( I ) j ;  a   =   i ;  a   =   j ;  a   =   ( A ) i ;  a   =   ( A ) j ;      Can, or not?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 class   A   {  }  class   B   extends   A   {  }  class   C   extends   A   {  }  B   b   =   new   B ();  A   a   =   b ;  C   c   =   b ;  A   a   =   ( A ) b ;  C   c   =   ( C ) b ;      Can, or not? If can, print what?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 class   A   { \n   void   f ()   {   System . out . println ( \"A f\" );   }  }  class   B   extends   A   {  }  B   b   =   new   B ();  b . f ();  A   a   =   b ;  a . f ();      Can, or not? If can, print what?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 class   A   { \n   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   void   f ()   { \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  b . f ();  A   a   =   b ;  a . f ();  a   =   new   A ();  a . f ();      Can, or not? If can, print what?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 class   A   { \n   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   void   f ()   { \n     super . f (); \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  b . f ();  A   a   =   b ;  a . f ();      Can, or not? If can, print what?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 class   A   { \n   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   void   f ()   { \n     this . f (); \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  b . f ();  A   a   =   b ;  a . f ();      Can, or not? If can, print what?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 class   A   { \n   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   int   f ()   { \n     System . out . println ( \"B f\" ); \n     return   0 ; \n   }  }  B   b   =   new   B ();  b . f ();  A   a   =   b ;  a . f ();      Can, or not? If can, print what?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   A   { \n   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   void   f ( int   x )   { \n     System . out . println ( \"B f\" ); \n     return   x ; \n   }  }  B   b   =   new   B ();  b . f ();  b . f ( 0 );  A   a   =   b ;  a . f ();  a . f ( 0 );      Can, or not?  If can, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 class   A   { \n   public   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  A   a   =   b ;  a . f ();  b . f ();      Can, or not?  If can, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 class   A   { \n   private   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  A   a   =   b ;  a . f ();  b . f ();      Deleted question - duplicate of Q16    Can, or not?  If can, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 class   A   { \n   static   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  A   a   =   b ;  a . f ();  b . f ();      Can, or not?  If can, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 class   A   { \n   static   void   f ()   { \n     System . out . println ( \"A f\" ); \n   }  }  class   B   extends   A   { \n   static   void   f ()   { \n     System . out . println ( \"B f\" ); \n   }  }  B   b   =   new   B ();  A   a   =   b ;  A . f ();  B . f ();  a . f ();  b . f ();      Will the following code compile? Why?  1\n2\n3\n4 class   A   { \n   public   void   f ( int   x )   {} \n   public   void   f ( boolean   y )   {}  }      Will the following code compile? Why?  1\n2\n3\n4 class   A   { \n   public   void   f ( int   x )   {} \n   public   void   f ( int   y )   {}  }      Will the following code compile? Why?  1\n2\n3\n4 class   A   { \n   private   void   f ( int   x )   {} \n   public   void   f ( int   y )   {}  }      Will the following code compile? Why?  1\n2\n3\n4\n5\n6 class   A   { \n   public   int   f ( int   x )   { \n       return   x ; \n   } \n   public   void   f ( int   y )   {}  }      Will the following code compile?  Why?  1\n2\n3\n4 class   A   { \n   public   void   f ( int   x ,   String   s )   {} \n   public   void   f ( String   s ,   int   y )   {}  }      Will the following code compile? Why?  1\n2\n3\n4 class   A   { \n   public   void   f ( int   x )   {} \n   public   void   f ( int   y )   throws   IOException   {}  }      Will the following code compile?  If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   A   { \n   private   int   x   =   0 ;  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( x ); \n   }  }  B   b   =   new   B ();  b . f ();      Will the following code compile?  If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   A   { \n   private   int   x   =   0 ;  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( super . x ); \n   }  }  B   b   =   new   B ();  b . f ();      Will the following code compile?  If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   A   { \n   protected   int   x   =   0 ;  }  class   B   extends   A   { \n   public   void   f ()   { \n     System . out . println ( x ); \n   }  }  B   b   =   new   B ();  b . f ();      Will the following code compile?  If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 class   A   { \n   protected   int   x   =   0 ;  }  class   B   extends   A   { \n   public   int   x   =   1 ; \n   public   void   f ()   { \n     System . out . println ( x ); \n   }  }  B   b   =   new   B ();  b . f ();      Will the following code compile?  If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 class   A   { \n   protected   int   x   =   0 ;  }  class   B   extends   A   { \n   public   int   x   =   1 ; \n   public   void   f ()   { \n     System . out . println ( super . x ); \n   }  }  B   b   =   new   B ();  b . f ();      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 class   Main   { \n   static   void   f ()   throws   IllegalArgumentException   { \n     try   { \n       System . out . println ( \"Before throw\" ); \n       throw   new   IllegalArgumentException (); \n       System . out . println ( \"After throw\" ); \n     }   catch   ( IllegalArgumentException   e )   { \n       System . out . println ( \"Caught in f\" ); \n     } \n   } \n\n   public   static   void   main ( String []   args )   { \n     try   { \n       System . out . println ( \"Before f\" ); \n       f (); \n       System . out . println ( \"After f\" ); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught in main\" ); \n     } \n   }  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   Main   { \n   static   void   f ()   throws   IllegalArgumentException   { \n     try   { \n       throw   new   IllegalArgumentException (); \n     }   catch   ( IllegalArgumentException   e )   { \n       System . out . println ( \"Caught in f\" ); \n     } \n   } \n\n   public   static   void   main ( String []   args )   { \n     try   { \n       System . out . println ( \"Before f\" ); \n       f (); \n       System . out . println ( \"After f\" ); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught in main\" ); \n     } \n   }  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   Main   { \n   static   void   f ()   throws   IllegalArgumentException   { \n     try   { \n       throw   new   Exception (); \n     }   catch   ( IllegalArgumentException   e )   { \n       System . out . println ( \"Caught in f\" ); \n     } \n   } \n\n   public   static   void   main ( String []   args )   { \n     try   { \n       System . out . println ( \"Before f\" ); \n       f (); \n       System . out . println ( \"After f\" ); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught in main\" ); \n     } \n   }  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   Main   { \n   static   void   f ()   throws   Exception   { \n     try   { \n       throw   new   IllegalArgumentException (); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught in f\" ); \n     } \n   } \n\n   public   static   void   main ( String []   args )   { \n     try   { \n       System . out . println ( \"Before f\" ); \n       f (); \n       System . out . println ( \"After f\" ); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught in main\" ); \n     } \n   }  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   Main   { \n   static   void   f ()   throws   Exception   { \n     try   { \n       throw   new   ArrayIndexOutOfBoundsException (); \n     }   catch   ( IllegalArgumentException   e )   { \n       System . out . println ( \"Caught in f\" ); \n     } \n   } \n\n   public   static   void   main ( String []   args )   { \n     try   { \n       System . out . println ( \"Before f\" ); \n       f (); \n       System . out . println ( \"After f\" ); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught in main\" ); \n     } \n   }  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 class   Main   { \n   static   void   f ()   throws   Exception   { \n     try   { \n       throw   new   ArrayIndexOutOfBoundsException (); \n     }   catch   ( IllegalArgumentException   e )   { \n       System . out . println ( \"Caught IA exception in f\" ); \n     }   catch   ( ArrayIndexOutOfBoundsException   e )   { \n       System . out . println ( \"Caught AIOOB exception in f\" ); \n     } \n   } \n\n   public   static   void   main ( String []   args )   { \n     try   { \n       System . out . println ( \"Before f\" ); \n       f (); \n       System . out . println ( \"After f\" ); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught in main\" ); \n     } \n   }  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 class   Main   { \n   static   void   f ()   throws   Exception   { \n     try   { \n       throw   new   ArrayIndexOutOfBoundsException (); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught exception in f\" ); \n     }   catch   ( ArrayIndexOutOfBoundsException   e )   { \n       System . out . println ( \"Caught AIOOB exception in f\" ); \n     } \n   } \n\n   public   static   void   main ( String []   args )   { \n     try   { \n       System . out . println ( \"Before f\" ); \n       f (); \n       System . out . println ( \"After f\" ); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught in main\" ); \n     } \n   }  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 class   Main   { \n   static   void   f ()   throws   Exception   { \n     try   { \n       throw   new   ArrayIndexOutOfBoundsException (); \n     }   catch   ( ArrayIndexOutOfBoundsException   e )   { \n       System . out . println ( \"Caught AIOOB exception in f\" ); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught exception in f\" ); \n     } \n   } \n\n   public   static   void   main ( String []   args )   { \n     try   { \n       System . out . println ( \"Before f\" ); \n       f (); \n       System . out . println ( \"After f\" ); \n     }   catch   ( Exception   e )   { \n       System . out . println ( \"Caught in main\" ); \n     } \n   }  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 List < Integer >   list   =   new   ArrayList <>();  int   one   =   1 ;  Integer   two   =   2 ;  list . add ( one );  list . add ( two );  list . add ( 3 );  for   ( Integer   num   :   list )   { \n   System . out . println ( num );  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 List < Integer >   list   =   new   ArrayList <>();  int   one   =   1 ;  Integer   two   =   2 ;  list . add ( one );  list . add ( two );  list . add ( 3 );  for   ( int   num   :   list )   { \n   System . out . println ( num );  }      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5 List < Integer >   list   =   Arrays . asList ( 1 ,   2 ,   3 );  for   ( Double   num   :   list )   { \n   System . out . println ( num );  }      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5 List < Integer >   list   =   Arrays . asList ( 1 ,   2 ,   3 );  for   ( double   num   :   list )   { \n   System . out . println ( num );  }      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5 double   d   =   5 ;  int   i   =   2.5 ;  System . out . println ( d );  System . out . println ( i );      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5 double   d   =   ( int )   5 ;  int   i   =   ( double )   2.5 ;  System . out . println ( d );  System . out . println ( i );      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5 double   d   =   ( int )   5.5 ;  int   i   =   ( int )   2.5 ;  System . out . println ( d );  System . out . println ( i );      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5 Double   d   =   5 ;  Integer   i   =   2.5 ;  System . out . println ( d );  System . out . println ( i );      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5 Double   d   =   ( double )   5 ;  Integer   i   =   ( int )   2.5 ;  System . out . println ( d );  System . out . println ( i );      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5 double   d   =   ( Integer )   5 ;  int   i   =   ( Integer )   2 ;  System . out . println ( d );  System . out . println ( i );      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5 double   d   =   ( Double )   5 ;  int   i   =   ( Integer )   2 ;  System . out . println ( d );  System . out . println ( i );      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 List < Integer >   list   =   new   LinkedList <>();  list . add ( 5 );  list . add ( 4 );  list . add ( 3 );  list . add ( 2 );  list . add ( 1 );  Iterator < Integer >   it   =   list . iterator ();  while   ( it . hasNext ())   { \n   System . out . println ( it . next ());  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ArrayList < Integer >   list   =   new   ArrayList <>();  list . add ( 5 );  list . add ( 4 );  list . add ( 3 );  list . add ( 2 );  list . add ( 1 );  Collections . sort ( list );  for   ( int   i   :   list )   { \n   System . out . println ( i );  }      Will the following code compile? If so, what will be printed?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 List < Integer >   list   =   Arrays . asList ( 1 ,   2 ,   4 ,   4 ,   5 );  Collections . sort ( list ,   new   Comparator <>()   { \n   @Override \n   public   int   compare ( Integer   i1 ,   Integer   i2 )   { \n     return   - i1 . compareTo ( i2 ); \n   }  });  list . forEach ( System . out :: println );      Will the following code compile? If so, what will be printed?  1\n2\n3 Set < Integer >   set   =   new   HashSet <>( Arrays . asList ( 5 ,   2 ,   4 ,   1 ,   4 ,   2 ));  set . forEach ( System . out :: println );      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5\n6\n7\n8 Map < Integer ,   String >   map   =   new   HashMap <>();  map . put ( 2 ,   \"world\" );  map . put ( 2 ,   \"cs2030\" );  map . put ( 1 ,   \"hello\" );  for   ( Map . Entry < Integer ,   String >   entry   :   map . entrySet ())   { \n   System . out . println ( entry . getKey ()   +   \": \"   +   entry . getValue ());  }      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5\n6 Map < Integer ,   String >   map   =   new   HashMap <>();  map . put ( 1 ,   \"bell\" );  map . put ( 2 ,   \"curve\" );  map . put ( 9001 ,   \"god\" );  map . forEach (( k ,   v )   ->   System . out . println ( k   +   \": \"   +   v ));      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5\n6 Map < Integer ,   String >   map   =   new   HashMap <>();  map . put ( 2 ,   \"bell\" );  map . put ( 1 ,   \"curve\" );  map . put ( 9001 ,   \"god\" );  map . forEach (( k ,   v )   ->   System . out . println ( k   +   \": \"   +   v ));      Will the following code compile? If so, what will be printed?  1\n2\n3\n4\n5\n6 Map < Integer ,   String >   map   =   new   HashMap <>();  map . put ( 10 ,   \"bell\" );  map . put ( 1 ,   \"curve\" );  map . put ( 9001 ,   \"god\" );  map . forEach (( k ,   v )   ->   System . out . println ( k   +   \": \"   +   v ));",
            "title": "Review Questions"
        },
        {
            "location": "/style/index.html",
            "text": "CS2030 Java Style Guide\n\n\nWhy Coding Style is Important\n\n\nOne of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to enforce a consistent coding style.\n\n\nIf everyone on the team follows the same style, the intend of the programmer can become clear (e.g., is this a class or a field?), the code is more readable and less bug prone (e.g., the \nApple \ngoto fail\n bug\n).  Empirical studies support this:\n\n\n\n\nQuote\n\n\n\"It is not merely a matter of aesthetics that programs should be written in a particular style. Rather there is a psychological basis for writing programs in a conventional manner: programmers have strong expectations that other programmers will follow these discourse rules. If the rules are violated, then the utility afforded by the expectations that programmers have built up over time is effectively nullified. The results from the experiments with novice and advanced student programmers and with professional programmers described in this paper provide clear support for these claims.\"\n\n\nElliot Soloway and Kate Ehrlich. \"Empirical studies of programming knowledge.\" IEEE Transactions on Software Engineering 5 (1984): 595-609.\n\n\n\n\nMany major companies enforce coding styles, and some have published them.  For CS2030, we base our (simplified) coding style on \nGoogle's Java Coding Style\n.  You should bookmark the link because you need to come back to it again and again.\n\n\nCS2030 Coding Style\n\n\n\n\n\n\nNo tab\n    Use only whitespace.  \n\n\nFor \nvim\n users, you can add the following line in your \n~/.vimrc\n file:\n\n1\nset expandtab\n\n\n\n\nSo that when you press \n it is expanded to whitespace.\n\n\nMost other source code editors have similar configuration.  \n\n\n\n\n\n\nExactly one blank line after import statements and exactly one top-level (i.e., non-nested) class.\n\n\n\n\n\n\nEach top-level class resides in a source file of its own.\n\n\n\n\n\n\nWhen a class has overladed methods (e.g., multiple constructors or methods of the same name), they appear sequentially with no other code in between.\n\n\n\n\n\n\nBraces are always used (even if the body is empty or contains a single statement}\n\n\n\n\n\n\nUse \"Egyptian brackets\": \n\n\n\n\nOpening brace have no line break before; but has line break after\n\n\nClosing brace has a line break before; and has a line break after (except when there is \nelse\n or comma following a closing brace.\n\n\n\n\nExample:\n\n1\n2\n3\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n\n     \nx\n++;\n\n   \n}\n \n\n\n\n\n\nis good.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n \nx\n++;\n \n}\n\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n   \n{\n\n     \nx\n++;\n\n   \n}\n\n   \nif\n \n(\nx\n \n==\n \n0\n)\n \n   \n{\n\n     \nx\n++;\n \n}\n\n\n\n\n\n\n\nare not good.\n\n\n\n\n\n\nBlock indentation is exactly two spaces.\n\n\n1\n2\n3\n4\n5\n6\nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n \n  \nx\n++;\n\n  \nfor\n \n(\ni\n \n=\n \n0\n;\n \ni\n \n<\n \nx\n;\n \ni\n++)\n \n{\n\n    \nx\n \n+=\n \ni\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nFor \nvim\n users, in \n~/.vimrc\n, add the following:\n\n1\n2\n3\n4\nset tabstop=2\nset shiftwidth=2\nset autoindent\nset smartindent\n\n\n\n\n\nTo help you with indentation.\n\n\nMost other source code editors have similar configuration.  \n\n\n\n\n\n\nEach statement is followed by a line break, no matter how short the statement is.\n\n\n1\n  \nx\n++;\n \ni\n++;\n\n\n\n\n\nis bad.\n\n1\n2\n  \nx\n++;\n \n  \ni\n++;\n\n\n\n\n\nis good.\n\n\n\n\n\n\nEach line is limited to 80 characters in length.  You can break a long\nline into multiple lines to enhance readability, this is called \nline wrapping\n.  When you do so, each continuation line is indented at least 4 spaces from the original line.\n\n\n1\nSystem\n.\nout\n.\nprintln\n(\n\"Daenerys of the House Targaryen, the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains and Mother of Dragon\"\n);\n\n\n\n\n\n\n\nis bad.\n\n\n1\n2\n3\n4\n5\nSystem\n.\nout\n.\nprintln\n(\n\"Daenerys of the House Targaryen, the First of\"\n \n+\n\n\n\" Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the\"\n \n+\n\n\n\" First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, P\"\n \n+\n\n\n\"rotector of the Realm, Lady Regnant of the Seven Kingdoms, Break\"\n \n+\n\n\n\"er of Chains and Mother of Dragon\"\n);\n\n\n\n\n\n\n\nis also bad.\n\n\n1\n2\n3\n4\n5\n6\nSystem\n.\nout\n.\nprintln\n(\n\"Daenerys of the House Targaryen,\"\n \n+\n \n    \n\"the First of Her Name, The Unburnt, Queen of the Andals,\"\n \n+\n\n    \n\"the Rhoynar and the First Men, Queen of Meereen,\"\n \n+\n\n    \n\"Khaleesi of the Great Grass Sea, Protector of the Realm,\"\n \n+\n\n    \n\"Lady Regnant of the Seven Kingdoms, Breaker of Chains and\"\n \n+\n\n    \n\"Mother of Dragon\"\n);\n\n\n\n\n\nis ok.\n\n\n\n\n\n\nThere should be a blank line between constructors, methods, nested classes and static initializers.  Blank lines can be used between fields to create logical groupings.\n\n\n\n\n\n\nWhite space should separate Java keywords from parenthesis and braces, and be added on both sides of binary operators (\n+\n, \n-\n, \n/\n, etc) as well as \n:\n in enhanced for.  Space should also appears before and after \n//\n comments\n\n\n1\n2\n3\n4\n5\n6\nif\n(\nx\n==\n0\n){\n \n  \nx\n++;\n//to make sure x is at least one.\n\n  \nfor\n(\ni\n=\n0\n;\ni\n<\nx\n;\ni\n++){\n\n    \nx\n+=\ni\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nis bad.\n\n\n1\n2\n3\n4\n5\n6\nif\n \n(\nx\n \n==\n \n0\n)\n \n{\n \n  \nx\n++;\n \n// to make sure x is at least one.\n\n  \nfor\n \n(\ni\n \n=\n \n0\n;\n \ni\n \n<\n \nx\n;\n \ni\n++)\n \n{\n\n    \nx\n \n+=\n \ni\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nis good.\n\n\n\n\n\n\nOne variable per declaration.  \n\n\n1\nint\n \nx\n,\n \ny\n;\n\n\n\n\n\n\n\nbad.\n\n\n1\n2\nint\n \nx\n;\n\n\nint\n \ny\n;\n\n\n\n\n\n\n\ngood!\n\n\n\n\n\n\nNo C-style array declaration\n\n\n1\nString\n \nargs\n[];\n\n\n\n\n\n\n\nnot good.\n\n\n1\nString\n[]\n \nargs\n;\n\n\n\n\n\n\n\ngood!\n\n\n\n\n\n\nSwitch statement always include a \ndefault\n case.\n\n\n\n\n\n\nOne annotation per line.  Always use \n@Override\n.\n\n\n1\n2\n3\n4\n@Override\n\n\npublic\n \nboolean\n \nequals\n(\nObject\n \no\n)\n \n{\n\n  \n:\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nIndent comments at the same level as the surrounding code.  For multiple comments, align \n*\n with the previous line.\n\n\n1\n2\n3\n4\n5\n6\n/*\n\n\n* Not a good style\n\n\n*/\n\n\n/*\n\n\n * Good style\n\n\n */\n\n\n\n\n\n\n\n\n\n\n\nClass modifier appears in the following order:\n\n\n1\npublic\n \nprotected\n \nprivate\n \nabstract\n \ndefault\n \nstatic\n \nfinal\n \ntransient\n \nvolatile\n \nsynchronized\n \nnative\n \nstrictfp\n\n\n\n\n\n\n\nExample:\n\n1\nstatic\n \npublic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n\n\n\n\n\nis bad.\n\n1\npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n\n\n\n\n\nis good!\n\n\n\n\n\n\nClass names are writte in UpperCamelCase, method names and field names in lowerCamelCase, constant names in ALL_CAPS_SNAKE_CASE.  Type parameters in single capital letter.\n\n\n\n\n\n\nCaught exceptions should not be ignored.\n\n\n\n\n\n\nStatic fields and methods must be accessed with class name.",
            "title": "Coding Style"
        },
        {
            "location": "/style/index.html#cs2030-java-style-guide",
            "text": "",
            "title": "CS2030 Java Style Guide"
        },
        {
            "location": "/style/index.html#why-coding-style-is-important",
            "text": "One of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to enforce a consistent coding style.  If everyone on the team follows the same style, the intend of the programmer can become clear (e.g., is this a class or a field?), the code is more readable and less bug prone (e.g., the  Apple  goto fail  bug ).  Empirical studies support this:   Quote  \"It is not merely a matter of aesthetics that programs should be written in a particular style. Rather there is a psychological basis for writing programs in a conventional manner: programmers have strong expectations that other programmers will follow these discourse rules. If the rules are violated, then the utility afforded by the expectations that programmers have built up over time is effectively nullified. The results from the experiments with novice and advanced student programmers and with professional programmers described in this paper provide clear support for these claims.\"  Elliot Soloway and Kate Ehrlich. \"Empirical studies of programming knowledge.\" IEEE Transactions on Software Engineering 5 (1984): 595-609.   Many major companies enforce coding styles, and some have published them.  For CS2030, we base our (simplified) coding style on  Google's Java Coding Style .  You should bookmark the link because you need to come back to it again and again.",
            "title": "Why Coding Style is Important"
        },
        {
            "location": "/style/index.html#cs2030-coding-style",
            "text": "No tab\n    Use only whitespace.    For  vim  users, you can add the following line in your  ~/.vimrc  file: 1 set expandtab  \nSo that when you press   it is expanded to whitespace.  Most other source code editors have similar configuration.      Exactly one blank line after import statements and exactly one top-level (i.e., non-nested) class.    Each top-level class resides in a source file of its own.    When a class has overladed methods (e.g., multiple constructors or methods of the same name), they appear sequentially with no other code in between.    Braces are always used (even if the body is empty or contains a single statement}    Use \"Egyptian brackets\":    Opening brace have no line break before; but has line break after  Closing brace has a line break before; and has a line break after (except when there is  else  or comma following a closing brace.   Example: 1\n2\n3     if   ( x   ==   0 )   { \n      x ++; \n    }     is good.  1\n2\n3\n4\n5\n6\n7\n8     if   ( x   ==   0 )   {   x ++;   } \n    if   ( x   ==   0 )  \n    { \n      x ++; \n    } \n    if   ( x   ==   0 )  \n    { \n      x ++;   }    are not good.    Block indentation is exactly two spaces.  1\n2\n3\n4\n5\n6 if   ( x   ==   0 )   {  \n   x ++; \n   for   ( i   =   0 ;   i   <   x ;   i ++)   { \n     x   +=   i ; \n   }  }    For  vim  users, in  ~/.vimrc , add the following: 1\n2\n3\n4 set tabstop=2\nset shiftwidth=2\nset autoindent\nset smartindent   To help you with indentation.  Most other source code editors have similar configuration.      Each statement is followed by a line break, no matter how short the statement is.  1    x ++;   i ++;   \nis bad. 1\n2    x ++;  \n   i ++;   \nis good.    Each line is limited to 80 characters in length.  You can break a long\nline into multiple lines to enhance readability, this is called  line wrapping .  When you do so, each continuation line is indented at least 4 spaces from the original line.  1 System . out . println ( \"Daenerys of the House Targaryen, the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains and Mother of Dragon\" );    is bad.  1\n2\n3\n4\n5 System . out . println ( \"Daenerys of the House Targaryen, the First of\"   +  \" Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the\"   +  \" First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, P\"   +  \"rotector of the Realm, Lady Regnant of the Seven Kingdoms, Break\"   +  \"er of Chains and Mother of Dragon\" );    is also bad.  1\n2\n3\n4\n5\n6 System . out . println ( \"Daenerys of the House Targaryen,\"   +  \n     \"the First of Her Name, The Unburnt, Queen of the Andals,\"   + \n     \"the Rhoynar and the First Men, Queen of Meereen,\"   + \n     \"Khaleesi of the Great Grass Sea, Protector of the Realm,\"   + \n     \"Lady Regnant of the Seven Kingdoms, Breaker of Chains and\"   + \n     \"Mother of Dragon\" );   \nis ok.    There should be a blank line between constructors, methods, nested classes and static initializers.  Blank lines can be used between fields to create logical groupings.    White space should separate Java keywords from parenthesis and braces, and be added on both sides of binary operators ( + ,  - ,  / , etc) as well as  :  in enhanced for.  Space should also appears before and after  //  comments  1\n2\n3\n4\n5\n6 if ( x == 0 ){  \n   x ++; //to make sure x is at least one. \n   for ( i = 0 ; i < x ; i ++){ \n     x += i ; \n   }  }    is bad.  1\n2\n3\n4\n5\n6 if   ( x   ==   0 )   {  \n   x ++;   // to make sure x is at least one. \n   for   ( i   =   0 ;   i   <   x ;   i ++)   { \n     x   +=   i ; \n   }  }    is good.    One variable per declaration.    1 int   x ,   y ;    bad.  1\n2 int   x ;  int   y ;    good!    No C-style array declaration  1 String   args [];    not good.  1 String []   args ;    good!    Switch statement always include a  default  case.    One annotation per line.  Always use  @Override .  1\n2\n3\n4 @Override  public   boolean   equals ( Object   o )   { \n   :  }      Indent comments at the same level as the surrounding code.  For multiple comments, align  *  with the previous line.  1\n2\n3\n4\n5\n6 /*  * Not a good style  */  /*   * Good style   */      Class modifier appears in the following order:  1 public   protected   private   abstract   default   static   final   transient   volatile   synchronized   native   strictfp    Example: 1 static   public   void   main ( String []   args )   \nis bad. 1 public   static   void   main ( String []   args )   \nis good!    Class names are writte in UpperCamelCase, method names and field names in lowerCamelCase, constant names in ALL_CAPS_SNAKE_CASE.  Type parameters in single capital letter.    Caught exceptions should not be ignored.    Static fields and methods must be accessed with class name.",
            "title": "CS2030 Coding Style"
        },
        {
            "location": "/midterm/index.html",
            "text": "Midterm\n\n\nQuestions and Solutions\n\n\nHere is \na copy of the question paper with annotated solutions\n\n\nMark Distribution\n\n\n\n\nMidterm Info Sheet\n\n\nImportant Information\n\n\n\n\nDate: October 2, 2017\n\n\nTime: 1000 - 1120\n\n\nVenue: LT19\n\n\n\n\nPlease arrive at least 5 minutes earlier and wait outside LT19 besides the canteen.\n\n\nScope\n\n\n\n\nEverything taught during Week 1 - Week 6\n\n\nLab 1 - Lab 3\n\n\n\n\nOpen Book\n\n\nThis is an open book midterm.  You can bring in books and notes.  They can be printed or hand written.  No digital materials (laptop, tablet, etc.).  Any Java API needed will be provided to you.\n\n\nOffice Hours\n\n\nKenneth and I will be holding special office hours before the midterm:\n\n\n\n\n\n\n\n\nWho\n\n\nDate\n\n\nTime\n\n\nVenue\n\n\n\n\n\n\n\n\n\n\n\n\nWei Tsang\n\n\nSep 28 (Thu)\n\n\n2-5pm\n\n\nAS6 #05-14\n\n\n\n\n\n\n\n\nKenneth\n\n\nSep 29 (Fri)\n\n\n2-5pm\n\n\nDR6 (COM2 #02-12)",
            "title": "Midterm"
        },
        {
            "location": "/midterm/index.html#midterm",
            "text": "",
            "title": "Midterm"
        },
        {
            "location": "/midterm/index.html#questions-and-solutions",
            "text": "Here is  a copy of the question paper with annotated solutions",
            "title": "Questions and Solutions"
        },
        {
            "location": "/midterm/index.html#mark-distribution",
            "text": "",
            "title": "Mark Distribution"
        },
        {
            "location": "/midterm/index.html#midterm-info-sheet",
            "text": "",
            "title": "Midterm Info Sheet"
        },
        {
            "location": "/midterm/index.html#important-information",
            "text": "Date: October 2, 2017  Time: 1000 - 1120  Venue: LT19   Please arrive at least 5 minutes earlier and wait outside LT19 besides the canteen.",
            "title": "Important Information"
        },
        {
            "location": "/midterm/index.html#scope",
            "text": "Everything taught during Week 1 - Week 6  Lab 1 - Lab 3",
            "title": "Scope"
        },
        {
            "location": "/midterm/index.html#open-book",
            "text": "This is an open book midterm.  You can bring in books and notes.  They can be printed or hand written.  No digital materials (laptop, tablet, etc.).  Any Java API needed will be provided to you.",
            "title": "Open Book"
        },
        {
            "location": "/midterm/index.html#office-hours",
            "text": "Kenneth and I will be holding special office hours before the midterm:     Who  Date  Time  Venue       Wei Tsang  Sep 28 (Thu)  2-5pm  AS6 #05-14     Kenneth  Sep 29 (Fri)  2-5pm  DR6 (COM2 #02-12)",
            "title": "Office Hours"
        },
        {
            "location": "/lec1/index.html",
            "text": "Lecture 1: Abstraction and Encapsulation\n\n\nLearning Objectives\n\n\nAfter this lecture, students should:\n\n\n\n\nrecap some fundamental programming concepts, including the execution model of a program, abstractions over code and data, primitive and composite data types.\n\n\nappreciate the importance of maintaining abstraction barrier in software development\n\n\nunderstand the differences between statically and dynamically typed languages\n\n\nunderstand the concepts of object-oriented programming, including encapsulation, data hiding, fields and methods, constructors, mutators/accessors, classes and objects, and their purposes of introducing them as a method of programming.\n\n\nknow the purpose and usage of Java keywords \nclass\n, \npublic\n, \nprivate\n, \nfinal\n, \nstatic\n, \nimport\n, \nnew\n\n\nbe able to build a mental model for how an object is represented in Java\n\n\n\n\nWhat Exactly is a \nProgram\n?\n\n\nA program is a set of instructions we issue to computers to manipulate data.  A programming language is a formal language that helps programmers specify precisely what are the instructions we issue to computers, using code that are often made up of keywords, symbols, and names.  Computers execute the instructions in their \nprocessing units\n, and store the instructions and data in their \nmemory\n1\n.  The processing units recognizes the instructions based on the specific patterns of bits and manipulate data as a sequence of bits.  A programming language, however, is written at a higher level of \nabstraction\n (i.e., at a higher conceptual level), so that as a programmer, we only need to write a few lines of code to give complex instructions to the computer.  A \ncompiler\n or \ninterpreter\n is responsible for translating these programs written in high level language to \nassembly code\n or \nmachine code\n, i.e., bit patterns that the processing units can understand.\n\n\nThere are thousands of programming languages in existence.  \nC\n is one of the languages that is a \nlow-level language\n -- i.e., it provides very thin layer of abstractions on top of machine code.  On the other hand, languages such as \nPython\n and \nJavaScript\n are high-level languages.  As an example, in C, you can directly manage memory allocation.  In JavaScript and Python, you cannot.\n\n\nAbstraction: Variable and Type\n\n\nOne of the important abstractions that is provided by a programming language is \nvariable\n.  Data are stored in some location in the computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like \n0xFA49130E\n is not user-friendly; Second, the location may change.  A \nvariable\n is an abstraction that allows us to give a user friendly name to memory location.  We use the \nvariable name\n whenever we want to access the \nvalue\n in that location, and \npointer to the variable\n or \nreference to the variable\n whenever we want to refer to the address of the location.\n\n\nLet's think a bit more about how sequence of bits is abstracted as data in a programming language.  At the machine level, these bits are just, well, bits.  We give the bits a \nsemantic\n at the program level, e.g., we want to interpret the sequence of bits as numbers, letters, etc.  E.g., the number (integer, to be exact) \n65\n and the letter \nA\n all share the same sequence of bits \n0100 00011\n but are interpreted differently and possibly manipulated differently.  \n\n\nThe \ntype\n of a variable tells the compiler how to interpret the variable and how to manipulate the variable.  \n\n\nFor instance, supposed that in Python, if you have two variables \nx\n and \ny\n storing the values \n4\n and \n5\n respectively, if you \nprint x + y\n, you may get \n45\n if \nx\n and \ny\n are strings, or you may get \n9\n if \nx\n and \ny\n are integers, or you may get an error if \n4\n is an integer and \n5\n is a string.  \n\n\nIn the last instance above, you see that assigning types of variables helps to keep the program meaningful, as the operation \n+\n is not defined over an integer and a string in Python\n2\n.\n\n\nPython is a \ndynamically typed\n language.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the \nvalues\n, and the type of the variable changes depending on the value it holds.\n\n\nC, on the other hand, is a \nstatically typed\n language.  We need to \ndeclare\n every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type \nint\n.  We check if the right type is used during the compilation of the program.\n\n\n1\n2\nint\n \nx\n \n=\n \n4\n;\n \n// ok\n\n\nint\n \ny\n \n=\n \n\"5\"\n;\n \n// error\n\n\n\n\n\n\n\nBy annotating each variable with its type, the C compiler also knows how much memory space is needed to store a variable.  \n\n\nAbstraction: Functions\n\n\nAnother important abstraction provided by a programming language is \nfunction\n (or \nprocedure\n).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.   \n\n\nLike all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.\n\n\nDefining functions allow us to abstract away the implementation details from the caller.  Once a function is defined, we can change the way the function is implemented without affecting the code that calls the function, as long as the semantic and the \ninterface\n of the function remains the same.\n\n\nFunctions therefore is a critical mechanism for achieving \nseparation of concerns\n in a program.  We separate the concerns about how a particular function is implemented, from the concerns about how the function is used to perform a higher-level task.\n\n\nDefining functions also allow us to \nreuse\n code.  We do not have to repeatedly write the same chunk of code if we group the sequence of code into a function -- then we just need to call the function to invoke this sequence of code every time we need it.  If this chunk of code is properly written and debugged, then we can be pretty sure that everywhere the function is invoked, the code is correct\n3\n.\n\n\nC is a \nprocedural language\n.  A C program consists of functions, with the \nmain()\n function serves as the entry point to the program.  Since C is a statically type language, a C function has a return type, and each  function parameter (or \nargument\n) has a type as well.  (Note that this statement does not mean that C function must return a \nvalue\n.  If the function does not return a value, we define its return type as \nvoid\n.)\n\n\nRecall that the bits representing the instructions are also stored in the computer memory in a separate area from the data.  The group of instructions that belongs to the same function are stored together.  Just like we can refer to a variable using its memory address using its \nreference\n (or \npointer\n), we can refer to a function using the memory address of the entry point to the function.\n\n\nAbstraction: Composite Data type\n\n\nJust like functions allow programmers to group instructions, give it a name, and refer to it later, a \ncomposite data type\n allow programers to group \nprimitive types\n together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or everyday objects such as a person, a product, etc.\n\n\nDefining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.\n\n\nFor instance, a circle on a 2D plane can be represented by the center (\nx\n, \ny\n) and its radius \nr\n, or it can be represented by the top left corner (\nx\n,\ny\n) and the width \nw\n of the bounding square.\n\n\nIn C, we build composite data type with \nstruct\n.  For example,\n\n\n1\n2\n3\n4\nstruct\n \ncircle\n \n{\n\n  \nfloat\n \nx\n,\n \ny\n;\n \n// (x,y) coordinate of the center.\n\n  \nfloat\n \nr\n;\n \n// radius\n\n\n}\n\n\n\n\n\n\n\nOnce we have the \nstruct\n defined, we are not completely shielded from its representation, until we write a set of functions that operates on the \ncircle\n composite type.  For instance,\n\n\n1\n2\n3\nfloat\n \ncircle_area\n(\ncircle\n \nc\n)\n \n{\n \n...\n \n};\n\n\nbool\n  \ncircle_contains_point\n(\ncircle\n \nc\n,\n \npoint\n \np\n)\n \n{\n \n...\n \n};\n\n  \n:\n\n\n\n\n\n\n\nImplementation of these functions obvious requires knowledge of how a circle is represented.  Once the set of functions that operates on and manipulate circles are available, we can use \ncircle\n type without worrying about the internal representation.  \n\n\nIf we decided to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.\n\n\nWe can imagine an \nabstraction barrier\n between the code that uses a composite data type along with its associated set of functions, and the code that define the data type along with the implementation of the functions.  Above the barrier, the concern is about using the composite data type to do useful things, while below the barrier, the concern is about how to represent and manipulate the composite data type.\n\n\nAbstraction: Class and Object (or, Encapsulation)\n\n\nWe can further bundle the composite data type and its associated functions together in another abstraction, called a \nclass\n.  A class is a data type with a group of functions associated with it.  We call the functions as \nmethods\n and the data in the class as \nfields\n (or \nmembers\n, or \nstates\n, or \nattributes\n4\n).   A well-designed class maintain the abstraction barrier, properly wrapped the barrier around the internal representation and implementation, and exposes just the right interface for others to use.\n\n\nJust like we can create variables of a given type, we can create \nobjects\n of a given class.  Objects are instances of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.\n\n\nRecall that programs written in a procedural language such as a C consists of functions, with a \nmain()\n function as the entry point.  A program written in an \nobject-oriented language\n such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.\n\n\nOne could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has a certain behavior and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used everyday (unless we try to repair it)\n5\n.  \n\n\nThis concept, of keeping the all the data and functions operating on the data related to a composite data type together within an abstraction barrier, is called \nencapsulation\n.\n\n\nBreaking the Abstraction Barrier\n\n\nIn the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.  \n\n\nConsider the case of implementing \ncircle\n as a C \nstruct\n.  Suppose someone wants to move the center of the circle \nc\n to a new position (\nx\n, \ny\n), instead of implementing a function \ncircle_move_to(c, x, y)\n (which would still keep the representation used under the barrier), the person wrote:\n\n\n1\n2\nc\n.\nx\n \n=\n \nx\n;\n\n\nc\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\n\n\nThis code would still be correct, but the abstraction barrier is broken since we now make explicit assumption that there are two variables \nx\n and \ny\n inside the \ncircle\n data type that correspond to the center of the circle.  If one day, we want to represent a circle in a different way, then we have to carefully change all the code that read and write these variables \nx\n and \ny\n and update them.\n\n\n\n\nBreaking Python's Abstraction Barrier\n\n\nPython tries to prevent \naccidental\n access to internal representation by having a convention of prefixing the internal variables with \n_\n (one underscore) or \n__\n (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug / error that will surface later.\n\n\n\n\nData Hiding\n\n\nMany OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, support \nprivate\n and \npublic\n access modifiers\n5\n.  A field or a method that is declared as \nprivate\n cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a \npublic\n field or method can be accessed, modified, or invoked from outside the class.\n\n\nSuch mechanism to protect the abstraction barrier from being broken is called \ndata hiding\n or \ninformation hiding\n.  This protection is enforced in the \ncompiler\n during compile time.\n\n\nExample: The Circle class\n\n\nLet's put together the concepts of encapsulation, data hiding to define a \nCircle\n class in Java:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n/**\n\n\n * A Circle object encapsulates a circle on a 2D plane.  \n\n\n */\n\n\nclass\n \nCircle\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n  \n// x-coordinate of the center\n\n  \nprivate\n \ndouble\n \ny\n;\n  \n// y-coordinate of the center\n\n  \nprivate\n \ndouble\n \nr\n;\n  \n// the length of the radius\n\n\n  \n/**\n\n\n   * Return the area of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \n3.1415926\n*\nr\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Move the center of the circle to the new position (newX, newY)\n\n\n   */\n\n  \npublic\n \nvoid\n \nmoveTo\n(\ndouble\n \nnewX\n,\n \ndouble\n \nnewY\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n    \ny\n \n=\n \nnewY\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nThe class above is still missing many essential components, and not a complete program.\n\n\nConstructors, Accessors, and Mutators\n\n\nWith data hiding, we completely isolate the internals representation of a class using an abstraction barrier.  With no way for the user of the class to modify the fields directly, it is common for a class to provide methods to initialize and modify these internal fields (such as the \nmoveTo()\n method above).  A method that initializes an object is called a \nconstructor\n, and a method that retrieves or modifies the properties of the object is called the \naccessor\n (or \ngetter\n) or \nmutator\n (or \nsetter\n).\n\n\nA constructor method is a special method within the class.  It cannot be called directly, but is invoked automatically when an object is instantiated.   In Java, a constructor method has the same name as the class and has no return type.  A constructor can take in arguments just like other functions.  The class \nCircle\n can have a constructor such as the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nCircle\n \n{\n\n    \n:\n\n  \n/**\n\n\n   * Create a circle centered on (centerX, centerY) with given radius\n\n\n  */\n\n  \npublic\n \nCircle\n(\ndouble\n \ncenterX\n,\n \ndouble\n \ncenterY\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nx\n \n=\n \ncenterX\n;\n\n    \ny\n \n=\n \ncenterY\n;\n\n    \nr\n \n=\n \nradius\n;\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are actually exposing the internal representation, therefore breaking the encapsulation.  For instance:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\nclass\n \nCircle\n \n{\n\n    \n:\n\n\n  \npublic\n \ndouble\n \ngetX\n()\n \n{\n\n    \nreturn\n \nx\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetX\n(\ndouble\n \nnewX\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n  \n}\n\n\n  \npublic\n \ndouble\n \ngetY\n()\n \n{\n\n    \nreturn\n \ny\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetY\n(\ndouble\n \nnewY\n)\n \n{\n\n    \ny\n \n=\n \nnewY\n:\n\n  \n}\n\n\n  \npublic\n \ndouble\n \ngetR\n()\n \n{\n\n    \nreturn\n \nr\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetR\n(\ndouble\n \nnewR\n)\n \n{\n\n    \nr\n \n=\n \nnewR\n;\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe examples above are pretty pointless.  If we need to know the internal and do something with it, we are doing it wrong.  The right approach is to implement a method within the class that do whatever we want the class to do.   For instance, suppose that we want to know the circumference of the circle, one approach would be:\n\n\n1\n   \ndouble\n \ncircumference\n \n=\n \n2\n*\nc\n.\ngetR\n()*\n3.1415926\n;\n\n\n\n\n\n\n\nwhere c is a \nCircle\n object.\n\n\nA better approach would be to add a new method \ngetCircumference()\n in the \nCircle\n class, and call this instead:\n\n1\n   \ndouble\n \ncircumference\n \n=\n \nc\n.\ngetCircumference\n();\n\n\n\n\n\n\nThe better approach involves writing more lines of code, but it keeps the encapsulation in tact.\n\n\n\n\nConstructor in Python and JavaScript\n\n\nIn Python, the constructor is the \n__init__\n method.   In JavaScript, the constructor is simply called \nconstructor\n.\n\n\n\n\nClass Fields and Methods\n\n\nLet's look at the implementation of \ngetArea()\n above.  We use the constant \n\\(\\pi\\)\n but hardcoded it as 3.1415926.  Hardcoding such a magic number is a \nno no\n in terms of coding style.  This constant can appear in more than one places, and if we hardcode such a number, and want to change the precision of it later, we would need to trace down and change every occurrence.  Not only this introduces more work, but likely to introduce bugs.  \n\n\nIn C, we define it as a macro constant \nM_PI\n.  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other feel a bit constraining.  The constant \n\\(\\pi\\)\n is universal, and not really belong to any object (the value of Pi is the same for every circle!).  If we start to define a method \nsqrt()\n that computes the square root of a given number, this is a general function that is not associated with any object as well.\n\n\nA solution to this is to associate these global values and functions with a \nclass\n instead of with an \nobject\n.  For instance. Java predefines a \nMath\n class\n6\n that is populated with constants \nPI\n and \nE\n (for Euler's number \n\\(e\\)\n), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the \nstatic\n keyword.  We can additionally add a keyword \nfinal\n to indicate that the value of the field will not change\n7\n.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nMath\n \n{\n\n  \n:\n\n  \npublic\n \nstatic\n \nfinal\n \ndouble\n \nPI\n \n=\n \n3.141592653589793\n;\n\n  \n:\n\n  \n:\n\n\n}\n\n\n\n\n\n\n\nWe call these fields and methods that are associated with a class as \nclass fields\n and \nclass methods\n, and fields and methods that are associated with an object as \ninstance fields\n and \ninstance methods\n.\n\n\n\n\nClass Fields and Methods in Python\n\n\nNote that, in Python, any variable declared within a \nclass\n block is a class field:\n\n1\n2\n3\nclass\n \nCircle\n:\n\n  \nx\n \n=\n \n0\n\n  \ny\n \n=\n \n0\n\n\n\n\n\nIn the above example, \nx\n and \ny\n are class fields, not instance fields.\n\n\n\n\nMemory Model for Objects\n\n\nVariables and functions are stored in the memory of the computers as bits, usually in two separate regions.  Since an object encapsulates both variables and functions, where are they stored?  \n\n\nDifferent implementations might stored the objects differently, but here is one way that we will follow for this class:\n\n\n\n\nIn the figure above, there are two objects of the same class.  An objects is referred to through its references, which is a pointer to memory location where the instance fields for the object is stored, along with a pointer to a \nmethod table\n.  A method table stores a table of pointers to the methods, along with a table to the class fields.    \n\n\nExample: The Circle class\n\n\nNow, let revise our \nCircle\n class to improve the code and make it a little more complete:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nimport\n \njava.lang.Math\n;\n\n\n\n/**\n\n\n * A Circle object encapsulates a circle on a 2D plane.  \n\n\n */\n\n\nclass\n \nCircle\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n  \n// x-coordinate of the center\n\n  \nprivate\n \ndouble\n \ny\n;\n  \n// y-coordinate of the center\n\n  \nprivate\n \ndouble\n \nr\n;\n  \n// the length of the radius\n\n\n  \n/**\n\n\n   * Create a circle centered on (centerX, centerY) with given radius\n\n\n  */\n\n  \npublic\n \nCircle\n(\ndouble\n \ncenterX\n,\n \ndouble\n \ncenterY\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nx\n \n=\n \ncenterX\n;\n\n    \ny\n \n=\n \ncenterY\n;\n\n    \nr\n \n=\n \nradius\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return the area of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n*\nr\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return the circumference of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetCircumference\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n*\n2\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Move the center of the circle to the new position (newX, newY)\n\n\n   */\n\n  \npublic\n \nvoid\n \nmoveTo\n(\ndouble\n \nnewX\n,\n \ndouble\n \nnewY\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n    \ny\n \n=\n \nnewY\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return true if the given point (testX, testY) is within the circle.\n\n\n   */\n\n  \npublic\n \nboolean\n \ncontains\n(\ndouble\n \ntestX\n,\n \ndouble\n \ntestY\n)\n \n{\n\n    \nreturn\n \nfalse\n;\n\n    \n// TODO: left as an exercise  \n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nCreating and Interacting with \nCircle\n objects\n\n\nTo use the \nCircle\n class, we can either:\n\n\n\n\ncreate a \nmain()\n function, compile and link with the \nCircle\n class, and create an executable program, just like we usually do with a C program, OR\n\n\nuse a new bleeding-edge tool called \njshell\n, which is part of Java 9 (to be released September 2017), and its \nread-evaluate-print loop\n (REPL) to help us quickly try out various features of Java.\n\n\n\n\nWe will write a complete Java program with \nmain()\n within two weeks, but for now, we will use \njshell\n to demonstrate the various language features of Java\n7\n.\n\n\nThe demonstration below loads the \nCircle\n class written above (with the \ncontains\n method completed) from a file named \nCircle.java\n8\n, and creates two \nCircle\n objects, \nc1\n and \nc2\n.  We use the \nnew\n keyword to tell Java to create an object of type \nCircle\n here, passing in the center and the radius.\n\n\n\n\n\n\n\n\n\n\n\n\n\nOften, the instructions and data are stored in different regions of the memory.\u00a0\n\u21a9\n\n\n\n\n\n\nJavascript would happily convert \n4\n into a string for you, and return \n45\n.\u00a0\n\u21a9\n\n\n\n\n\n\nassuming the parameters are passed in correctly.\u00a0\n\u21a9\n\n\n\n\n\n\nComputer scientists just can't decide on what to call this!\u00a0\n\u21a9\n\n\n\n\n\n\nOthers include \nprotected\n and the \ndefault\n modifier, but let's not sweat about the details for now.\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nThe class \nMath\n is provided by the package \njava.lang\n in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line \nimport\n \njava.lang.Math\n in the beginning of our program.\u00a0\n\u21a9\n\n\n\n\n\n\nYou can download and install \njshell\n yourself, as part of \nJava Development Kit version 9 (JDK 9)\n\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nWe use the convention of one public class per file, name the file with the exact name of the class (including capitalization), and include the extension \n.java\n to the filename.\u00a0\n\u21a9",
            "title": "1. Abstraction & Encapsulation"
        },
        {
            "location": "/lec1/index.html#lecture-1-abstraction-and-encapsulation",
            "text": "",
            "title": "Lecture 1: Abstraction and Encapsulation"
        },
        {
            "location": "/lec1/index.html#learning-objectives",
            "text": "After this lecture, students should:   recap some fundamental programming concepts, including the execution model of a program, abstractions over code and data, primitive and composite data types.  appreciate the importance of maintaining abstraction barrier in software development  understand the differences between statically and dynamically typed languages  understand the concepts of object-oriented programming, including encapsulation, data hiding, fields and methods, constructors, mutators/accessors, classes and objects, and their purposes of introducing them as a method of programming.  know the purpose and usage of Java keywords  class ,  public ,  private ,  final ,  static ,  import ,  new  be able to build a mental model for how an object is represented in Java",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec1/index.html#what-exactly-is-a-program",
            "text": "A program is a set of instructions we issue to computers to manipulate data.  A programming language is a formal language that helps programmers specify precisely what are the instructions we issue to computers, using code that are often made up of keywords, symbols, and names.  Computers execute the instructions in their  processing units , and store the instructions and data in their  memory 1 .  The processing units recognizes the instructions based on the specific patterns of bits and manipulate data as a sequence of bits.  A programming language, however, is written at a higher level of  abstraction  (i.e., at a higher conceptual level), so that as a programmer, we only need to write a few lines of code to give complex instructions to the computer.  A  compiler  or  interpreter  is responsible for translating these programs written in high level language to  assembly code  or  machine code , i.e., bit patterns that the processing units can understand.  There are thousands of programming languages in existence.   C  is one of the languages that is a  low-level language  -- i.e., it provides very thin layer of abstractions on top of machine code.  On the other hand, languages such as  Python  and  JavaScript  are high-level languages.  As an example, in C, you can directly manage memory allocation.  In JavaScript and Python, you cannot.",
            "title": "What Exactly is a Program?"
        },
        {
            "location": "/lec1/index.html#abstraction-variable-and-type",
            "text": "One of the important abstractions that is provided by a programming language is  variable .  Data are stored in some location in the computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like  0xFA49130E  is not user-friendly; Second, the location may change.  A  variable  is an abstraction that allows us to give a user friendly name to memory location.  We use the  variable name  whenever we want to access the  value  in that location, and  pointer to the variable  or  reference to the variable  whenever we want to refer to the address of the location.  Let's think a bit more about how sequence of bits is abstracted as data in a programming language.  At the machine level, these bits are just, well, bits.  We give the bits a  semantic  at the program level, e.g., we want to interpret the sequence of bits as numbers, letters, etc.  E.g., the number (integer, to be exact)  65  and the letter  A  all share the same sequence of bits  0100 00011  but are interpreted differently and possibly manipulated differently.    The  type  of a variable tells the compiler how to interpret the variable and how to manipulate the variable.    For instance, supposed that in Python, if you have two variables  x  and  y  storing the values  4  and  5  respectively, if you  print x + y , you may get  45  if  x  and  y  are strings, or you may get  9  if  x  and  y  are integers, or you may get an error if  4  is an integer and  5  is a string.    In the last instance above, you see that assigning types of variables helps to keep the program meaningful, as the operation  +  is not defined over an integer and a string in Python 2 .  Python is a  dynamically typed  language.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the  values , and the type of the variable changes depending on the value it holds.  C, on the other hand, is a  statically typed  language.  We need to  declare  every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type  int .  We check if the right type is used during the compilation of the program.  1\n2 int   x   =   4 ;   // ok  int   y   =   \"5\" ;   // error    By annotating each variable with its type, the C compiler also knows how much memory space is needed to store a variable.",
            "title": "Abstraction: Variable and Type"
        },
        {
            "location": "/lec1/index.html#abstraction-functions",
            "text": "Another important abstraction provided by a programming language is  function  (or  procedure ).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.     Like all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.  Defining functions allow us to abstract away the implementation details from the caller.  Once a function is defined, we can change the way the function is implemented without affecting the code that calls the function, as long as the semantic and the  interface  of the function remains the same.  Functions therefore is a critical mechanism for achieving  separation of concerns  in a program.  We separate the concerns about how a particular function is implemented, from the concerns about how the function is used to perform a higher-level task.  Defining functions also allow us to  reuse  code.  We do not have to repeatedly write the same chunk of code if we group the sequence of code into a function -- then we just need to call the function to invoke this sequence of code every time we need it.  If this chunk of code is properly written and debugged, then we can be pretty sure that everywhere the function is invoked, the code is correct 3 .  C is a  procedural language .  A C program consists of functions, with the  main()  function serves as the entry point to the program.  Since C is a statically type language, a C function has a return type, and each  function parameter (or  argument ) has a type as well.  (Note that this statement does not mean that C function must return a  value .  If the function does not return a value, we define its return type as  void .)  Recall that the bits representing the instructions are also stored in the computer memory in a separate area from the data.  The group of instructions that belongs to the same function are stored together.  Just like we can refer to a variable using its memory address using its  reference  (or  pointer ), we can refer to a function using the memory address of the entry point to the function.",
            "title": "Abstraction: Functions"
        },
        {
            "location": "/lec1/index.html#abstraction-composite-data-type",
            "text": "Just like functions allow programmers to group instructions, give it a name, and refer to it later, a  composite data type  allow programers to group  primitive types  together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or everyday objects such as a person, a product, etc.  Defining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.  For instance, a circle on a 2D plane can be represented by the center ( x ,  y ) and its radius  r , or it can be represented by the top left corner ( x , y ) and the width  w  of the bounding square.  In C, we build composite data type with  struct .  For example,  1\n2\n3\n4 struct   circle   { \n   float   x ,   y ;   // (x,y) coordinate of the center. \n   float   r ;   // radius  }    Once we have the  struct  defined, we are not completely shielded from its representation, until we write a set of functions that operates on the  circle  composite type.  For instance,  1\n2\n3 float   circle_area ( circle   c )   {   ...   };  bool    circle_contains_point ( circle   c ,   point   p )   {   ...   }; \n   :    Implementation of these functions obvious requires knowledge of how a circle is represented.  Once the set of functions that operates on and manipulate circles are available, we can use  circle  type without worrying about the internal representation.    If we decided to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.  We can imagine an  abstraction barrier  between the code that uses a composite data type along with its associated set of functions, and the code that define the data type along with the implementation of the functions.  Above the barrier, the concern is about using the composite data type to do useful things, while below the barrier, the concern is about how to represent and manipulate the composite data type.",
            "title": "Abstraction: Composite Data type"
        },
        {
            "location": "/lec1/index.html#abstraction-class-and-object-or-encapsulation",
            "text": "We can further bundle the composite data type and its associated functions together in another abstraction, called a  class .  A class is a data type with a group of functions associated with it.  We call the functions as  methods  and the data in the class as  fields  (or  members , or  states , or  attributes 4 ).   A well-designed class maintain the abstraction barrier, properly wrapped the barrier around the internal representation and implementation, and exposes just the right interface for others to use.  Just like we can create variables of a given type, we can create  objects  of a given class.  Objects are instances of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.  Recall that programs written in a procedural language such as a C consists of functions, with a  main()  function as the entry point.  A program written in an  object-oriented language  such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.  One could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has a certain behavior and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used everyday (unless we try to repair it) 5 .    This concept, of keeping the all the data and functions operating on the data related to a composite data type together within an abstraction barrier, is called  encapsulation .",
            "title": "Abstraction: Class and Object (or, Encapsulation)"
        },
        {
            "location": "/lec1/index.html#breaking-the-abstraction-barrier",
            "text": "In the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.    Consider the case of implementing  circle  as a C  struct .  Suppose someone wants to move the center of the circle  c  to a new position ( x ,  y ), instead of implementing a function  circle_move_to(c, x, y)  (which would still keep the representation used under the barrier), the person wrote:  1\n2 c . x   =   x ;  c . y   =   y ;    This code would still be correct, but the abstraction barrier is broken since we now make explicit assumption that there are two variables  x  and  y  inside the  circle  data type that correspond to the center of the circle.  If one day, we want to represent a circle in a different way, then we have to carefully change all the code that read and write these variables  x  and  y  and update them.   Breaking Python's Abstraction Barrier  Python tries to prevent  accidental  access to internal representation by having a convention of prefixing the internal variables with  _  (one underscore) or  __  (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug / error that will surface later.",
            "title": "Breaking the Abstraction Barrier"
        },
        {
            "location": "/lec1/index.html#data-hiding",
            "text": "Many OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, support  private  and  public  access modifiers 5 .  A field or a method that is declared as  private  cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a  public  field or method can be accessed, modified, or invoked from outside the class.  Such mechanism to protect the abstraction barrier from being broken is called  data hiding  or  information hiding .  This protection is enforced in the  compiler  during compile time.",
            "title": "Data Hiding"
        },
        {
            "location": "/lec1/index.html#example-the-circle-class",
            "text": "Let's put together the concepts of encapsulation, data hiding to define a  Circle  class in Java:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 /**   * A Circle object encapsulates a circle on a 2D plane.     */  class   Circle   { \n   private   double   x ;    // x-coordinate of the center \n   private   double   y ;    // y-coordinate of the center \n   private   double   r ;    // the length of the radius \n\n   /**     * Return the area of the circle.     */ \n   public   double   getArea ()   { \n     return   3.1415926 * r * r ; \n   } \n\n   /**     * Move the center of the circle to the new position (newX, newY)     */ \n   public   void   moveTo ( double   newX ,   double   newY )   { \n     x   =   newX ; \n     y   =   newY ; \n   }  }    The class above is still missing many essential components, and not a complete program.",
            "title": "Example: The Circle class"
        },
        {
            "location": "/lec1/index.html#constructors-accessors-and-mutators",
            "text": "With data hiding, we completely isolate the internals representation of a class using an abstraction barrier.  With no way for the user of the class to modify the fields directly, it is common for a class to provide methods to initialize and modify these internal fields (such as the  moveTo()  method above).  A method that initializes an object is called a  constructor , and a method that retrieves or modifies the properties of the object is called the  accessor  (or  getter ) or  mutator  (or  setter ).  A constructor method is a special method within the class.  It cannot be called directly, but is invoked automatically when an object is instantiated.   In Java, a constructor method has the same name as the class and has no return type.  A constructor can take in arguments just like other functions.  The class  Circle  can have a constructor such as the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   Circle   { \n     : \n   /**     * Create a circle centered on (centerX, centerY) with given radius    */ \n   public   Circle ( double   centerX ,   double   centerY ,   double   radius )   { \n     x   =   centerX ; \n     y   =   centerY ; \n     r   =   radius ; \n   } \n     :  }    The use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are actually exposing the internal representation, therefore breaking the encapsulation.  For instance:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 class   Circle   { \n     : \n\n   public   double   getX ()   { \n     return   x ; \n   } \n\n   public   void   setX ( double   newX )   { \n     x   =   newX ; \n   } \n\n   public   double   getY ()   { \n     return   y ; \n   } \n\n   public   void   setY ( double   newY )   { \n     y   =   newY : \n   } \n\n   public   double   getR ()   { \n     return   r ; \n   } \n\n   public   void   setR ( double   newR )   { \n     r   =   newR ; \n   } \n     :  }    The examples above are pretty pointless.  If we need to know the internal and do something with it, we are doing it wrong.  The right approach is to implement a method within the class that do whatever we want the class to do.   For instance, suppose that we want to know the circumference of the circle, one approach would be:  1     double   circumference   =   2 * c . getR ()* 3.1415926 ;    where c is a  Circle  object.  A better approach would be to add a new method  getCircumference()  in the  Circle  class, and call this instead: 1     double   circumference   =   c . getCircumference ();    The better approach involves writing more lines of code, but it keeps the encapsulation in tact.   Constructor in Python and JavaScript  In Python, the constructor is the  __init__  method.   In JavaScript, the constructor is simply called  constructor .",
            "title": "Constructors, Accessors, and Mutators"
        },
        {
            "location": "/lec1/index.html#class-fields-and-methods",
            "text": "Let's look at the implementation of  getArea()  above.  We use the constant  \\(\\pi\\)  but hardcoded it as 3.1415926.  Hardcoding such a magic number is a  no no  in terms of coding style.  This constant can appear in more than one places, and if we hardcode such a number, and want to change the precision of it later, we would need to trace down and change every occurrence.  Not only this introduces more work, but likely to introduce bugs.    In C, we define it as a macro constant  M_PI .  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other feel a bit constraining.  The constant  \\(\\pi\\)  is universal, and not really belong to any object (the value of Pi is the same for every circle!).  If we start to define a method  sqrt()  that computes the square root of a given number, this is a general function that is not associated with any object as well.  A solution to this is to associate these global values and functions with a  class  instead of with an  object .  For instance. Java predefines a  Math  class 6  that is populated with constants  PI  and  E  (for Euler's number  \\(e\\) ), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the  static  keyword.  We can additionally add a keyword  final  to indicate that the value of the field will not change 7 .  1\n2\n3\n4\n5\n6 class   Math   { \n   : \n   public   static   final   double   PI   =   3.141592653589793 ; \n   : \n   :  }    We call these fields and methods that are associated with a class as  class fields  and  class methods , and fields and methods that are associated with an object as  instance fields  and  instance methods .   Class Fields and Methods in Python  Note that, in Python, any variable declared within a  class  block is a class field: 1\n2\n3 class   Circle : \n   x   =   0 \n   y   =   0   \nIn the above example,  x  and  y  are class fields, not instance fields.",
            "title": "Class Fields and Methods"
        },
        {
            "location": "/lec1/index.html#memory-model-for-objects",
            "text": "Variables and functions are stored in the memory of the computers as bits, usually in two separate regions.  Since an object encapsulates both variables and functions, where are they stored?    Different implementations might stored the objects differently, but here is one way that we will follow for this class:   In the figure above, there are two objects of the same class.  An objects is referred to through its references, which is a pointer to memory location where the instance fields for the object is stored, along with a pointer to a  method table .  A method table stores a table of pointers to the methods, along with a table to the class fields.",
            "title": "Memory Model for Objects"
        },
        {
            "location": "/lec1/index.html#example-the-circle-class_1",
            "text": "Now, let revise our  Circle  class to improve the code and make it a little more complete:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49 import   java.lang.Math ;  /**   * A Circle object encapsulates a circle on a 2D plane.     */  class   Circle   { \n   private   double   x ;    // x-coordinate of the center \n   private   double   y ;    // y-coordinate of the center \n   private   double   r ;    // the length of the radius \n\n   /**     * Create a circle centered on (centerX, centerY) with given radius    */ \n   public   Circle ( double   centerX ,   double   centerY ,   double   radius )   { \n     x   =   centerX ; \n     y   =   centerY ; \n     r   =   radius ; \n   } \n\n   /**     * Return the area of the circle.     */ \n   public   double   getArea ()   { \n     return   Math . PI * r * r ; \n   } \n\n   /**     * Return the circumference of the circle.     */ \n   public   double   getCircumference ()   { \n     return   Math . PI * 2 * r ; \n   } \n\n   /**     * Move the center of the circle to the new position (newX, newY)     */ \n   public   void   moveTo ( double   newX ,   double   newY )   { \n     x   =   newX ; \n     y   =   newY ; \n   } \n\n   /**     * Return true if the given point (testX, testY) is within the circle.     */ \n   public   boolean   contains ( double   testX ,   double   testY )   { \n     return   false ; \n     // TODO: left as an exercise   \n   }  }",
            "title": "Example: The Circle class"
        },
        {
            "location": "/lec1/index.html#creating-and-interacting-with-circle-objects",
            "text": "To use the  Circle  class, we can either:   create a  main()  function, compile and link with the  Circle  class, and create an executable program, just like we usually do with a C program, OR  use a new bleeding-edge tool called  jshell , which is part of Java 9 (to be released September 2017), and its  read-evaluate-print loop  (REPL) to help us quickly try out various features of Java.   We will write a complete Java program with  main()  within two weeks, but for now, we will use  jshell  to demonstrate the various language features of Java 7 .  The demonstration below loads the  Circle  class written above (with the  contains  method completed) from a file named  Circle.java 8 , and creates two  Circle  objects,  c1  and  c2 .  We use the  new  keyword to tell Java to create an object of type  Circle  here, passing in the center and the radius.       Often, the instructions and data are stored in different regions of the memory.\u00a0 \u21a9    Javascript would happily convert  4  into a string for you, and return  45 .\u00a0 \u21a9    assuming the parameters are passed in correctly.\u00a0 \u21a9    Computer scientists just can't decide on what to call this!\u00a0 \u21a9    Others include  protected  and the  default  modifier, but let's not sweat about the details for now.\u00a0 \u21a9 \u21a9    The class  Math  is provided by the package  java.lang  in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line  import   java.lang.Math  in the beginning of our program.\u00a0 \u21a9    You can download and install  jshell  yourself, as part of  Java Development Kit version 9 (JDK 9) \u00a0 \u21a9 \u21a9    We use the convention of one public class per file, name the file with the exact name of the class (including capitalization), and include the extension  .java  to the filename.\u00a0 \u21a9",
            "title": "Creating and Interacting with Circle objects"
        },
        {
            "location": "/lec2/index.html",
            "text": "Lecture 2: Inheritance & Polymorphism\n\n\nLearning Objectives\n\n\nAfter this lecture, students should:\n\n\n\n\nunderstand that Java is a type-safe language, in contrast to C\n\n\nbe familiar with Java variable and primitive types\n\n\nunderstand the concepts of object-oriented programming, including interface, polymorphism, late binding, inheritance, method overriding and method overloading, and their purposes of introducing them as a method of programming.\n\n\nknow the purpose and usage of Java keywords \nimplements\n, \nextends\n, \nsuper\n, \ninstanceof\n, and \n@Override\n\n\nunderstand Java concepts of arrays, enhanced \nfor\n loop, method signature, \nObject\n class, and object equality. \n\n\n\n\nType Safety\n\n\nRecall that the \ntype\n of a variable tells the compiler how to interpret the bits that represent the value of a variable and how to manipulate the variable.  The compiler also uses the type to decide how much memory is allocated for each variable.  \n\n\nSome languages are stricter in terms of type \"compatibility\" than others.  C compilers, however, are not very strict.  If it detects something strange with the type you used, it will issue a warning, but still let your code compiles and run.\n\n\nTake:\n\n\n1\n2\n3\n4\n5\n#include\n \n<stdio.h>\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nprintf\n(\n\"%d\n\\n\n\"\n,\n \n\"cs2030\"\n);\n\n\n}\n\n\n\n\n\n\n\nIn Line 4, we treat the address to a string as integer.  This generates a compiler's warning.\n\n\nIn C, you can \ntype cast\n a variable from one type into another, i.e., force the compiler to treat a variable of one type as another type.  The compiler would listen and do that for you.  The following code would print out gibberish and would compile perfectly without error.\n\n\n1\n2\n3\n4\n5\n#include\n \n<stdio.h>\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nprintf\n(\n\"%d\n\\n\n\"\n,\n \n(\nint\n)\n\"cs2030\"\n);\n\n\n}\n\n\n\n\n\n\n\nSuch flexibility and loose rules for type compatibility could be useful, if you know what you are doing, but for most programmers, it could be a major source of unintentional bugs, especially if one does not pay attention to compiler's warning or one forces the warning to go away without fully understanding what is going on.\n\n\nJava is very strict when it comes to type checking, and is one of the \ntype-safe\n languages. Java ensures that basic operations (such as \n+\n, \n-\n, etc) and method calls apply to values in a way that makes sense.  If you try to pull the same trick as above, you will receive an error:\n\n\n\n\n\n\n\nJava Primitive Data Types\n\n\nJava supports eight \nprimitive\n data types: \nbyte\n, \nshort\n, \nint\n, \nlong\n, \nfloat\n, \ndouble\n, \nboolean\n and \nchar\n.  If you are familiar with C, these data types should not be foreign to you.  One important difference is that a \nchar\n variable stores a 16-bit Unicode character, not an 8-bit character like in C.  Java uses \nbyte\n for that.  The other notable difference is that Java defines \ntrue\n and \nfalse\n as possible value to a \nboolean\n, unlike C which uses \n0\n for false and non-\n0\n for true.  \n\n\nYou can read all about Java \nvariables\n and \nprimitive data types\n in Oracle's Java Tutorial.\n\n\n\n\nEnforcing Abstraction Barrier with Interface\n\n\nRecall the concept of encapsulation. When we develop a large piece of software, it is important to hide the details about data representation and implementation, and only exposes certain \npublic\n methods for the users to use.  We imagine that there is an abstraction barrier between the code that implements the internals of a class (called the \nimplementer\n) and the code that uses the class (called the \nuser\n) to achieve a higher level task.\n\n\nWe have seen that we use \nprivate\n to enforce data hiding -- to hide certain fields and methods from outside of the barrier.  Now, we are going to see how we enforce that the right set of methods are defined, implemented, and used on both sides of the barrier.\n\n\nThe mechanism to do this is through defining an \ninterface\n (aka a \nprotocol\n as it is called in Objective-C or Swift).  An interface is kinda like a contract between the implementer of a class and the user of a class.  If a class promises to implement an interface, then we are guaranteed that the methods defined in the interface are implemented in the class as it is promised.  Otherwise, the code would not compile.\n\n\nIn Java, we can define an interface using \ninterface\n keyword:\n\n\n1\n2\n3\n4\n5\ninterface\n \nGeometricShape\n \n{\n\n    \npublic\n \ndouble\n \ngetArea\n();\n\n    \npublic\n \ndouble\n \ngetPerimeter\n();\n\n    \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n);\n\n\n}\n\n\n\n\n\n\n\nThe example interface \nGeometricShape\n above contains only the declaration of the methods, not the implementation.  \n\n\nNow, let's see how the implementer would implement a class using the interface.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nimport\n \njava.lang.Math\n;\n\n\nclass\n \nCircle\n \nimplements\n \nGeometricShape\n \n{\n\n    \nprivate\n \nPoint\n \ncenter\n;\n\n    \nprivate\n \ndouble\n \nradius\n;\n\n\n    \npublic\n \nCircle\n(\nPoint\n \ninitCenter\n,\n \ndouble\n \ninitR\n)\n \n{\n\n        \ncenter\n \n=\n \ninitCenter\n;\n\n        \nradius\n \n=\n \ninitR\n;\n\n    \n}\n\n\n    \nvoid\n \nmoveTo\n(\nPoint\n \np\n)\n \n{\n\n        \ncenter\n \n=\n \np\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n        \nreturn\n \nMath\n.\nPI\n*\nradius\n*\nradius\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n)\n \n{\n\n        \nreturn\n \n(\np\n.\ndistance\n(\ncenter\n)\n \n<\n \nradius\n);\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \ndouble\n \ngetPerimeter\n()\n \n{\n\n        \nreturn\n \nMath\n.\nPI\n*\n2\n*\nradius\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nThis is very similar to the code you saw in Lecture 1 and Exercise 1, except that in Line 2, we say that \nclass\n \nCircle\n \nimplements\n \nGeometricShape\n.  This line informs the compiler that the programmer intends to implement all the methods included in the interface \nGeometricShape\n exactly as declared (in terms of names, the number of arguments, the types of arguments, returned type, and access modifier).  The rest of the class is the same, except that we renamed \ngetCircumference\n with \ngetPerimeter\n, which is more general and apply to all shapes.  You will also see that we added \nannotations\n to our code by adding the line \n@Override\n before methods in \nCircle\n that implements the methods declared in \nGeometricShape\n.  This annotation is optional, but it informs our intention to the compiler and helps make the intention of the programmer clearer to others who read the code.\n\n\n\n\nJava Annotation\n\n\nAnnotations are metadata we add that is not part of the code.  Annotation does not affect execution.  They are useful to compilers and other software tools, as well as humans who read the code.  While we can similarly make the code more human-friendly with comments, an annotation is structured and so can be easily parsed by software.  \n@Override\n is probably going to be the only annotation useful for us in this class.\n\n\n\n\nNote that we can have other methods (such as \nmoveTo\n) in the class beyond what is promised in the interface the class implements.\n\n\nA class can implement more than one interfaces.  For instance, let's say that we have another interface called \nPrintable\n[^1] with a single method defined:\n\n\n1\n2\n3\ninterface\n \nPrintable\n \n{\n\n    \npublic\n \nvoid\n \nprint\n();\n\n\n}\n\n\n\n\n\n\n\nThe implementer of \nCircle\n wants to inform the users that the method \nvoid print()\n is implemented, it can do the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nclass\n \nCircle\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n     \n:\n\n     \n@Override\n\n     \npublic\n \nvoid\n \nprint\n()\n \n{\n\n         \nSystem\n.\nout\n.\nprintf\n(\n\"radius: %f\\n\"\n,\n \nradius\n);\n\n         \nSystem\n.\nout\n.\nprintf\n(\n\"center:\"\n);\n\n         \ncenter\n.\nprint\n();\n\n     \n}\n\n\n}\n\n\n\n\n\n\n\nIn the above, we call \nprint()\n on the \nPoint\n object as well.  How do we know that \nPoint\n provides a \nprint()\n method?  Well, we can read the implementation code of \nPoint\n, or we can agree with the implementer of \nPoint\n that \nPoint\n provides a \nPrintable\n interface!  \n\n\nIt is important to know that, \ninterface\n provides a \nsyntactic\n contract on the abstraction barrier, but it does not provide a \nsemantic\n contract.  It does not, for instance, guarantee that \nprint()\n actually prints something to the screen.  One could still implement interface \nPrintable\n as follows:\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nCircle\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n     \n:\n\n     \n@Override\n\n     \npublic\n \nvoid\n \nprint\n()\n \n{\n\n     \n}\n\n\n}\n\n\n\n\n\n\n\nand the code still compiles!\n\n\nNot all programming languages that support classes support interface.  Javascript and Python, for instance, does not support similar concepts.\n\n\nInterface as Types\n\n\nIn Java, an interface is a type.  What this means is that:\n\n\n\n\nWe can declare a variable with an interface type, such as:\n\n1\n    \nGeometricShape\n \ncircle\n;\n\n\n\n\n\nor\n\n1\n    \nPrintable\n \ncircle\n;\n\n\n\n\n\nWe cannot, however, instantiate an object from an interface\nsince an interface is a \"template\", an \"abstraction\", and does not have an implementation.  For instance:\n\n\n\n\n1\n2\n3\n4\n    \n// this is not OK\n\n    \nPrintable\n \np\n \n=\n \nnew\n \nPrintable\n();\n\n    \n// this is OK\n\n    \nPrintable\n \ncircle\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n);\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, we can pass arguments of an interface type into a method, and the return type of a method can be an interface.\n\n\n\n\n\n\nAn object can be an instance of multiple types.  Recall that Java is a statically typed language. We associate a type with a variable.  We can assign a variable to an object if the object is an instance of the type of the variable.  Line 4 above, for instance, creates a new circle, which is an instance of three types: \nCircle\n, \nGeometricShape\n, and \nPrintable\n.  It is ok to assign this new circle to a variable of type \nPrintable\n.\n\n\n\n\n\n\nWe can now do something cool like this:\n\n1\n2\n3\n4\n5\n6\n7\n    \nPrintable\n[]\n \nobjectsToPrint\n;\n\n      \n:\n\n      \n// initialize array objectsToPrint\n\n    \n:\n\n    \nfor\n \n(\nPrintable\n \nobj\n:\n \nobjectsToPrint\n)\n \n{\n\n        \nobj\n.\nprint\n();\n\n    \n}\n\n\n\n\n\n\nLet's look at this code in more details.  Line 1 declares an array of objects of type \nPrintable\n.  We skip over the code to initialize the content of the array for now, and\njump to Line 5-7, which is a \nfor\n loop.  Line 5 declares a loop variable \nobj\n of type \nPrintable\n and loops through all objects in the array \nobjectsToPrint\n, and Line 6 invoke the method \nprint\n of \nobj\n.\n\n\n\n\nArray and For Loops in Java\n\n\nSee Oracle's tutorial on \narray\n and \nenhanced loop\n\n\n\n\nThe magic happens in Line 6:\n\n\n\n\nFirst, since we now that any object in the array has the type \nPrintable\n, this means that they must implement the \nPrintable\n interface and support the method \nprint()\n.  \n\n\nSecond, we do not know, and we do not \nneed\n to know which class an object is an instance of.\n\n\nThird, we can actually have objects of completely unrelated classes in the same array. We can have objects of type \nCircle\n, and objects of type \nPoint\n.  We can have objects of type \nFactory\n, or objects of type \nStudent\n, or objects of type \nCushion\n.  As long as the objects implement the \nPrintable\n interface, we can put them into the same array.\n\n\nForth, at \nrun time\n, Java looks at \nobj\n, and determines its class, and invoke the right implementation of \nprint()\n corresponding to the \nobj\n.  That is, if \nobj\n is an instance of a class \nCircle\n, then it will call \nprint()\n method of \nCircle\n; if \nobj\n is an instance of a class \nPoint\n, then it will call \nprint()\n method of \nPoint\n, and so on.\n\n\n\n\nTo further appreciate the magic that happens in Line 6, especially the last point above, consider how function call is done in C.  In C, you cannot have two functions of the same name within the same scope, so if you call a function \nprint()\n, you know exactly which set of instructions will be called\n1\n.  So, the name \nprint\n is bound to the corresponding set of instructions at compilation time.  This is called \nstatic binding\n or \nearly binding\n.\nTo have \nprint()\n for different types, we need to name them differently to avoid naming conflicts: e.g., \nprint_point()\n, \nprint_circle()\n.\n\n\nIn a language with static binding, suppose you want to mix objects of different types\ntogether in an array, you need to do something like the following pseudocode:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n   \nfor\n \neach\n \nobject\n \nin\n \nthe\n \narray\n\n       \nif\n \nobject\n \nis\n \na\n \npoint\n\n           \nprint_point\n(\nobject\n)\n\n       \nelse\n \nif\n \nobject\n \nis\n \na\n \ncircle\n\n           \nprint_circle\n(\nobject\n)\n\n       \nelse\n \nif\n \nobject\n \nis\n \na\n \nsquare\n\n           \nprint_square\n(\nobject\n)\n\n           \n:\n\n           \n:\n\n\n\n\n\n\nNot only is the code verbose and ugly, if you want to define a new compound data type that supports printing, you need to remember to come to this place and add in a new condition and call the corresponding print function.\n\n\nIn OO languages, you can have methods named \nprint()\n implemented differently in different classes.  When we compile the code above, the compiler will have no way to know which implementation will be called.  The bindings of \nprint()\n to the actual set of instructions will only be done at run time, after \nobj\n is instantiated from a class.  This is known as \ndynamic binding\n, or \nlate binding\n, or \ndynamic dispatch\n.\n\n\n\n\nIf you understand how an object is represented internally, this is not so magical after all.  Referring to the figure above, the array \nobjectsToPrint[]\n contains an array of references to objects, the first one is a \nCircle\n object, and the next two are \nPoint\n objects.  When \nobj.print()\n is invoked, Java refers to the method table, which points to either the method table for \nCircle\n or for \nPoint\n, based on the class the object is an instance of.\n\n\nThis behavior, which is common to OO programming languages, is known as \npolymorphism\n2\n.\n\n\nDRY - Don't Repeat Yourself\n\n\nWith the interface \nGeometricShape\n, we can implement other classes, such as \nRectangle\n, \nSquare\n, \nPolygon\n with the same interface.  For instance,\n\n\n1\n2\n3\nclass\n \nSquare\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n         \n// left as exercise (See Exercise 2)\n\n\n}\n\n\n\n\n\n\n\nSo far, we have been treating our shapes as pure geometric objects.  Let's consider an application where we want to paint the shapes.  Each shape should have a fill color and a border (with color and thickness).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \njava.awt.Color\n;\n\n    \n:\n\n\n\nclass\n \nPaintedCircle\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n  \nprivate\n \nColor\n  \nfillColor\n;\n\n    \nprivate\n \nColor\n  \nborderColor\n;\n\n    \nprivate\n \ndouble\n \nborderThickness\n;\n\n\n    \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n        \nfillColor\n \n=\n \nc\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderThickness\n(\ndouble\n \nt\n)\n \n{\n\n        \nborderThickness\n \n=\n \nt\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderColor\n(\nColor\n \nc\n)\n \n{\n\n        \nborderColor\n \n=\n \nc\n;\n\n    \n}\n\n\n    \n// other methods and fields for Circle from before\n\n\n\n}\n\n\n\n\n\n\n\nIn the code above, we added the line \nimport\n \njava.awt.Color\n to use the \nColor class\n that Java provides, and added three private members as well as their setters.\n\n\nWe can do the same for \nSquare\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \njava.awt.Color\n;\n\n    \n:\n\n\n\nclass\n \nPaintedSquare\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n  \nprivate\n \nColor\n  \nfillColor\n;\n\n    \nprivate\n \nColor\n  \nborderColor\n;\n\n    \nprivate\n \ndouble\n \nborderThickness\n;\n\n\n    \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n        \nfillColor\n \n=\n \nc\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderThickness\n(\ndouble\n \nt\n)\n \n{\n\n        \nborderThickness\n \n=\n \nt\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderColor\n(\nColor\n \nc\n)\n \n{\n\n        \nborderColor\n \n=\n \nc\n;\n\n    \n}\n\n\n    \n// other methods and fields written for Square\n\n\n\n}\n\n\n\n\n\n\n\nand for other shapes.\n\n\nGreat!  We now have colorful shapes.  The code above, however, is not \ngood\n code, even though it is \ncorrect\n.  Consider what would need to be done if say, we decided to support border styles (dotted border, solid border, dashed border, etc).  We would have to edit every single class that supports colors and borders.!\n\n\nOne principle that we can follow is the \nabstraction principle\n, which says \"Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.\"\n3\n\n\nFollowing the principle, we want to implement these style-related fields and methods in just one place.  But where?\n\n\nInheritance\n\n\nThe OO-way to do this is to create a \nparent class\n, and put all common fields and methods into the parent.  A parent class is defined just like a normal class.  For instance:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nclass\n \nPaintedShape\n \n{\n\n  \nprivate\n \nColor\n  \nfillColor\n;\n\n    \nprivate\n \nColor\n  \nborderColor\n;\n\n    \nprivate\n \ndouble\n \nborderThickness\n;\n\n\n  \npublic\n \nPaintedShape\n(\nColor\n \ninitFillColor\n,\n \nColor\n \ninitBorderColor\n,\n \ndouble\n \ninitBorderThickness\n)\n \n{\n\n        \nfillColor\n \n=\n \ninitFillColor\n;\n\n        \nborderColor\n \n=\n \ninitBorderColor\n;\n\n        \nborderThickness\n \n=\n \ninitBorderThickness\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n        \nfillColor\n \n=\n \nc\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderThickness\n(\ndouble\n \nt\n)\n \n{\n\n        \nborderThickness\n \n=\n \nt\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderColor\n(\nColor\n \nc\n)\n \n{\n\n        \nborderColor\n \n=\n \nc\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nThe \nPaintedCircle\n class, \nPaintedSquare\n class, etc, can now \ninherits\n non-private fields and methods from the parent class, using the \nextends\n keyword.\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nPaintedCircle\n \nextends\n \nPaintedShape\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n      \n:\n\n\n}\n\n\n\nclass\n \nPaintedSquare\n \nextends\n \nPaintedShape\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n      \n:\n\n\n}\n\n\n\n\n\n\nThis mechanism for a class to inherit the properties and behavior from a parent is called \nInheritance\n, and is the forth and final basic OO principles we cover\n4\n.\n\n\nWith inheritance, we do not have to repeat the declaration of fields \nfillColor\n, \nborderColor\n, \nborderThickness\n and the associated methods in them.  This software engineering principle is also known as the DRY principle -- \"\ndon't repeat yourself\n\" principle.  We are going to see DRY again and again in future lectures.\n\n\nWe also call the \nPaintedShape\n the superclass (or base class) of \nPaintedCircle\n and \nPaintedSquare\n, and call \nPaintedCircle\n and \nPaintedSquare\n the subclass (or derived class)\n5\n of \nPaintedShape\n.\n\n\nA \nPaintedCircle\n object can now call \nfillWith()\n even if the method \nfillWith()\n is not defined in \nPaintedCircle\n -- it is defined in \nPaintedCircle\n's parent \nPaintedShape\n.  \n\n\nNow consider the constructor for \nPaintedCircle\n.   We need to initialize the geometric shape as well as the painting style.  But, we define the fields \nfillColor\n, etc \nprivate\n, and subclasses have no access to \nprivate\n fields in the parent.  We need to call the constructor of the parent to initialize these private fields.  The way to do this is to use the \nsuper\n keyword, like such:\n\n\n1\n2\n3\n4\n5\n  \npublic\n \nPaintedCircle\n(\nPoint\n \ninitCenter\n,\n \ndouble\n \ninitRadius\n,\n \nColor\n \ninitFillColor\n,\n \nColor\n \ninitBorderColor\n,\n \ndouble\n \ninitBorderThickness\n)\n \n{\n\n        \nsuper\n(\ninitFillColor\n,\n \ninitBorderColor\n,\n \ninitBorderThickness\n);\n\n        \nc\n \n=\n \ninitCenter\n;\n\n        \nr\n \n=\n \ninitRadius\n;\n\n    \n}\n\n\n\n\n\n\n\nYou can see that the constructor for \nPaintedCircle\n now takes in five parameters.  You can imagine that as the class get more sophisticated with more fields, we need to pass in more parameters to the class to initialize the fields.  It is not uncommon to provide alternative constructors with fewer parameters and assign some \ndefault\n values to the fields.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n  \n// create circle with default style (white with black border of thickness 1)\n\n  \npublic\n \nPaintedCircle\n(\nPoint\n \ninitCenter\n,\n \ndouble\n \ninitRadius\n)\n \n{\n\n      \nsuper\n(\nColor\n.\nWHITE\n,\n \nColor\n.\nBLACK\n,\n \n1.0\n);\n\n      \nc\n \n=\n \ninitCenter\n;\n\n      \nr\n \n=\n \ninitRadius\n;\n\n  \n}\n\n\n    \n// create circle with customized styles  \n\n  \npublic\n \nPaintedCircle\n(\nPoint\n \ninitCenter\n,\n \ndouble\n \ninitRadius\n,\n \nColor\n \ninitFillColor\n,\n \nColor\n \ninitBorderColor\n,\n \ndouble\n \ninitBorderThickness\n)\n \n{\n\n        \nsuper\n(\ninitFillColor\n,\n \ninitBorderColor\n,\n \ninitBorderThickness\n);\n\n        \nc\n \n=\n \ninitCenter\n;\n\n        \nr\n \n=\n \ninitRadius\n;\n\n    \n}\n\n\n\n\n\n\n\nTwo methods in a class can have the same name and still co-exist peacefully together.  This is called \noverloading\n.  When a method is called, we look at the \nsignature\n of the method, which consists of (i) the name of the method, (ii) the number, order, and type of the arguments, to determine which method is called.  To be precise, the first sentence of this paragraph should read: Two methods in a class can have the same name and still co-exist peacefully together, as long as they have different signatures.  Note that the return type is not part of the method signature, so you cannot have two methods with the same name and same arguments but different return type.  \n\n\nEven though the example above shows overloading of the constructor, we can overload other methods as well.\n\n\nJava \nObject\n class\n\n\nIn Java, every class inherits from the \nclass \nObject\n implicitly.  The \nObject\n class defines many useful methods that are common to all objects.  The two useful ones are :\n\n\n\n\nequals(Object obj)\n, which checks if two objects are equal to each other, and\n\n\ntoString()\n, which returns a string representation of the object, and is a better way to print an object than the \nprint()\n method and \nPrintable\n interface we write\n6\n.\n\n\n\n\nThe \nequals()\n method as implemented in \nObject\n, only compares if two object references refer to the same object In the Figure below, we show an array \ncircles\n with three \nCircle\n objects.  All three circles are centered at (0, 0) with radius 10.  They are created as follows:\n\n\n1\n2\n3\n4\n    \nCircle\n[]\n \ncircles\n \n=\n \nnew\n \nCircle\n[\n3\n];\n\n    \ncircles\n[\n0\n]\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n);\n\n    \ncircles\n[\n1\n]\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n);\n\n    \ncircles\n[\n2\n]\n \n=\n \ncircles\n[\n1\n];\n\n\n\n\n\n\n\nWhen you check \ncircles[0].equals(circles[1])\n, however, it returns \nfalse\n, because even though \ncircles[0]\n and \ncircles[1]\n are semantically the same, they refer to the two different objects.  Calling \ncircles[1].equals(circles[2])\n returns \ntrue\n, as they are referring to the same object.  \n\n\n\n\nWhat if you need a method that compares if two circles are semantically the same?  You can implement your own method, say \nisTheSameCircle(Circle c)\n.  But, the \nequals()\n method is universal (all classes inherits this method) and is used by other classes for equality tests.  So, in most cases, we can implement a method called \nequals()\n with the same signature with the semantic that we want\n7\n.\n\n\nThat's right.  Even though we cannot have two methods with the same signature in the same class, we can have two methods with the same signature, one in the superclass (or the superclass's superclass, and so on), one in the subclass.  The method in the subclass will override the method in the superclass.  For example,\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n    \nclass\n \nCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n         \n@Override\n\n         \npublic\n \nboolean\n \nequals\n(\nObject\n \nobj\n)\n \n{\n\n             \nif\n \n(\nobj\n \ninstanceof\n \nCircle\n)\n \n{\n\n                 \nCircle\n \ncircle\n \n=\n \n(\nCircle\n)\n \nobj\n;\n\n                 \nreturn\n \n(\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n             \n}\n \nelse\n\n               \nreturn\n \nfalse\n;\n\n         \n}\n\n    \n}\n\n\n\n\n\n\n\nLine 7 above compares if the two center points are equals, and the two radius values are equals.  So, we compare if the two circles are semantically the same.  The rest of this code requires some explanation:\n\n\n\n\nLine 3 uses the same \n@Override\n annotation that we have seen before -- we are telling the compilers that we are overriding a method in the superclass.\n\n\nLine 4 declares the method \nequals\n, and note that it has to have exactly the same signature as the \nequals()\n method we are overriding.  Even though we meant to compare two \nCircle\n objects, we cannot declare it as \npublic boolean equals(Circle circle)\n, since the signature is different and the compiler would complain.\n\n\nSince \nobj\n is of an \nObject\n type, we can actually pass in any object to compare with a \nCircle\n.  Line 5 checks if the comparison makes sense, by checking if \nobj\n is instantiated from a \nCircle\n class, using the \ninstanceof\n keyword.  If \nobj\n is not even a \nCircle\n object, then we simply return \nfalse\n.\n\n\nIf \nobj\n is an instance of \nCircle\n, we assign \nobj\n to a variable of type \nCircle\n, and compare as in Line 7.\n\n\n\n\nFor the code above to work, we have to override the \nequals\n method of \nPoint\n as well.  That is left as an exercise.\n\n\nOne final note: polymorphism works here as well.  If we have an object reference \nobj\n of type \nObject\n that refers to an instance of a \nCircle\n, calling \nobj.equals()\n will invoke the \nequals()\n method of \nCircle\n, not \nObject\n, just like the case of interfaces.\n\n\n\n\n\n\n\n\n\n\nRemember a function is just an abstraction over a set of instructions.\u00a0\n\u21a9\n\n\n\n\n\n\nIn biology, polymorphism means that an organism can have many different forms.\u00a0\n\u21a9\n\n\n\n\n\n\nThis principle is formulated by Benjamin C. Pierce in his book \nTypes and Programming Languages\n.\u00a0\n\u21a9\n\n\n\n\n\n\nThe other three is encapsulation, abstraction, and polymorphism.\u00a0\n\u21a9\n\n\n\n\n\n\nAgain, you see that computer scientist can be quite indecisive when it comes to the terminologies in OOP.\u00a0\n\u21a9\n\n\n\n\n\n\nWe leave this for another lesson on another day.  \u00a0\n\u21a9\n\n\n\n\n\n\nIf you override \nequals()\n you should generally override \nhashCode()\n as well, but let's leave that for another lesson on another day.\u00a0\n\u21a9",
            "title": "2. Inheritance & Polymorphism"
        },
        {
            "location": "/lec2/index.html#lecture-2-inheritance-polymorphism",
            "text": "",
            "title": "Lecture 2: Inheritance &amp; Polymorphism"
        },
        {
            "location": "/lec2/index.html#learning-objectives",
            "text": "After this lecture, students should:   understand that Java is a type-safe language, in contrast to C  be familiar with Java variable and primitive types  understand the concepts of object-oriented programming, including interface, polymorphism, late binding, inheritance, method overriding and method overloading, and their purposes of introducing them as a method of programming.  know the purpose and usage of Java keywords  implements ,  extends ,  super ,  instanceof , and  @Override  understand Java concepts of arrays, enhanced  for  loop, method signature,  Object  class, and object equality.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec2/index.html#type-safety",
            "text": "Recall that the  type  of a variable tells the compiler how to interpret the bits that represent the value of a variable and how to manipulate the variable.  The compiler also uses the type to decide how much memory is allocated for each variable.    Some languages are stricter in terms of type \"compatibility\" than others.  C compilers, however, are not very strict.  If it detects something strange with the type you used, it will issue a warning, but still let your code compiles and run.  Take:  1\n2\n3\n4\n5 #include   <stdio.h>  int   main ()  { \n     printf ( \"%d \\n \" ,   \"cs2030\" );  }    In Line 4, we treat the address to a string as integer.  This generates a compiler's warning.  In C, you can  type cast  a variable from one type into another, i.e., force the compiler to treat a variable of one type as another type.  The compiler would listen and do that for you.  The following code would print out gibberish and would compile perfectly without error.  1\n2\n3\n4\n5 #include   <stdio.h>  int   main ()  { \n     printf ( \"%d \\n \" ,   ( int ) \"cs2030\" );  }    Such flexibility and loose rules for type compatibility could be useful, if you know what you are doing, but for most programmers, it could be a major source of unintentional bugs, especially if one does not pay attention to compiler's warning or one forces the warning to go away without fully understanding what is going on.  Java is very strict when it comes to type checking, and is one of the  type-safe  languages. Java ensures that basic operations (such as  + ,  - , etc) and method calls apply to values in a way that makes sense.  If you try to pull the same trick as above, you will receive an error:    Java Primitive Data Types  Java supports eight  primitive  data types:  byte ,  short ,  int ,  long ,  float ,  double ,  boolean  and  char .  If you are familiar with C, these data types should not be foreign to you.  One important difference is that a  char  variable stores a 16-bit Unicode character, not an 8-bit character like in C.  Java uses  byte  for that.  The other notable difference is that Java defines  true  and  false  as possible value to a  boolean , unlike C which uses  0  for false and non- 0  for true.    You can read all about Java  variables  and  primitive data types  in Oracle's Java Tutorial.",
            "title": "Type Safety"
        },
        {
            "location": "/lec2/index.html#enforcing-abstraction-barrier-with-interface",
            "text": "Recall the concept of encapsulation. When we develop a large piece of software, it is important to hide the details about data representation and implementation, and only exposes certain  public  methods for the users to use.  We imagine that there is an abstraction barrier between the code that implements the internals of a class (called the  implementer ) and the code that uses the class (called the  user ) to achieve a higher level task.  We have seen that we use  private  to enforce data hiding -- to hide certain fields and methods from outside of the barrier.  Now, we are going to see how we enforce that the right set of methods are defined, implemented, and used on both sides of the barrier.  The mechanism to do this is through defining an  interface  (aka a  protocol  as it is called in Objective-C or Swift).  An interface is kinda like a contract between the implementer of a class and the user of a class.  If a class promises to implement an interface, then we are guaranteed that the methods defined in the interface are implemented in the class as it is promised.  Otherwise, the code would not compile.  In Java, we can define an interface using  interface  keyword:  1\n2\n3\n4\n5 interface   GeometricShape   { \n     public   double   getArea (); \n     public   double   getPerimeter (); \n     public   boolean   contains ( Point   p );  }    The example interface  GeometricShape  above contains only the declaration of the methods, not the implementation.    Now, let's see how the implementer would implement a class using the interface.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 import   java.lang.Math ;  class   Circle   implements   GeometricShape   { \n     private   Point   center ; \n     private   double   radius ; \n\n     public   Circle ( Point   initCenter ,   double   initR )   { \n         center   =   initCenter ; \n         radius   =   initR ; \n     } \n\n     void   moveTo ( Point   p )   { \n         center   =   p ; \n     } \n\n     @Override \n     public   double   getArea ()   { \n         return   Math . PI * radius * radius ; \n     } \n\n     @Override \n     public   boolean   contains ( Point   p )   { \n         return   ( p . distance ( center )   <   radius ); \n     } \n\n     @Override \n     public   double   getPerimeter ()   { \n         return   Math . PI * 2 * radius ; \n     }  }    This is very similar to the code you saw in Lecture 1 and Exercise 1, except that in Line 2, we say that  class   Circle   implements   GeometricShape .  This line informs the compiler that the programmer intends to implement all the methods included in the interface  GeometricShape  exactly as declared (in terms of names, the number of arguments, the types of arguments, returned type, and access modifier).  The rest of the class is the same, except that we renamed  getCircumference  with  getPerimeter , which is more general and apply to all shapes.  You will also see that we added  annotations  to our code by adding the line  @Override  before methods in  Circle  that implements the methods declared in  GeometricShape .  This annotation is optional, but it informs our intention to the compiler and helps make the intention of the programmer clearer to others who read the code.   Java Annotation  Annotations are metadata we add that is not part of the code.  Annotation does not affect execution.  They are useful to compilers and other software tools, as well as humans who read the code.  While we can similarly make the code more human-friendly with comments, an annotation is structured and so can be easily parsed by software.   @Override  is probably going to be the only annotation useful for us in this class.   Note that we can have other methods (such as  moveTo ) in the class beyond what is promised in the interface the class implements.  A class can implement more than one interfaces.  For instance, let's say that we have another interface called  Printable [^1] with a single method defined:  1\n2\n3 interface   Printable   { \n     public   void   print ();  }    The implementer of  Circle  wants to inform the users that the method  void print()  is implemented, it can do the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 class   Circle   implements   GeometricShape ,   Printable   { \n      : \n      : \n      @Override \n      public   void   print ()   { \n          System . out . printf ( \"radius: %f\\n\" ,   radius ); \n          System . out . printf ( \"center:\" ); \n          center . print (); \n      }  }    In the above, we call  print()  on the  Point  object as well.  How do we know that  Point  provides a  print()  method?  Well, we can read the implementation code of  Point , or we can agree with the implementer of  Point  that  Point  provides a  Printable  interface!    It is important to know that,  interface  provides a  syntactic  contract on the abstraction barrier, but it does not provide a  semantic  contract.  It does not, for instance, guarantee that  print()  actually prints something to the screen.  One could still implement interface  Printable  as follows:  1\n2\n3\n4\n5\n6\n7 class   Circle   implements   GeometricShape ,   Printable   { \n      : \n      : \n      @Override \n      public   void   print ()   { \n      }  }    and the code still compiles!  Not all programming languages that support classes support interface.  Javascript and Python, for instance, does not support similar concepts.",
            "title": "Enforcing Abstraction Barrier with Interface"
        },
        {
            "location": "/lec2/index.html#interface-as-types",
            "text": "In Java, an interface is a type.  What this means is that:   We can declare a variable with an interface type, such as: 1      GeometricShape   circle ;   \nor 1      Printable   circle ;   \nWe cannot, however, instantiate an object from an interface\nsince an interface is a \"template\", an \"abstraction\", and does not have an implementation.  For instance:   1\n2\n3\n4      // this is not OK \n     Printable   p   =   new   Printable (); \n     // this is OK \n     Printable   circle   =   new   Circle ( new   Point ( 0 ,   0 ),   10 );      Similarly, we can pass arguments of an interface type into a method, and the return type of a method can be an interface.    An object can be an instance of multiple types.  Recall that Java is a statically typed language. We associate a type with a variable.  We can assign a variable to an object if the object is an instance of the type of the variable.  Line 4 above, for instance, creates a new circle, which is an instance of three types:  Circle ,  GeometricShape , and  Printable .  It is ok to assign this new circle to a variable of type  Printable .    We can now do something cool like this: 1\n2\n3\n4\n5\n6\n7      Printable []   objectsToPrint ; \n       : \n       // initialize array objectsToPrint \n     : \n     for   ( Printable   obj :   objectsToPrint )   { \n         obj . print (); \n     }    Let's look at this code in more details.  Line 1 declares an array of objects of type  Printable .  We skip over the code to initialize the content of the array for now, and\njump to Line 5-7, which is a  for  loop.  Line 5 declares a loop variable  obj  of type  Printable  and loops through all objects in the array  objectsToPrint , and Line 6 invoke the method  print  of  obj .   Array and For Loops in Java  See Oracle's tutorial on  array  and  enhanced loop   The magic happens in Line 6:   First, since we now that any object in the array has the type  Printable , this means that they must implement the  Printable  interface and support the method  print() .    Second, we do not know, and we do not  need  to know which class an object is an instance of.  Third, we can actually have objects of completely unrelated classes in the same array. We can have objects of type  Circle , and objects of type  Point .  We can have objects of type  Factory , or objects of type  Student , or objects of type  Cushion .  As long as the objects implement the  Printable  interface, we can put them into the same array.  Forth, at  run time , Java looks at  obj , and determines its class, and invoke the right implementation of  print()  corresponding to the  obj .  That is, if  obj  is an instance of a class  Circle , then it will call  print()  method of  Circle ; if  obj  is an instance of a class  Point , then it will call  print()  method of  Point , and so on.   To further appreciate the magic that happens in Line 6, especially the last point above, consider how function call is done in C.  In C, you cannot have two functions of the same name within the same scope, so if you call a function  print() , you know exactly which set of instructions will be called 1 .  So, the name  print  is bound to the corresponding set of instructions at compilation time.  This is called  static binding  or  early binding .\nTo have  print()  for different types, we need to name them differently to avoid naming conflicts: e.g.,  print_point() ,  print_circle() .  In a language with static binding, suppose you want to mix objects of different types\ntogether in an array, you need to do something like the following pseudocode: 1\n2\n3\n4\n5\n6\n7\n8\n9     for   each   object   in   the   array \n        if   object   is   a   point \n            print_point ( object ) \n        else   if   object   is   a   circle \n            print_circle ( object ) \n        else   if   object   is   a   square \n            print_square ( object ) \n            : \n            :    Not only is the code verbose and ugly, if you want to define a new compound data type that supports printing, you need to remember to come to this place and add in a new condition and call the corresponding print function.  In OO languages, you can have methods named  print()  implemented differently in different classes.  When we compile the code above, the compiler will have no way to know which implementation will be called.  The bindings of  print()  to the actual set of instructions will only be done at run time, after  obj  is instantiated from a class.  This is known as  dynamic binding , or  late binding , or  dynamic dispatch .   If you understand how an object is represented internally, this is not so magical after all.  Referring to the figure above, the array  objectsToPrint[]  contains an array of references to objects, the first one is a  Circle  object, and the next two are  Point  objects.  When  obj.print()  is invoked, Java refers to the method table, which points to either the method table for  Circle  or for  Point , based on the class the object is an instance of.  This behavior, which is common to OO programming languages, is known as  polymorphism 2 .",
            "title": "Interface as Types"
        },
        {
            "location": "/lec2/index.html#dry-dont-repeat-yourself",
            "text": "With the interface  GeometricShape , we can implement other classes, such as  Rectangle ,  Square ,  Polygon  with the same interface.  For instance,  1\n2\n3 class   Square   implements   GeometricShape ,   Printable   { \n          // left as exercise (See Exercise 2)  }    So far, we have been treating our shapes as pure geometric objects.  Let's consider an application where we want to paint the shapes.  Each shape should have a fill color and a border (with color and thickness).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   java.awt.Color ; \n     :  class   PaintedCircle   implements   GeometricShape ,   Printable   { \n   private   Color    fillColor ; \n     private   Color    borderColor ; \n     private   double   borderThickness ; \n\n     public   void   fillWith ( Color   c )   { \n         fillColor   =   c ; \n     } \n\n     public   void   setBorderThickness ( double   t )   { \n         borderThickness   =   t ; \n     } \n\n     public   void   setBorderColor ( Color   c )   { \n         borderColor   =   c ; \n     } \n\n     // other methods and fields for Circle from before  }    In the code above, we added the line  import   java.awt.Color  to use the  Color class  that Java provides, and added three private members as well as their setters.  We can do the same for  Square   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   java.awt.Color ; \n     :  class   PaintedSquare   implements   GeometricShape ,   Printable   { \n   private   Color    fillColor ; \n     private   Color    borderColor ; \n     private   double   borderThickness ; \n\n     public   void   fillWith ( Color   c )   { \n         fillColor   =   c ; \n     } \n\n     public   void   setBorderThickness ( double   t )   { \n         borderThickness   =   t ; \n     } \n\n     public   void   setBorderColor ( Color   c )   { \n         borderColor   =   c ; \n     } \n\n     // other methods and fields written for Square  }    and for other shapes.  Great!  We now have colorful shapes.  The code above, however, is not  good  code, even though it is  correct .  Consider what would need to be done if say, we decided to support border styles (dotted border, solid border, dashed border, etc).  We would have to edit every single class that supports colors and borders.!  One principle that we can follow is the  abstraction principle , which says \"Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.\" 3  Following the principle, we want to implement these style-related fields and methods in just one place.  But where?",
            "title": "DRY - Don't Repeat Yourself"
        },
        {
            "location": "/lec2/index.html#inheritance",
            "text": "The OO-way to do this is to create a  parent class , and put all common fields and methods into the parent.  A parent class is defined just like a normal class.  For instance:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 class   PaintedShape   { \n   private   Color    fillColor ; \n     private   Color    borderColor ; \n     private   double   borderThickness ; \n\n   public   PaintedShape ( Color   initFillColor ,   Color   initBorderColor ,   double   initBorderThickness )   { \n         fillColor   =   initFillColor ; \n         borderColor   =   initBorderColor ; \n         borderThickness   =   initBorderThickness ; \n     } \n\n     public   void   fillWith ( Color   c )   { \n         fillColor   =   c ; \n     } \n\n     public   void   setBorderThickness ( double   t )   { \n         borderThickness   =   t ; \n     } \n\n     public   void   setBorderColor ( Color   c )   { \n         borderColor   =   c ; \n     }  }    The  PaintedCircle  class,  PaintedSquare  class, etc, can now  inherits  non-private fields and methods from the parent class, using the  extends  keyword.  1\n2\n3\n4\n5\n6\n7 class   PaintedCircle   extends   PaintedShape   implements   GeometricShape ,   Printable   { \n       :  }  class   PaintedSquare   extends   PaintedShape   implements   GeometricShape ,   Printable   { \n       :  }    This mechanism for a class to inherit the properties and behavior from a parent is called  Inheritance , and is the forth and final basic OO principles we cover 4 .  With inheritance, we do not have to repeat the declaration of fields  fillColor ,  borderColor ,  borderThickness  and the associated methods in them.  This software engineering principle is also known as the DRY principle -- \" don't repeat yourself \" principle.  We are going to see DRY again and again in future lectures.  We also call the  PaintedShape  the superclass (or base class) of  PaintedCircle  and  PaintedSquare , and call  PaintedCircle  and  PaintedSquare  the subclass (or derived class) 5  of  PaintedShape .  A  PaintedCircle  object can now call  fillWith()  even if the method  fillWith()  is not defined in  PaintedCircle  -- it is defined in  PaintedCircle 's parent  PaintedShape .    Now consider the constructor for  PaintedCircle .   We need to initialize the geometric shape as well as the painting style.  But, we define the fields  fillColor , etc  private , and subclasses have no access to  private  fields in the parent.  We need to call the constructor of the parent to initialize these private fields.  The way to do this is to use the  super  keyword, like such:  1\n2\n3\n4\n5    public   PaintedCircle ( Point   initCenter ,   double   initRadius ,   Color   initFillColor ,   Color   initBorderColor ,   double   initBorderThickness )   { \n         super ( initFillColor ,   initBorderColor ,   initBorderThickness ); \n         c   =   initCenter ; \n         r   =   initRadius ; \n     }    You can see that the constructor for  PaintedCircle  now takes in five parameters.  You can imagine that as the class get more sophisticated with more fields, we need to pass in more parameters to the class to initialize the fields.  It is not uncommon to provide alternative constructors with fewer parameters and assign some  default  values to the fields.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13    // create circle with default style (white with black border of thickness 1) \n   public   PaintedCircle ( Point   initCenter ,   double   initRadius )   { \n       super ( Color . WHITE ,   Color . BLACK ,   1.0 ); \n       c   =   initCenter ; \n       r   =   initRadius ; \n   } \n\n     // create circle with customized styles   \n   public   PaintedCircle ( Point   initCenter ,   double   initRadius ,   Color   initFillColor ,   Color   initBorderColor ,   double   initBorderThickness )   { \n         super ( initFillColor ,   initBorderColor ,   initBorderThickness ); \n         c   =   initCenter ; \n         r   =   initRadius ; \n     }    Two methods in a class can have the same name and still co-exist peacefully together.  This is called  overloading .  When a method is called, we look at the  signature  of the method, which consists of (i) the name of the method, (ii) the number, order, and type of the arguments, to determine which method is called.  To be precise, the first sentence of this paragraph should read: Two methods in a class can have the same name and still co-exist peacefully together, as long as they have different signatures.  Note that the return type is not part of the method signature, so you cannot have two methods with the same name and same arguments but different return type.    Even though the example above shows overloading of the constructor, we can overload other methods as well.",
            "title": "Inheritance"
        },
        {
            "location": "/lec2/index.html#java-object-class",
            "text": "In Java, every class inherits from the  class  Object  implicitly.  The  Object  class defines many useful methods that are common to all objects.  The two useful ones are :   equals(Object obj) , which checks if two objects are equal to each other, and  toString() , which returns a string representation of the object, and is a better way to print an object than the  print()  method and  Printable  interface we write 6 .   The  equals()  method as implemented in  Object , only compares if two object references refer to the same object In the Figure below, we show an array  circles  with three  Circle  objects.  All three circles are centered at (0, 0) with radius 10.  They are created as follows:  1\n2\n3\n4      Circle []   circles   =   new   Circle [ 3 ]; \n     circles [ 0 ]   =   new   Circle ( new   Point ( 0 ,   0 ),   10 ); \n     circles [ 1 ]   =   new   Circle ( new   Point ( 0 ,   0 ),   10 ); \n     circles [ 2 ]   =   circles [ 1 ];    When you check  circles[0].equals(circles[1]) , however, it returns  false , because even though  circles[0]  and  circles[1]  are semantically the same, they refer to the two different objects.  Calling  circles[1].equals(circles[2])  returns  true , as they are referring to the same object.     What if you need a method that compares if two circles are semantically the same?  You can implement your own method, say  isTheSameCircle(Circle c) .  But, the  equals()  method is universal (all classes inherits this method) and is used by other classes for equality tests.  So, in most cases, we can implement a method called  equals()  with the same signature with the semantic that we want 7 .  That's right.  Even though we cannot have two methods with the same signature in the same class, we can have two methods with the same signature, one in the superclass (or the superclass's superclass, and so on), one in the subclass.  The method in the subclass will override the method in the superclass.  For example,   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11      class   Circle   implements   Shape ,   Printable   { \n      : \n          @Override \n          public   boolean   equals ( Object   obj )   { \n              if   ( obj   instanceof   Circle )   { \n                  Circle   circle   =   ( Circle )   obj ; \n                  return   ( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n              }   else \n                return   false ; \n          } \n     }    Line 7 above compares if the two center points are equals, and the two radius values are equals.  So, we compare if the two circles are semantically the same.  The rest of this code requires some explanation:   Line 3 uses the same  @Override  annotation that we have seen before -- we are telling the compilers that we are overriding a method in the superclass.  Line 4 declares the method  equals , and note that it has to have exactly the same signature as the  equals()  method we are overriding.  Even though we meant to compare two  Circle  objects, we cannot declare it as  public boolean equals(Circle circle) , since the signature is different and the compiler would complain.  Since  obj  is of an  Object  type, we can actually pass in any object to compare with a  Circle .  Line 5 checks if the comparison makes sense, by checking if  obj  is instantiated from a  Circle  class, using the  instanceof  keyword.  If  obj  is not even a  Circle  object, then we simply return  false .  If  obj  is an instance of  Circle , we assign  obj  to a variable of type  Circle , and compare as in Line 7.   For the code above to work, we have to override the  equals  method of  Point  as well.  That is left as an exercise.  One final note: polymorphism works here as well.  If we have an object reference  obj  of type  Object  that refers to an instance of a  Circle , calling  obj.equals()  will invoke the  equals()  method of  Circle , not  Object , just like the case of interfaces.      Remember a function is just an abstraction over a set of instructions.\u00a0 \u21a9    In biology, polymorphism means that an organism can have many different forms.\u00a0 \u21a9    This principle is formulated by Benjamin C. Pierce in his book  Types and Programming Languages .\u00a0 \u21a9    The other three is encapsulation, abstraction, and polymorphism.\u00a0 \u21a9    Again, you see that computer scientist can be quite indecisive when it comes to the terminologies in OOP.\u00a0 \u21a9    We leave this for another lesson on another day.  \u00a0 \u21a9    If you override  equals()  you should generally override  hashCode()  as well, but let's leave that for another lesson on another day.\u00a0 \u21a9",
            "title": "Java Object class"
        },
        {
            "location": "/lec3/index.html",
            "text": "Lecture 3: Inheritance, Continued\n\n\nLearning Objectives\n\n\nAt the end of this lecture, students should\n\n\n\n\nbe familiar with how Java dispatches methods that have been overridden\n\n\nappreciate the usefulness of overriding \nequals\n and \ntoString\n in the \nObject\n class\n\n\nbe exposed to the \nString\n class and its associated methods, especially the \n+\n operator\n\n\nbe aware that inheritance can be abused to provide bad code\n\n\nunderstand the differences between HAS-A and IS-A relationship\n\n\nbe able to use composition to model classes with HAS-A relationship\n\n\nbe able to use inheritance to model classes with IS-A relationship\n\n\nunderstand the Liskov Substitution Principle and thus be aware that not all IS-A relationship should be modelled with inheritance\n\n\nunderstand the purposes of the Java keywords \nthis\n, \nfinal\n, \nabstract\n and \ndefault\n\n\n\n\nMethod Overriding\n\n\nDuring Lecture 2, I introduced the concept of inheritance.  Today, let's go deeper into how inheritance and its associated concepts work.\n\n\nConsider the class \nCircle\n, which inherits from \nObject\n.  We have seen that \nObject\n defines some non-private methods, which can be inherited by \nCircle\n.\nThese methods will be made available in the \nCircle\n class.  In the internal representation of the class, the methods will be made available in the method table of \nCircle\n.  You can view the fields and methods of class \nCircle\n as containing the fields and methods of \nObject\n, followed by fields and methods defined in \nCircle\n.\n\n\nThe figure below illustrates this.  I use a slightly darker green to represent the methods implemented in the \nObject\n class, and light green to represent methods implemented in the \nCircle\n class.\n\n\n\n\nRecall that when a class implements an interface, an instance of that class can take on the type of that interface.  Similarly, when a class inherits from a parent class, an instance of that class can take on the type of the parent class.  So, we can do the following:\n\n\n1\n2\nCircle\n \nc\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\nObject\n \no\n \n=\n \nc\n;\n\n\n\n\n\n\n\nLine 2 assigns the circle object \nc\n to \no\n of type \nObject\n.  So, both \no\n and \nc\n are referring to the same objects.  Due to type checking at compile time, however, Java does not allow methods and fields in the subclass (e.g., \nCircle\n) that is not in the superclass (e.g., \nObject\n) to be called.  In this example, only the methods known to \nObject\n can be accessed by \no\n.\n\n\nNow, consider what would happen if we override the method \nequals()\n from the \nObject\n class.  This is what we did in the last lecture.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n    \nclass\n \nCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n         \n@Override\n\n         \npublic\n \nboolean\n \nequals\n(\nObject\n \nobj\n)\n \n{\n\n             \nif\n \n(\nobj\n \ninstanceof\n \nCircle\n)\n \n{\n\n                 \nCircle\n \ncircle\n \n=\n \n(\nCircle\n)\n \nobj\n;\n\n                 \nreturn\n \n(\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n             \n}\n \nelse\n\n               \nreturn\n \nfalse\n;\n\n         \n}\n\n    \n}\n\n\n\n\n\n\n\n\n\nEquality for Point\n\n\nRecall that we override \nequals\n because we want to compare the content of the two circles, instead of comparing if two circle references point to the same object.  For the implementation above to be correct, we need to override the \nequals\n function for the \nPoint\n class as well.  This is not shown in class and left as an exercise.\n\n\n\n\nThe method table will update the entry for \nequals()\n to point to the implementation provided by the \nCircle\n class, instead of the \nObject\n class.\n\n\n\n\nNow, consider what would happen if we \noverload\n the method \nequals()\n with one that takes in a \nCircle\n object.  I also throw in a couple of \nSystem.out.print()\n to help us figure out what is going on.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n    \nclass\n \nCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n         \n@Override\n\n         \npublic\n \nboolean\n \nequals\n(\nObject\n \nobj\n)\n \n{\n\n             \nSystem\n.\nout\n.\nprint\n(\n\"equals(Object) called\\n\"\n);\n\n             \nif\n \n(\nobj\n \ninstanceof\n \nCircle\n)\n \n{\n\n                 \nCircle\n \ncircle\n \n=\n \n(\nCircle\n)\n \nobj\n;\n\n                 \nreturn\n \n((\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n             \n}\n \nelse\n\n               \nreturn\n \nfalse\n;\n\n         \n}\n\n\n         \npublic\n \nboolean\n \nequals\n(\nCircle\n \ncircle\n)\n \n{\n\n             \nSystem\n.\nout\n.\nprint\n(\n\"equals(Circle) called\\n\"\n);\n\n             \nreturn\n \n((\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n         \n}\n\n    \n}\n\n\n\n\n\n\n\nSince this new \nequals()\n method does not override the method in \nObject\n, it gets its own slot in the method table of \nCircle\n, instead of reusing one from the \nObject\n.\n\n\n\n\nNow, consider which version of \nequals\n are called by the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nCircle\n \nc1\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\nCircle\n \nc2\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\nObject\n \no1\n \n=\n \nc1\n;\n\n\nObject\n \no2\n \n=\n \nc2\n;\n\n\n\no1\n.\nequals\n(\no2\n);\n\n\no1\n.\nequals\n((\nCircle\n)\no2\n);\n\n\no1\n.\nequals\n(\nc2\n);\n\n\nc1\n.\nequals\n(\no2\n);\n\n\nc1\n.\nequals\n((\nCircle\n)\no2\n);\n\n\nc1\n.\nequals\n(\nc2\n);\n\n\n\n\n\n\n\nLines 6-9 call \nequals(Object)\n defined in \nCircle\n\uff0c while Lines 10-11 call \nequals(Circle)\n defined in \nCircle\n.  Let's look at why for each one:\n\n\n\n\nLine 6 calls \nequals\n of an \nObject\n object on an \nObject\n object.  Java checks through all methods defined in \nObject\n, and finds a method that matches the signature, which is the \nequals(Object)\n (which \nCircle\n has overridden). This is the one that will get called.\n\n\nLine 7-8 call \nequals\n of an \nObject\n object on a \nCircle\n object.  Java checks through all methods defined in \nObject\n, and finds one method that matches the signature, which is \nequals(Object)\n (which \nCircle\n has overridden).  Even though there is another method \nequals(Circle)\n defined, it is defined as part of the \nCircle\n class, which Java refuses to access because \no1\n is declared to have the type \nObject\n.  Since the only method that Java can find has an argument of type \nObject\n, the argument is cast as an \nObject\n when \nequals\n is invoked.\n\n\nLine 9 calls \nequals\n of a \nCircle\n object on an \nObject\n object.  Java finds a method with matching signature, \nequals(Object)\n, and invokes that.\n\n\nFinal 10-11 calls \nequals\n of a \nCircle\n object on a \nCircle\n object.  Java finds a method with matching signature, \nequals(Circle)\n, and invokes that.\n\n\n\n\nAnother question that came up is why we need to override \nequals\n in \nObject\n, rather than just using the \nCircle\n-specific \nequals(Circle)\n.  As shown above, only when an object declared as \nCircle\n calls \nequals\n on another \nCircle\n object, the \nCircle\n-specific \nequals(Circle)\n is invoked.  \n\n\nTo write code that is general and reusable, we should exploit OO polymorphism, that means different subclasses of \nObject\n implement their own customized version of \nequals\n, and the right version of \nequals\n will be called.\n\n\nOne example of where this is called the \ncontains(Object)\n method from class \nArrayList\n (we will cover this later in class), which checks if an object is already in the list, and to check this, it checks for equality of the given object with every object in the \nArrayList\n, by calling \nequals(Object)\n.\n\n\nWe now turn our attention to another method in \nObject\n that we could override, the \ntoString()\n method.  \ntoString()\n is called whenever the \nString\n representation of an object is needed.  For instance, when we try to print an object.   By default, the \ntoString\n of \nObject\n simply prints the name of the class, followed by \n@\n, followed by the reference.   It is often useful to override this to include the content of the object as well, for debugging and logging purposes.  This is a much more useful and flexible than writing our own \nprint()\n method as we have seen in earlier lectures, since we are not limited to printing to standard output anymore.\n\n\n\n\njava.lang.String\n\n\nString\n is one of many useful classes provided by Java.  You can skim through to see what methods are available and keep the \nAPI reference\n handy.\n\n\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nPoint\n \n{\n\n    \n:\n\n    \npublic\n \nString\n \ntoString\n()\n \n{\n\n        \nreturn\n \n\"(\"\n \n+\n \nx\n \n+\n \n\",\"\n \n+\n \ny\n \n\")\"\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nNow, if we run:\n\n1\n2\nPoint\n \np\n \n=\n \nnew\n \nPoint\n(\n0\n,\n0\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\np\n);\n\n\n\n\n\n\nIt should print \n(0,0)\n instead of \nPoint\n@1235\nde\n.\n\n\nThe ability to override methods that you inherit from a parent, including root class \nObject\n, makes overriding an extremely powerful tool.  It allows you to change how existing libraries behave, and customize them to your classes, without changing a single line of their code or even has access to their code!\n\n\nAs Uncle Ben said, \"With great power, comes great responsibility.\"  We must use overriding and inheritance carefully.  Since we can affect how existing libraries behave, we can easily break existing code and introduce bugs.  Since you may not have access to these existing code, it is often tricky to trace and debug.  \n\n\nModeling HAS-A Relationship\n\n\nInheritance in OO tends to get overused.  In practice, we seldom use inheritance.  Let's look at some examples of how \nnot\n to use inheritance, and why.\n\n\nYou may come across examples online or in books that look like the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nPoint\n \n{\n\n    \nprotected\n \ndouble\n \nx\n;\n\n    \nprotected\n \ndouble\n \ny\n;\n\n      \n:\n\n\n}\n\n\n\nclass\n \nCircle\n \nextends\n \nPoint\n \n{\n\n    \nprotected\n \ndouble\n \nradius\n;\n\n      \n:\n\n\n}\n\n\n\nclass\n \nCylinder\n \nextends\n \nCircle\n \n{\n\n    \nprotected\n \ndouble\n \nheight\n;\n\n      \n:\n\n\n}\n\n\n\n\n\n\n\n\n\nProtected fields\n\n\nThe example above have been changed after the class to clarify the access modifier appropriate for this example.  See After Note below for details.\n\n\n\n\nCircle\n implemented like the above would have the center coordinate inherited from the parent (so it has three fields, x, y, and radius), and \nCylinder\n would have the fields corresponding to a circle, which is its base, and the height.  So, we are \nreusing\n the fields and the code related to initializing and manipulating the fields.\n\n\nWhen we start to consider methods encapsulated with each object, things start to get less intuitive.  What does \ngetPerimeter()\n and \ngetArea()\n of \nCylinder\n means?  How about \ndistanceTo\n between a \nCylinder\n and a \nPoint\n?   What is the meaning of a \nCircle\n containing a \nCylinder\n?\n\n\nThe inheritance hierarchy above actually models the HAS-A relationship: A circle has a center (which is a point), a cylinder has a base which is a circle.  Therefore, a better way to capture the relationship between the three types of objects is through \ncomposition\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nclass\n \nPoint\n \n{\n\n    \ndouble\n \nx\n;\n\n    \ndouble\n \ny\n;\n\n      \n:\n\n\n}\n\n\n\nclass\n \nCircle\n \n{\n\n    \nPoint\n \ncenter\n;\n\n    \ndouble\n \nradius\n;\n\n      \n:\n\n\n}\n\n\n\nclass\n \nCylinder\n \n{\n\n    \nCircle\n \nbase\n;\n\n    \ndouble\n \nheight\n;\n\n      \n:\n\n\n}\n\n\n\n\n\n\n\nComposition allows us to build more complex classes from simpler ones, and is usually favored over inheritance.  \n\n\nThe \nPaintedShape\n class from Lecture 2, for instance, could be modeled as a composition of a \nStyle\n object and \nGeometricShape\n object.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nStyle\n \n{\n\n    \nColor\n \nfillColor\n;\n\n    \nColor\n \nborderColor\n;\n\n      \n:\n\n\n}\n\n\n\nclass\n \nPaintedShape\n \n{\n\n    \nStyle\n \nstyle\n;\n\n    \nGeometricShape\n \nshape\n;\n\n      \n:\n\n    \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n        \nreturn\n \nshape\n.\ngetArea\n();\n\n    \n}\n\n    \n:\n\n    \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n        \nstyle\n.\nfillWith\n(\nc\n);\n\n    \n}\n\n      \n:\n\n\n}\n\n\n\n\n\n\n\nThe design above is also known as the \nforwarding\n -- calls to methods on \nPaintedShape\n gets forwarded to either \nStyle\n or \nGeometricShape\n objects.\n\n\nModeling IS-A Relationship\n\n\nA better situation to use inheritance is to model a IS-A relationship: when the subclass behaves just like parent class, but has some additional behaviors.  For instance, it is natural to model a \nPaintedCircle\n as a subclass of \nCircle\n -- since a PaintedCircle has all the behavior of \nCircle\n, but has \nadditional\n behaviors related to being painted.\n\n\n1\n2\n3\n4\nclass\n \nPaintedCircle\n \nextends\n \nCircle\n \n{\n\n    \nStyle\n \nstyle\n;\n\n      \n:\n\n\n}\n\n\n\n\n\n\n\nA more tricky situation for modeling a IS-A relationship occurs when the subclass behaves just like the parent class \nmost\n of the time, but is slightly different than the parent's behavior.  Consider how do we model a rectangle and a square.  Normally, we consider a square IS-A special case of rectangle.  So, we could model as:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nRectangle\n \n{\n\n    \ndouble\n \nwidth\n,\n \nheight\n;\n\n    \nPoint\n \ntopLeft\n;\n\n    \nRectangle\n(\nPoint\n \ntopLeft\n,\n \nin\n \nwidth\n,\n \nint\n \nheight\n)\n \n{\n\n        \nthis\n.\ntopLeft\n \n=\n \ntopLeft\n;\n\n        \nthis\n.\nwidth\n \n=\n \nwidth\n;\n\n        \nthis\n.\nheight\n \n=\n \nheight\n;\n\n    \n}\n\n\n}\n\n\n\nclass\n \nSquare\n \nextends\n \nRectangle\n \n{\n\n    \nSquare\n(\nPoint\n \ntopLeft\n,\n \nint\n \nwidth\n)\n \n{\n\n        \nsuper\n(\ntopLeft\n,\n \nwidth\n,\n \nwidth\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nthis\n\n\nThe \nthis\n keyword in Java that refers to the current object.\n\n\n\n\nSo far, so good.\n\n\nNow, suppose the two classes are written by two different developers.  The developer who wrote Rectangle decides to add the method \nresizeTo\n:\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nRectangle\n \n{\n\n      \n:\n\n    \nvoid\n \nresizeTo\n(\nint\n \nwidth\n,\n \nint\n \nheight\n)\n \n{\n\n        \nthis\n.\nwidth\n \n=\n \nwidth\n;\n\n        \nthis\n.\nheight\n \n=\n \nheight\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nThis developer assumes the behavior that, after calling \nresizeTo(w, h)\n, the width of the rectangle will be \nw\n and the height will be \nh\n.  He/she publishes this API, and another developer then assumes this behavior, and wrote some code, like:\n\n\n1\n2\n3\n4\nvoid\n \ndoSomething\n(\nRectangle\n \nr\n)\n \n{\n\n    \nr\n.\nresizeTo\n(\n1\n,\n \n2\n);\n\n      \n:\n\n\n}\n\n\n\n\n\nWhat should the developer who develops \nSquare\n do?  Since \nSquare\n is a subclass of rectangle, it would inherit \nresizeTo\n from its parent, but it does not make sense to call \nresizeTo\n with two different parameters.  Sure, \nSquare\n can overload \nresizeTo\n and provide a \nresizeTo\n with one parameter only, but that does not prevent someone from calling \nresizeTo\n with two parameters on a \nSquare\n.  Someone could do the following and the code would still compile and run, turning the square into a rectangle!\n\n\n1\n2\nSquare\n \ns\n \n=\n \nnew\n \nSquare\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\ns\n.\nresize\n(\n4\n,\n \n8\n);\n\n\n\n\n\n\n\nThe \nSquare\n developer can try to override \nresizeTo\n, to ignore the second parameter:\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nSquare\n \n{\n\n      \n:\n\n    \nvoid\n \nresizeTo\n(\nint\n \nwidth\n,\n \nint\n \nheight\n)\n \n{\n\n        \nthis\n.\nwidth\n \n=\n \nwidth\n;\n\n        \nthis\n.\nheight\n \n=\n \nwidth\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nThis makes more sense and would make everyone who uses \nSquare\n happy -- a square is always a square -- but it introduces an \ninconsistency\n in behavior and will likely break another part of the code the developer is totally unaware of.  The developer for \ndoSomething\n suddenly cannot assume that \nresizeTo\n works as intended and documented.\n\n\nIt is a developer's responsibility that any inheritance with method overriding does not alter the behavior of existing code.  This brings us to the Liskov Substitution Principle, which says that: \"Let \n\\(\\phi(x)\\)\n be a property provable about objects \n\\(x\\)\n of type \n\\(T\\)\n. Then \n\\(\\phi(y)\\)\n should be true for objects \n\\(y\\)\n of type \n\\(S\\)\n where \n\\(S\\)\n is a subtype of \n\\(T\\)\n.\"   This means that if \n\\(S\\)\n is a subclass of \n\\(T\\)\n, then an object of type \n\\(T\\)\n can be replaced by an object of type \n\\(S\\)\n without changing the desirable property of the program.\n\n\nIn the example above, this means that everywhere we can expect rectangles to be used, we can replace a rectangle with a square.  This was no longer true with the introduction of \nresizeTo\n method.\n\n\nPreventing Inheritance and Method Overriding\n\n\nSometimes, it is useful for a developer to explicitly prevent a class to be inherited.  Not allowing inheritance would make it much easier to argue for the correctness of programs, something important when it comes to writing secure program.  Both the two java classes you have seen, \njava.lang.Math\n and \njava.lang.String\n, cannot be inherited from.  In Java, we use the keyword \nfinal\n when declaring a class to tell Java that we ban this class from being inherited.\n\n\n1\n2\n3\nfinal\n \nclass\n \nCircle\n \n{\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nAlternatively, we can allow inheritance, but still prevent a specific method from being overridden, by declaring a method as \nfinal\n.  Usually, we do this on methods that are critical for the correctness of the class.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nCircle\n \n{\n\n   \n:\n\n    \nfinal\n \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n)\n \n{\n\n        \n:\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nfinal variable\n\n\nThe keyword \nfinal\n has another use.   When declaring a variable as \nfinal\n, just like\n    \nPI\n in \nMath\n, it prevents the variable from being modified.  In other words, the variable becomes constant.\n\n1\n    \npublic\n \nstatic\n \nfinal\n \ndouble\n \nPI\n   \n=\n \n3.141592653589793\n;\n\n\n\n\n\n\n\n\nAbstract Class and Interface with Default Methods\n\n\nWe have seen how a class can inherit from a parent class, and implement one or more interfaces.  So far, the parent class that we have seen is a \nconcrete\n class -- it has fields and methods, complete with method implementation.  Such concrete parent class can be instantiated into objects.   \n\n\nOn the other hand, we have interfaces, which is completely virtual, it declared what public methods it should provide -- together with the returned type for each method and the method signature.  There is no field and no implementation.\n\n\nBetween these two extremes, there are two other possibilities in Java:\n\n\n\n\nAn \nabstract class\n, which is just like a class, but it is declared as \nabstract\n, and some of its methods are declared as \nabstract\n, without implementation.  An abstract class cannot be instantiated, and any subclass who wish to be concrete needs to implement these abstract methods.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nabstract\n \nclass\n \nPaintedShape\n \n{\n\n    \nColor\n \nfillColor\n;\n\n      \n:\n\n  \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n        \nfillColor\n \n=\n \nc\n;\n\n    \n}\n\n    \n:\n\n    \nabstract\n \ndouble\n \ngetArea\n();\n\n    \nabstract\n \ndouble\n \ngetPerimeter\n();\n\n      \n:\n\n\n}\n\n\n\n\n\n\nAn interface with default implementation.  Introduced only in Java 8, with the goal of allowing interface to evolve, an interface can now contain implementation of the methods.  Such interface still cannot be instantiated into objects, but classes that implement such interface need not provide implementation for a method where a default implementation exists.  For instance, we can have:\n\n1\n2\n3\n4\n5\n6\n7\n    \ninterface\n \nGeometricShape\n \n{\n\n    \npublic\n \ndouble\n \ngetArea\n();\n\n    \npublic\n \ndouble\n \ngetPerimeter\n();\n\n    \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n);\n\n        \ndefault\n \npublic\n \nboolean\n \ncover\n(\nPoint\n \np\n)\n \n{\n\n            \nreturn\n \ncontains\n(\np\n);\n\n        \n}\n\n\n\n\n\nwhere \ncover\n is a new method with default implementation, denoted with keyword \ndefault\n.\n\n\n\n\nAt this point in CS2030, let's not worry about when to use abstract class or default methods in interfaces, but just be aware that they exists and understand what they mean when you come across them.  After you gain some experience writing OO programs, we will revisit these concepts so that you can better appreciate their differences and usage.\n\n\nAfter Note\n\n\nThere are a couple of points to clarify with regards to Lecture 3.\n\n\n\n\n\n\nWhen we override \nequals()\n of \nObject\n in \nCircle\n, I said \"\n\nThe method table will update the entry for \nequals()\n to point to the implementation provided by the \nCircle\n class, instead of the \nObject\n class.\n\"\nand in the figure, I showed that the code for \nCircle\n's customized \nequals\n replacing the \nequals\n for \nObject\n.  What I should have added, is that, the original implementation of \nequals\n from \nObject\n is not completely gone.  Methods from the immediate parent that have been overriden can still be called, with \nsuper\n keyword.  Here is a useful example from \nPoint\n's \ntoString()\n:\n\n1\n2\n3\n4\n@Override\n\n\npublic\n \nString\n \ntoString\n()\n \n{\n\n  \nreturn\n \nsuper\n.\ntoString\n()\n \n+\n \n\" (\"\n \n+\n \nx\n \n+\n \n\",\"\n \n+\n \ny\n \n+\n \n\")\"\n;\n\n\n}\n\n\n\n\n\nwhich prefix the string representation of Point with the class and reference address.\n\n\n\n\n\n\nIn the example where we inherit \nCylinder\n from \nCircle\n, and \nCircle\n from \nPoint\n, what should the access modifier of the fields, \nx\n,\ny\n, and \nradius\n be?   If they are declared \nprivate\n, then \nCircle\n has no access to \nx\n and \ny\n; \nCylinder\n has no access to \nx\n,\ny\n, and \nradius\n.  If they are declared \npublic\n, then they are accessible by everyone, breaking the abstraction barrier!  Fortunately, Java has just the right access modifier for this situation: \nx\n, \ny\n, and \nradius\n should be declared as \nprotected\n.  A \nprotected\n field is less restrictive than \npublic\n, and is accessible by subclass but is not accessible by the whole world.",
            "title": "3. Inheritance, Continued"
        },
        {
            "location": "/lec3/index.html#lecture-3-inheritance-continued",
            "text": "",
            "title": "Lecture 3: Inheritance, Continued"
        },
        {
            "location": "/lec3/index.html#learning-objectives",
            "text": "At the end of this lecture, students should   be familiar with how Java dispatches methods that have been overridden  appreciate the usefulness of overriding  equals  and  toString  in the  Object  class  be exposed to the  String  class and its associated methods, especially the  +  operator  be aware that inheritance can be abused to provide bad code  understand the differences between HAS-A and IS-A relationship  be able to use composition to model classes with HAS-A relationship  be able to use inheritance to model classes with IS-A relationship  understand the Liskov Substitution Principle and thus be aware that not all IS-A relationship should be modelled with inheritance  understand the purposes of the Java keywords  this ,  final ,  abstract  and  default",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec3/index.html#method-overriding",
            "text": "During Lecture 2, I introduced the concept of inheritance.  Today, let's go deeper into how inheritance and its associated concepts work.  Consider the class  Circle , which inherits from  Object .  We have seen that  Object  defines some non-private methods, which can be inherited by  Circle .\nThese methods will be made available in the  Circle  class.  In the internal representation of the class, the methods will be made available in the method table of  Circle .  You can view the fields and methods of class  Circle  as containing the fields and methods of  Object , followed by fields and methods defined in  Circle .  The figure below illustrates this.  I use a slightly darker green to represent the methods implemented in the  Object  class, and light green to represent methods implemented in the  Circle  class.   Recall that when a class implements an interface, an instance of that class can take on the type of that interface.  Similarly, when a class inherits from a parent class, an instance of that class can take on the type of the parent class.  So, we can do the following:  1\n2 Circle   c   =   new   Circle ( new   Point ( 0 , 0 ),   10 );  Object   o   =   c ;    Line 2 assigns the circle object  c  to  o  of type  Object .  So, both  o  and  c  are referring to the same objects.  Due to type checking at compile time, however, Java does not allow methods and fields in the subclass (e.g.,  Circle ) that is not in the superclass (e.g.,  Object ) to be called.  In this example, only the methods known to  Object  can be accessed by  o .  Now, consider what would happen if we override the method  equals()  from the  Object  class.  This is what we did in the last lecture.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11      class   Circle   implements   Shape ,   Printable   { \n      : \n          @Override \n          public   boolean   equals ( Object   obj )   { \n              if   ( obj   instanceof   Circle )   { \n                  Circle   circle   =   ( Circle )   obj ; \n                  return   ( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n              }   else \n                return   false ; \n          } \n     }     Equality for Point  Recall that we override  equals  because we want to compare the content of the two circles, instead of comparing if two circle references point to the same object.  For the implementation above to be correct, we need to override the  equals  function for the  Point  class as well.  This is not shown in class and left as an exercise.   The method table will update the entry for  equals()  to point to the implementation provided by the  Circle  class, instead of the  Object  class.   Now, consider what would happen if we  overload  the method  equals()  with one that takes in a  Circle  object.  I also throw in a couple of  System.out.print()  to help us figure out what is going on.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17      class   Circle   implements   Shape ,   Printable   { \n      : \n          @Override \n          public   boolean   equals ( Object   obj )   { \n              System . out . print ( \"equals(Object) called\\n\" ); \n              if   ( obj   instanceof   Circle )   { \n                  Circle   circle   =   ( Circle )   obj ; \n                  return   (( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n              }   else \n                return   false ; \n          } \n\n          public   boolean   equals ( Circle   circle )   { \n              System . out . print ( \"equals(Circle) called\\n\" ); \n              return   (( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n          } \n     }    Since this new  equals()  method does not override the method in  Object , it gets its own slot in the method table of  Circle , instead of reusing one from the  Object .   Now, consider which version of  equals  are called by the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 Circle   c1   =   new   Circle ( new   Point ( 0 , 0 ),   10 );  Circle   c2   =   new   Circle ( new   Point ( 0 , 0 ),   10 );  Object   o1   =   c1 ;  Object   o2   =   c2 ;  o1 . equals ( o2 );  o1 . equals (( Circle ) o2 );  o1 . equals ( c2 );  c1 . equals ( o2 );  c1 . equals (( Circle ) o2 );  c1 . equals ( c2 );    Lines 6-9 call  equals(Object)  defined in  Circle \uff0c while Lines 10-11 call  equals(Circle)  defined in  Circle .  Let's look at why for each one:   Line 6 calls  equals  of an  Object  object on an  Object  object.  Java checks through all methods defined in  Object , and finds a method that matches the signature, which is the  equals(Object)  (which  Circle  has overridden). This is the one that will get called.  Line 7-8 call  equals  of an  Object  object on a  Circle  object.  Java checks through all methods defined in  Object , and finds one method that matches the signature, which is  equals(Object)  (which  Circle  has overridden).  Even though there is another method  equals(Circle)  defined, it is defined as part of the  Circle  class, which Java refuses to access because  o1  is declared to have the type  Object .  Since the only method that Java can find has an argument of type  Object , the argument is cast as an  Object  when  equals  is invoked.  Line 9 calls  equals  of a  Circle  object on an  Object  object.  Java finds a method with matching signature,  equals(Object) , and invokes that.  Final 10-11 calls  equals  of a  Circle  object on a  Circle  object.  Java finds a method with matching signature,  equals(Circle) , and invokes that.   Another question that came up is why we need to override  equals  in  Object , rather than just using the  Circle -specific  equals(Circle) .  As shown above, only when an object declared as  Circle  calls  equals  on another  Circle  object, the  Circle -specific  equals(Circle)  is invoked.    To write code that is general and reusable, we should exploit OO polymorphism, that means different subclasses of  Object  implement their own customized version of  equals , and the right version of  equals  will be called.  One example of where this is called the  contains(Object)  method from class  ArrayList  (we will cover this later in class), which checks if an object is already in the list, and to check this, it checks for equality of the given object with every object in the  ArrayList , by calling  equals(Object) .  We now turn our attention to another method in  Object  that we could override, the  toString()  method.   toString()  is called whenever the  String  representation of an object is needed.  For instance, when we try to print an object.   By default, the  toString  of  Object  simply prints the name of the class, followed by  @ , followed by the reference.   It is often useful to override this to include the content of the object as well, for debugging and logging purposes.  This is a much more useful and flexible than writing our own  print()  method as we have seen in earlier lectures, since we are not limited to printing to standard output anymore.   java.lang.String  String  is one of many useful classes provided by Java.  You can skim through to see what methods are available and keep the  API reference  handy.   1\n2\n3\n4\n5\n6 class   Point   { \n     : \n     public   String   toString ()   { \n         return   \"(\"   +   x   +   \",\"   +   y   \")\" ; \n     }  }    Now, if we run: 1\n2 Point   p   =   new   Point ( 0 , 0 );  System . out . println ( p );    It should print  (0,0)  instead of  Point @1235 de .  The ability to override methods that you inherit from a parent, including root class  Object , makes overriding an extremely powerful tool.  It allows you to change how existing libraries behave, and customize them to your classes, without changing a single line of their code or even has access to their code!  As Uncle Ben said, \"With great power, comes great responsibility.\"  We must use overriding and inheritance carefully.  Since we can affect how existing libraries behave, we can easily break existing code and introduce bugs.  Since you may not have access to these existing code, it is often tricky to trace and debug.",
            "title": "Method Overriding"
        },
        {
            "location": "/lec3/index.html#modeling-has-a-relationship",
            "text": "Inheritance in OO tends to get overused.  In practice, we seldom use inheritance.  Let's look at some examples of how  not  to use inheritance, and why.  You may come across examples online or in books that look like the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   Point   { \n     protected   double   x ; \n     protected   double   y ; \n       :  }  class   Circle   extends   Point   { \n     protected   double   radius ; \n       :  }  class   Cylinder   extends   Circle   { \n     protected   double   height ; \n       :  }     Protected fields  The example above have been changed after the class to clarify the access modifier appropriate for this example.  See After Note below for details.   Circle  implemented like the above would have the center coordinate inherited from the parent (so it has three fields, x, y, and radius), and  Cylinder  would have the fields corresponding to a circle, which is its base, and the height.  So, we are  reusing  the fields and the code related to initializing and manipulating the fields.  When we start to consider methods encapsulated with each object, things start to get less intuitive.  What does  getPerimeter()  and  getArea()  of  Cylinder  means?  How about  distanceTo  between a  Cylinder  and a  Point ?   What is the meaning of a  Circle  containing a  Cylinder ?  The inheritance hierarchy above actually models the HAS-A relationship: A circle has a center (which is a point), a cylinder has a base which is a circle.  Therefore, a better way to capture the relationship between the three types of objects is through  composition :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 class   Point   { \n     double   x ; \n     double   y ; \n       :  }  class   Circle   { \n     Point   center ; \n     double   radius ; \n       :  }  class   Cylinder   { \n     Circle   base ; \n     double   height ; \n       :  }    Composition allows us to build more complex classes from simpler ones, and is usually favored over inheritance.    The  PaintedShape  class from Lecture 2, for instance, could be modeled as a composition of a  Style  object and  GeometricShape  object.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   Style   { \n     Color   fillColor ; \n     Color   borderColor ; \n       :  }  class   PaintedShape   { \n     Style   style ; \n     GeometricShape   shape ; \n       : \n     public   double   getArea ()   { \n         return   shape . getArea (); \n     } \n     : \n     public   void   fillWith ( Color   c )   { \n         style . fillWith ( c ); \n     } \n       :  }    The design above is also known as the  forwarding  -- calls to methods on  PaintedShape  gets forwarded to either  Style  or  GeometricShape  objects.",
            "title": "Modeling HAS-A Relationship"
        },
        {
            "location": "/lec3/index.html#modeling-is-a-relationship",
            "text": "A better situation to use inheritance is to model a IS-A relationship: when the subclass behaves just like parent class, but has some additional behaviors.  For instance, it is natural to model a  PaintedCircle  as a subclass of  Circle  -- since a PaintedCircle has all the behavior of  Circle , but has  additional  behaviors related to being painted.  1\n2\n3\n4 class   PaintedCircle   extends   Circle   { \n     Style   style ; \n       :  }    A more tricky situation for modeling a IS-A relationship occurs when the subclass behaves just like the parent class  most  of the time, but is slightly different than the parent's behavior.  Consider how do we model a rectangle and a square.  Normally, we consider a square IS-A special case of rectangle.  So, we could model as:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   Rectangle   { \n     double   width ,   height ; \n     Point   topLeft ; \n     Rectangle ( Point   topLeft ,   in   width ,   int   height )   { \n         this . topLeft   =   topLeft ; \n         this . width   =   width ; \n         this . height   =   height ; \n     }  }  class   Square   extends   Rectangle   { \n     Square ( Point   topLeft ,   int   width )   { \n         super ( topLeft ,   width ,   width ); \n     }  }     this  The  this  keyword in Java that refers to the current object.   So far, so good.  Now, suppose the two classes are written by two different developers.  The developer who wrote Rectangle decides to add the method  resizeTo :  1\n2\n3\n4\n5\n6\n7 class   Rectangle   { \n       : \n     void   resizeTo ( int   width ,   int   height )   { \n         this . width   =   width ; \n         this . height   =   height ; \n     }  }    This developer assumes the behavior that, after calling  resizeTo(w, h) , the width of the rectangle will be  w  and the height will be  h .  He/she publishes this API, and another developer then assumes this behavior, and wrote some code, like:  1\n2\n3\n4 void   doSomething ( Rectangle   r )   { \n     r . resizeTo ( 1 ,   2 ); \n       :  }   \nWhat should the developer who develops  Square  do?  Since  Square  is a subclass of rectangle, it would inherit  resizeTo  from its parent, but it does not make sense to call  resizeTo  with two different parameters.  Sure,  Square  can overload  resizeTo  and provide a  resizeTo  with one parameter only, but that does not prevent someone from calling  resizeTo  with two parameters on a  Square .  Someone could do the following and the code would still compile and run, turning the square into a rectangle!  1\n2 Square   s   =   new   Square ( new   Point ( 0 , 0 ),   10 );  s . resize ( 4 ,   8 );    The  Square  developer can try to override  resizeTo , to ignore the second parameter:  1\n2\n3\n4\n5\n6\n7 class   Square   { \n       : \n     void   resizeTo ( int   width ,   int   height )   { \n         this . width   =   width ; \n         this . height   =   width ; \n     }  }    This makes more sense and would make everyone who uses  Square  happy -- a square is always a square -- but it introduces an  inconsistency  in behavior and will likely break another part of the code the developer is totally unaware of.  The developer for  doSomething  suddenly cannot assume that  resizeTo  works as intended and documented.  It is a developer's responsibility that any inheritance with method overriding does not alter the behavior of existing code.  This brings us to the Liskov Substitution Principle, which says that: \"Let  \\(\\phi(x)\\)  be a property provable about objects  \\(x\\)  of type  \\(T\\) . Then  \\(\\phi(y)\\)  should be true for objects  \\(y\\)  of type  \\(S\\)  where  \\(S\\)  is a subtype of  \\(T\\) .\"   This means that if  \\(S\\)  is a subclass of  \\(T\\) , then an object of type  \\(T\\)  can be replaced by an object of type  \\(S\\)  without changing the desirable property of the program.  In the example above, this means that everywhere we can expect rectangles to be used, we can replace a rectangle with a square.  This was no longer true with the introduction of  resizeTo  method.",
            "title": "Modeling IS-A Relationship"
        },
        {
            "location": "/lec3/index.html#preventing-inheritance-and-method-overriding",
            "text": "Sometimes, it is useful for a developer to explicitly prevent a class to be inherited.  Not allowing inheritance would make it much easier to argue for the correctness of programs, something important when it comes to writing secure program.  Both the two java classes you have seen,  java.lang.Math  and  java.lang.String , cannot be inherited from.  In Java, we use the keyword  final  when declaring a class to tell Java that we ban this class from being inherited.  1\n2\n3 final   class   Circle   { \n     :  }    Alternatively, we can allow inheritance, but still prevent a specific method from being overridden, by declaring a method as  final .  Usually, we do this on methods that are critical for the correctness of the class.  1\n2\n3\n4\n5\n6 class   Circle   { \n    : \n     final   public   boolean   contains ( Point   p )   { \n         : \n     }  }     final variable  The keyword  final  has another use.   When declaring a variable as  final , just like\n     PI  in  Math , it prevents the variable from being modified.  In other words, the variable becomes constant. 1      public   static   final   double   PI     =   3.141592653589793 ;",
            "title": "Preventing Inheritance and Method Overriding"
        },
        {
            "location": "/lec3/index.html#abstract-class-and-interface-with-default-methods",
            "text": "We have seen how a class can inherit from a parent class, and implement one or more interfaces.  So far, the parent class that we have seen is a  concrete  class -- it has fields and methods, complete with method implementation.  Such concrete parent class can be instantiated into objects.     On the other hand, we have interfaces, which is completely virtual, it declared what public methods it should provide -- together with the returned type for each method and the method signature.  There is no field and no implementation.  Between these two extremes, there are two other possibilities in Java:   An  abstract class , which is just like a class, but it is declared as  abstract , and some of its methods are declared as  abstract , without implementation.  An abstract class cannot be instantiated, and any subclass who wish to be concrete needs to implement these abstract methods.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 abstract   class   PaintedShape   { \n     Color   fillColor ; \n       : \n   void   fillWith ( Color   c )   { \n         fillColor   =   c ; \n     } \n     : \n     abstract   double   getArea (); \n     abstract   double   getPerimeter (); \n       :  }    An interface with default implementation.  Introduced only in Java 8, with the goal of allowing interface to evolve, an interface can now contain implementation of the methods.  Such interface still cannot be instantiated into objects, but classes that implement such interface need not provide implementation for a method where a default implementation exists.  For instance, we can have: 1\n2\n3\n4\n5\n6\n7      interface   GeometricShape   { \n     public   double   getArea (); \n     public   double   getPerimeter (); \n     public   boolean   contains ( Point   p ); \n         default   public   boolean   cover ( Point   p )   { \n             return   contains ( p ); \n         }   \nwhere  cover  is a new method with default implementation, denoted with keyword  default .   At this point in CS2030, let's not worry about when to use abstract class or default methods in interfaces, but just be aware that they exists and understand what they mean when you come across them.  After you gain some experience writing OO programs, we will revisit these concepts so that you can better appreciate their differences and usage.",
            "title": "Abstract Class and Interface with Default Methods"
        },
        {
            "location": "/lec3/index.html#after-note",
            "text": "There are a couple of points to clarify with regards to Lecture 3.    When we override  equals()  of  Object  in  Circle , I said \" The method table will update the entry for  equals()  to point to the implementation provided by the  Circle  class, instead of the  Object  class. \"\nand in the figure, I showed that the code for  Circle 's customized  equals  replacing the  equals  for  Object .  What I should have added, is that, the original implementation of  equals  from  Object  is not completely gone.  Methods from the immediate parent that have been overriden can still be called, with  super  keyword.  Here is a useful example from  Point 's  toString() : 1\n2\n3\n4 @Override  public   String   toString ()   { \n   return   super . toString ()   +   \" (\"   +   x   +   \",\"   +   y   +   \")\" ;  }   \nwhich prefix the string representation of Point with the class and reference address.    In the example where we inherit  Cylinder  from  Circle , and  Circle  from  Point , what should the access modifier of the fields,  x , y , and  radius  be?   If they are declared  private , then  Circle  has no access to  x  and  y ;  Cylinder  has no access to  x , y , and  radius .  If they are declared  public , then they are accessible by everyone, breaking the abstraction barrier!  Fortunately, Java has just the right access modifier for this situation:  x ,  y , and  radius  should be declared as  protected .  A  protected  field is less restrictive than  public , and is accessible by subclass but is not accessible by the whole world.",
            "title": "After Note"
        },
        {
            "location": "/lec4/index.html",
            "text": "Lecture 4: Memory, Exception and Generics\n\n\nLearning Outcomes\n\n\nAfter this class, students should:\n\n\n\n\nbe understand when memory are allocated/deallocated from heap vs. from stack\n\n\nunderstand the concept of call stack in JVM\n\n\nunderstand how Java call by reference and call by value\n\n\nknow about the keywords \nnull\n, \ntry\n, \ncatch\n, \nfinally\n, \nthrow\n, and \nthrows\n.\n\n\nappreciate why exceptions is useful way of handling errors\n\n\naware of the differences between errors, unchecked exception, and checked exception in Java\n\n\nbe able to trace through the control flow of \ntry\n/\ncatch\n/\nfinally\n block\n\n\nhow to generate an exception and create a new exception\n\n\nnot commit bad practices when using exceptions\n\n\napprecaite why generics is helpful\n\n\nbe able to create generic class with type parameter, and instantiate parameterized type by passing in type arguments.\n\n\n\n\nWhere are Objects and Variables Stored?\n\n\nFirst, let's look at where Java stores the objects and variables when a program is executed.  There are two memory regions, a heap and a stack\n1\n.  The \nheap\n is where all objects are allocated, while the \nstack\n is where all variables (including primitive types and object references) are allocated.\n\n\nConsiders the following two lines of code.\n\n1\n2\nCircle\n \nc\n;\n\n\nc\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n1\n,\n \n1\n),\n \n8\n);\n\n\n\n\n\nLine 1 declares a variable \nc\n.  When Java executes this line of code, it allocates some memory space for an object reference for \nc\n, the content is initialized to \nnull\n.  Since \nc\n is a variable, it resides in the stack.\n\n\n\n\nnull\n in Java\n\n\nnull\n is a special value for object reference, that signify that this reference is not pointing to any object.  This is similar to the \nnull\n in Javascript, \nNULL\n macro in C, \nnullptr\n in C++11, \nNone\n in Python, \nnil\n in Objective-C.  (Again, you see here computer scientists just can't agree on names!)  \nSir Tony Hoare\n (who also invented quicksort) famously apologized for inventing the null pointer.  He calls it his billion-dollar mistake.\n\n\n\n\nLine 2 creates a new Circle object.  When Java executes this line of code, it allocates some memory space for a \nCircle\n object on the heap.  The memory address of this memory space becomes the reference of the object, and is assigned to the variable \nc\n.\n\n\nThis is shown in the figure below\n2\n.\n\n\n\n\nThe first argument to \nCircle\n constructor is also an object, so to be more precise, when Line 2 above is executed, a \nPoint\n object is also created and allocated on the heap.  So the field \nc\n inside \nCircle\n is actually a reference to this object.\n\n\n\n\nNow, let's look at a slightly different example.\n\n\n1\n2\n3\n4\n5\n6\nCircle\n \nc\n;\n\n\nPoint\n \ncenter\n;\n\n\ndouble\n \nradius\n;\n\n\nradius\n \n=\n \n8\n;\n\n\ncenter\n \n=\n \nnew\n \nPoint\n(\n1\n,\n \n1\n);\n\n\nc\n \n=\n \nnew\n \nCircle\n(\ncenter\n,\n \nradius\n);\n\n\n\n\n\n\nIn the second example, we have three variables, \nc\n, \ncenter\n, and \nradius\n .  Lines 1-3 declare the variables, and as a result, we have three variables allocated on the stack.  Recall that for object references, they are initialized to \nnull\n.  Primitive type variables (e.g., \nradius\n) are initialized to 0.\n\n\n\n\nAfter Lines 4-6, we have:\n\n\n\n\nCall Stack\n\n\nNow, let's look at what happens when we invoke a method.  Take the \ndistanceTo\n method in \nPoint\n as an example:\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nPoint\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n\n  \nprivate\n \ndouble\n \ny\n;\n\n  \npublic\n \ndouble\n \ndistanceTo\n(\nPoint\n \nq\n)\n \n{\n\n    \nreturn\n \nMath\n.\nsqrt\n((\nq\n.\nx\n \n-\n \nthis\n.\nx\n)*(\nq\n.\nx\n \n-\n \nthis\n.\nx\n)+(\nq\n.\ny\n \n-\n \nthis\n.\ny\n)*(\nq\n.\ny\n \n-\n \nthis\n.\ny\n));\n\n  \n}\n\n\n}\n\n\n\n\n\nand the invocation:\n\n1\n2\n3\nPoint\n \np1\n \n=\n \nnew\n \nPoint\n(\n0\n,\n0\n);\n\n\nPoint\n \np2\n \n=\n \nnew\n \nPoint\n(\n1\n,\n1\n);\n\n\np1\n.\ndistanceTo\n(\np2\n);\n\n\n\n\n\n\nAfter declaring \np1\n and \np2\n and creating both objects, we have:\n\n\n\nLet's see what happen when we call \ndistanceTo\n.  How is the argument \nq\n initialized?  What about \nthis\n?  \n\n\nWhen \ndistanceTo\n is called, Java (to be more precise, the Java Virtual Machine, or JVM) creates a \nstack frame\n for this instance method call.  This stack frame is a region of memory that tentatively contains (i) the \nthis\n reference, (ii) the method arguments, and (iii) local variables within the method, among other things\n3\n4\n.  When a class method is called, the stack frame does not contain the \nthis\n reference.\n\n\n\n\nYou can see that the \nreference\n of the objects \np1\n and \np2\n are copied onto the stack frame. \np1\n and \nthis\n point to the same object, and \np2\n and \nq\n point to the same object.\nWithin the method, any modification done to \nthis\n would change the object referenced to by \np1\n, and any change made to \nq\n would change the object referenced to by \np2\n as well.\nAfter the method returns, the stack frame for that method is destroyed.\n\n\nLet's call the \nmove\n function from your \nLab 1\n, with arguments \n(double theta, double d)\n.\n\n\n1\n2\n3\ndouble\n \ntheta\n \n=\n \nMath\n.\nPI\n/\n4.0\n;\n\n\ndouble\n \ndistance\n \n=\n \n1\n;\n\n\np2\n.\nmove\n(\ntheta\n,\n \ndistance\n);\n\n\n\n\n\n\n\nAgain, we create a stack frame, copy the reference to object \np2\n into \nthis\n, copy \ntheta\n from the calling function to \ntheta\n the argument within the method, copy \ndistance\n from the calling function to \nd\n the argument within the method.  Recall that, in this function, you actually change the \nx\n and \ny\n of \nthis\n to move \np2\n.  \n\n\n\n\nWhat is important here is that, as \ntheta\n and \ndistance\n are primitive types instead of references, we copy the values onto the stack.  If we change \ntheta\n or \nd\n within \nmove\n, the \ntheta\n and \ndistance\n of the calling function will not change.  This behavior is the same as you would expect in C.  However, unlike in C where you can pass in a pointer to a variable, you cannot pass in a reference to a primitive type in any way in Java.  If you want to pass in a variable of primitive type into a method and have its value changed, you will have to use a \nwrapper class\n, but we leave the details of that for another lesson on another day.\n\n\nIn short, Java uses \ncall by value\n for primitive types, and \ncall by reference\n for objects.\n\n\nIf we made multiple nested method calls, as we usually do, the stack frames get stacked on top of each other.  For instance, in Lab 1, \nmain\n calls \nsolve\n, which calls the \nCircle\n constructor, which calls the \nangleTo\n.  When JVM is executing \nangleTo\n, the call stack contains the stack frames of (in order of top to bottom): \nangleTo\n, \nCircle\n constructor, \nsolve\n, and \nmain\n.\n\n\nOne final note: the memory allocated on the stack are deallocated when a method returns.  The memory allocated on the heap, however, stays there as long as there is a reference to it (either from another object or from a variable in the stack).  Unlike C or C++, in Java, you do not have to free the memory allocated to objects.  The JVM runs a \ngarbage collector\n  that checks for unreferenced objects on the heap and cleans up the memory automatically.\n\n\nExceptions\n\n\nOne of the nuances of programming is having to write code to deal with exceptions and errors.  Consider writing a method that reads in a series of x and y coordinates from a file, not unlike what you have seen in Lab 1.  Here are some things that could go wrong:\n\n\n\n\nThe file to read from may not exist\n\n\nThe file to read from exists, but you may not have permission to read it\n\n\nYou can open the file for reading, but it might contain non-numeric text where you numerical values\n\n\nThe file might contain fewer values than expected\n\n\nThe file might become unreadable as you are reading through it (e.g., someone unplug the USB drive)\n\n\n\n\nIn C, we usually have to write code like this:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nfd\n \n=\n \nfopen\n(\nfilename\n,\n\"r\"\n);\n\n\nif\n \n(\nfd\n \n==\n \nNULL\n)\n \n{\n\n  \nfprintf\n(\nstderr\n,\n \n\"Unable to open file. \"\n);\n\n  \nif\n \n(\nerrno\n \n==\n \nENFILE\n)\n \n{\n\n    \nfprintf\n(\nstderr\n,\n \n\"Too many opened files.  Unable to open another\n\\n\n\"\n);\n\n  \n}\n \nelse\n \nif\n \n(\nerrno\n \n==\n \nENOENT\n)\n \n{\n\n    \nfprintf\n(\nstderr\n,\n \n\"No such file %s\n\\n\n\"\n,\n \nfilename\n);\n\n  \n}\n \nelse\n \nif\n \n(\nerrno\n \n==\n \nEACCES\n)\n \n{\n\n    \nfprintf\n(\nstderr\n,\n \n\"No read permission to %s\n\\n\n\"\n,\n \nfilename\n);\n\n  \n}\n\n  \nreturn\n \n-\n1\n;\n\n\n}\n\n\nscanned\n \n=\n \nfscanf\n(\nfd\n,\n \n\"%d\"\n,\n \n&\nnum_of_points\n);\n\n\nif\n \n(\nscanned\n \n==\n \n0\n)\n \n{\n\n  \nfprintf\n(\nstderr\n,\n \n\"Unable to scan for an integer\n\\n\n\"\n);\n\n  \nfclose\n(\nfd\n);\n\n  \nreturn\n \n-\n2\n;\n\n\n}\n\n\nif\n \n(\nscanned\n \n==\n \nEOF\n)\n \n{\n\n  \nfprintf\n(\nstderr\n,\n \n\"No input found.\n\\n\n\"\n);\n\n  \nfclose\n(\nfd\n);\n\n  \nreturn\n \n-\n3\n;\n\n\n}\n\n\n\n\n\n\n\nOut of the lines above, only 2 lines correspond to the actual tasks, the others are for exception checking/handling.  How uncool is that?  Furthermore, the actual tasks are intersperse between exception checking code, making reading and understanding the logic of the code difficult.\n\n\nThe examples above also have to return different values to the calling method, because the calling method may have to do something to handle the errors.  Note that the POSIX APIs has a global variable \nerrno\n which signifies the detailed error.  First, we have to check for different \nerrno\n values and react accordingly (we can use \nperror\n, but that has its limits).  Second, \nerrno\n is global and we know that global variable is bad practice.  In fact, I am not even sure that code above works because \nfprintf\n in Line 3 might have changed \nerrno\n!\n\n\nThen, there is the issue of having to repeatedly clean up after an error -- here we \nfclose\n the file if there is an error reading, twice.  It is easy to forgot to do so if we have to do this in multiple places.   Furthermore, if we need to perform more complex clean up, then we would end up with lots of repeated code.\n\n\nJava supports \ntry\n/\ncatch\n/\nfinally\n control statements, which is a way to group statements that check/handle errors together making code easier to read.  The Java equivalent to the above is:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\ntry\n \n{\n\n  \nreader\n \n=\n \nnew\n \nFileReader\n(\nfilename\n);\n\n  \nscanner\n \n=\n \nnew\n \nScanner\n(\nreader\n);\n\n  \nnumOfPoints\n \n=\n \nscanner\n.\nnextInt\n();\n\n\n}\n\n\ncatch\n \n(\nFileNotFoundException\n \ne\n)\n \n{\n\n    \nSystem\n.\nerr\n.\nprintln\n(\n\"Unable to open \"\n \n+\n \nfilename\n \n+\n \n\" \"\n \n+\n \ne\n);\n\n\n}\n\n\ncatch\n \n(\nInputMismatchException\n \ne\n)\n \n{\n\n    \nSystem\n.\nerr\n.\nprintln\n(\n\"Unable to scan for an integer\"\n);\n\n\n}\n\n\ncatch\n \n(\nNoSuchElementException\n \ne\n)\n \n{\n\n    \nSystem\n.\nerr\n.\nprintln\n(\n\"No input found\"\n);\n\n\n}\n\n\nfinally\n \n{\n\n  \nif\n \n(\nscanner\n \n!=\n \nnull\n)\n\n    \nscanner\n.\nclose\n();\n\n\n}\n\n\n\n\n\n\n\nHere Lines 2-4 keep the basic tasks together, and all the clean up tasks are grouped together in Lines 18-19.  Lines 8-16 handles the exceptions.  We no longer rely on global variable to convey the type of exceptions, or special return value to indicate exceptions.   What if we want the calling method to handle the exception?  Then, we simply do not do anything (i.e., do not catch the exception) and let the exception propagates to the calling method automatically.\n\n\n\n\nError vs. Exception in Java\n\n\nWe have been using the term error and exception loosely.  Java has different classes for \nError\n and \nException\n.  \nError\n is for situations where the program should terminate as generally there is no way to recover.  For instance, when the heap is full (\nOutOfMemoryError\n) or the stack is full (\nStackOverflowError\n).  Exceptions are for situations where it is still possible to reasonably recover from the error.\n\n\n\n\n\n\nCombining Multiple Catches\n\n\nIn cases where the code to handle the exceptions is the same, you can\n\n1\n2\n3\ncatch (FileNotFoundException | InputMismatchException | NoSuchElementException e) {\n    System.err.println(e);\n}\n\n\n\n\n\n\n\nHere is a more detailed description of the control flow of exceptions.  Consider we have a \ntry\n-\ncatch\n-\nfinally\n block that catches two exceptions \nE1\n and \nE2\n.  Inside the \ntry\n block, we call a method \nm1()\n; \nm1()\n calls \nm2()\n; \nm2()\n calls \nm3()\n, and \nm3()\n calls \nm4()\n.   In a normal (no exception) situation, the control flow looks like this:\n\n\n\n\nThe statements in \ntry\n block is executed, followed by the statements in \nfinally\n block.\n\n\nNow, let's suppose something went wrong deep inside the nested call, in \nm4()\n.  One of the statement executes \nthrow new E2();\n, which causes the execution in \nm4()\n to stop.  JVM now looks for the block of code that catches \nE2\n, going down the call stack, until it can find a place where the exception is handled.  In this example, we suppose that none of \nm1()\n-\nm4()\n handles (i.e., \ncatch\n) the exception.  Thus, JVM then jumps to the code that handles \nE2\n.  Finally, JVM executes the \nfinally\n block.\n\n\n\n\nChecked Exceptions\n\n\nThere are two types of exceptions in Java: \nchecked\n and \nunchecked\n exceptions:\n\n\n\n\nA checked exception is something that the programmer should anticipate and handle.  For instance, when you open a file, you should anticipate that in some cases, the file cannot be open.   \n\n\nAn unchecked exception is something that the programmer does not anticipate, and usually is a result of bugs.  For example, when you try to call \np.distanceTo(q)\n but \np\n is \nnull\n, resulting in a \nNullPointerException\n being thrown.  \n\n\n\n\nWe need to catch all checked exceptions or let it propagate to the calling method.  Otherwise, the program will not compile.  \n\n\nFor unchecked exceptions, even though we could catch it, it makes more sense to eliminate the bugs.  In Java, unchecked exceptions are subclasses of \nRuntimeException\n.  All \nError\ns are unchecked.\n\n\nAll methods that throw checked exception need to \nspecify\n the checked exception(s).  For example, if we want to put the code to open a file and read an \nint\n from it into a function, and want the calling function to deal with the exception, this is what we should do:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\npublic\n \nstatic\n \nint\n \nreadIntFromFile\n(\nString\n \nfilename\n)\n\n  \nthrows\n \nFileNotFoundException\n \n{\n\n  \nFileReader\n \nreader\n \n=\n \nnew\n \nFileReader\n(\nfilename\n);\n\n  \nScanner\n \nscanner\n \n=\n \nnew\n \nScanner\n(\nreader\n);\n\n  \nint\n \nnumOfPoints\n \n=\n \nscanner\n.\nnextInt\n();\n    \n  \nscanner\n.\nclose\n();\n\n  \nreturn\n \nnumOfPoints\n;\n\n\n}\n\n\n\n\n\n\n\nNote Line 2 specify that this method might throw \nFileNotFoundException\n.  \n\n\nA checked exception must be either caught or thrown to calling function, except \nmain\n, which has no calling function to throw to.  If the main() does not catch an checked exception, the running program exits, and the exception is revealed to the user -- this is generally considered as bad programming.\n\n\nThe two other exceptions from the examples above \nInputMismatchException\n and \nNoSuchElementException\n are subclasses of \nRuntimeException\n, and therefore are unchecked.\n\n\nGenerating Exception\n\n\nThe Circle constructor in Lab 1 requires the distance \n\\(d\\)\n between two input points to be \n\\(0 < d \\le 2r\\)\n.  If the condition is violated, you are asked to return an invalid circle.  Another way is to throw an unchecked exception \nIllegalArgumentException\n if one of the above two conditions is met.  \n\n\n1\n2\n3\n4\n5\n6\n7\npublic\n \nCircle\n(\nPoint\n \np\n,\n \nPoint\n \nq\n,\n \ndouble\n \nr\n,\n \nboolean\n \ncenterOnLeft\n)\n \n{\n\n  \nif\n \n(\np\n.\ndistanceTo\n(\nq\n)\n \n>\n \n2\n*\nr\n)\n \n{\n\n    \nthrow\n \nnew\n \nIllegalArgumentException\n(\n\"Input points are too far apart\"\n);\n\n  \n}\n\n  \nif\n \n(\np\n.\nequals\n(\nq\n))\n \n{\n\n    \nthrow\n \nnew\n \nIllegalArgumentException\n(\n\"Input points coincide\"\n);\n\n  \n}\n\n\n\n\n\n\n\nNote that difference between \nthrow\n and \nthrows\n: the former is to generate an exception, the latter to specify that the exception(s) thrown by a method.\n\n\nIf you find that none of the \nexceptions provided by Java\n meet your needs, you can create your own exceptions, by simply inheriting from one of the existing ones.\nBut, you should only do so if there is a good reason, for instance, to provide additional useful information to the exception handler.\n\n\nOverriding Method that Throws Exceptions\n\n\nWhen you override a method that throws a checked exception, the overriding method must throw only the same, or a more specific checked exception, than the overridden method.  This rule enforces the Liskov Substitution Principle.  The caller of the overridden method cannot expect any new checked exception than what has already been \"promised\" in the method specification.\n\n\nGood Practices for Exception Handling\n\n\nCatch Exceptions to Clean Up\n\n\nWhile it is convenient to just let the calling method deals with exceptions (\"Hey! Not my problem!\"), it is not always responsible to do so.  Consider the example earlier, where \nm1()\n, \nm2()\n, and \nm3()\n do not handle exception E2.  Let's say that E2 is a checked exception, and it is possible to react to this and let the program continues properly.  Also, suppose that \nm2()\n allocated some system resources (e.g., temporary files, network connections) at the beginning of the method, and deallocated the resources at the end of the method.  Not handling the exception, means that, code that deallocates these resources does not get called when an exception occur!  It is better for \nm2()\n to catch the exception, handle the resource deallocation in a \nfinally\n block.  If there is a need for the calling methods to be aware of the exception, \nm2()\n can always re-throw the exception:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\npublic\n \nvoid\n \nm2\n()\n \nthrows\n \nE2\n \n{\n\n  \ntry\n \n{\n\n    \n// setup resources\n\n    \nm3\n();\n\n  \n}\n\n  \ncatch\n \n(\nE2\n \ne\n)\n \n{\n\n    \nthrow\n \ne\n;\n\n  \n}\n\n  \nfinally\n \n{\n\n    \n// clean up resources\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nNote that the \nfinally\n block is always executed even when \nreturn\n or \nthrow\n is called in a \ncatch\n block.\n\n\nCatch All Exception is Bad\n\n\nSometimes, you just want to focus on the main logic of the program and get it working instead of dealing with the exceptions.  Since Java uses checked exceptions, it forces you to handle the exceptions or else your code will not compile.  One way to quickly get around this is to write:\n\n\n1\n2\n3\n4\ntry\n \n{\n\n  \n// your code\n\n\n}\n\n\ncatch\n \n(\nException\n \ne\n)\n \n{}\n\n\n\n\n\n\n\nto shut the compiler up.  DO NOT DO THIS.  All exceptions thrown are now silently ignored!  \n\n\nCan we do \nworse\n?  How about the following:\n\n1\n2\n3\n4\ntry\n \n{\n\n  \n// your code\n\n\n}\n\n\ncatch\n \n(\nError\n \ne\n)\n \n{}\n\n\n\n\n\n\ud83d\ude31\n\n\nOverreacting\n\n\nDo not exit a program just because of exception.  This would prevent the calling function from cleaning up their resources.  Worse, do not exit a program silently.\n\n\n1\n2\n3\n4\n5\n6\ntry\n \n{\n\n  \n// your code\n\n\n}\n\n\ncatch\n \n(\nException\n \ne\n)\n \n{\n\n  \nSystem\n.\nexit\n(\n0\n);\n\n\n}\n\n\n\n\n\n\n\nDo Not Break Abstraction Barrier\n\n\nSometimes, letting the calling method handles the exception causes the implementation details to be leak, and make it harder to change the implementation later.\n\n\nFor instance, suppose we design a class \nClassRoster\n with a method \ngetStudents()\n, which reads the list of students from a text file.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nClassRoster\n \n{\n\n   \n:\n\n  \npublic\n \nStudents\n[]\n \ngetStudents\n()\n \nthrows\n \nFileNotFoundException\n \n{\n\n    \n:\n\n  \n}\n\n\n}\n\n\n\n\n\nLater, we change the implementation to reading the list from an SQL database,\n\n1\n2\n3\n4\n5\n6\nclass\n \nClassRoster\n \n{\n\n   \n:\n\n  \npublic\n \nStudents\n[]\n \ngetStudents\n()\n \nthrows\n \nSQLException\n \n{\n\n    \n:\n\n  \n}\n\n\n}\n\n\n\n\n\nWe should, as much as possible, handle the implementation specific exceptions within the abstraction barrier.  \n\n\nGenerics\n\n\nThird topic of today is on generics.  \n\n\nSuppose you want to create a new class that encapsulates a queue of circles.  You wrote:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nclass\n \nCircleQueue\n \n{\n\n  \nprivate\n \nCircle\n[]\n \ncircles\n;\n\n   \n:\n\n  \npublic\n \nCircleQueue\n(\nint\n \nsize\n)\n \n{...}\n\n  \npublic\n \nboolean\n \nisFull() {\n...}\n\n  \npublic\n \nboolean\n \nisEmpty() {\n...}\n\n  \npublic\n \nvoid\n \nenqueue\n(\nCircle\n \nc\n)\n \n{...}\n\n  \npublic\n \nCircle\n \ndequeue() {\n...}\n\n\n}\n\n\n\n\n\n\n\nLater, you found that you need a new class that encapsulates a queue of points.  You wrote:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nclass\n \nPointQueue\n \n{\n\n  \nprivate\n \nPoint\n[]\n \npoints\n;\n\n   \n:\n\n  \npublic\n \nPointQueue\n(\nint\n \nsize\n)\n \n{...}\n\n  \npublic\n \nboolean\n \nisFull() {\n...}\n\n  \npublic\n \nboolean\n \nisEmpty() {\n...}\n\n  \npublic\n \nvoid\n \nenqueue\n(\nPoint\n \np\n)\n \n{...}\n\n  \npublic\n \nPoint\n \ndequeue() {\n...}\n\n\n}\n\n\n\n\n\n\nAnd you realize that there are actually a lot of similar code.  Invoking the \nabstraction principle\n, which states that \n\"Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts\n\", you decided to create an queue of Objects to replace the two classes above.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nclass\n \nObjectQueue\n \n{\n\n  \nprivate\n \nObject\n[]\n \nobjects\n;\n\n   \n:\n\n  \npublic\n \nObjectQueue\n(\nint\n \nsize\n)\n \n{...}\n\n  \npublic\n \nboolean\n \nisFull\n()\n \n{...}\n\n  \npublic\n \nboolean\n \nisEmpty\n()\n \n{...}\n\n  \npublic\n \nvoid\n \nenqueue\n(\nObject\n \no\n)\n \n{...}\n\n  \npublic\n \nObject\n \ndequeue\n()\n \n{...}\n\n\n}\n\n\n\n\n\n\n\nNow you have a very general class, that you can use to store objects of any kind, including a queue of strings, a queue of colors, etc.  You are quite pleased with yourself, as you should!  The early Java collection library contains many such generic data structures that stores elements of type \nObject\n.\n\n\nTo create a queue of 10 circles and add some circles, you just need:\n\n1\n2\n3\n4\nObjectQueue\n \ncq\n \n=\n \nnew\n \nObjectQueue\n(\n10\n);\n\n\ncq\n.\nenqueue\n(\nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n));\n\n\ncq\n.\nenqueue\n(\nnew\n \nCircle\n(\nnew\n \nPoint\n(\n1\n,\n \n1\n),\n \n5\n));\n\n \n:\n\n\n\n\n\n\nGetting a circle out of the queue is a bit more troublesome:\n\n1\nCircle\n \nc\n \n=\n \ncq\n.\ndequeue\n();\n\n\n\n\n\nWould generate a compilation error, since we cannot assign a variable of type \nObject\n to a variable of type \nCircle\n.\n\n\nWe can get around the compilation error by typecasting it into a \nCircle\n, since \nCircle\n is a subclass of \nObject\n, Java compiler would let it go, assuming that you know what you are doing.\n\n1\nCircle\n \nc\n \n=\n \n(\nCircle\n)\ncq\n.\ndequeue\n();\n\n\n\n\n\n\nThe code above, however, could be dangerous.  For instance, it might generate a runtime \nClassCastException\n if there is an object in the queue that is not \nCircle\n or its subclass.  To avoid runtime error, we should check the type first:\n\n\n1\n2\n3\n4\nObject\n \no\n \n=\n \ncq\n.\ndequeue\n();\n\n\nif\n \n(\no\n \ninstanceof\n \nCircle\n)\n \n{\n\n    \nCircle\n \nc\n \n=\n \n(\nCircle\n)\no\n;\n\n\n}\n\n\n\n\n\n\n\nWouldn't it be nice if we can still have general code, but let the compiler generates an error if we try to add a non-\nCircle\n into our queue of \nCircle\n objects, so that we don't have to check for the type of an object all the time?\n\n\nJava 5 introduces generics, which is a significant improvement to the type systems in Java.  It allows a \ngeneric class\n of some type \nT\n to be written:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nclass\n \nQueue\n<\nT\n>\n \n{\n\n  \nprivate\n \nT\n[]\n \nobjects\n;\n\n   \n:\n\n  \npublic\n \nQueue\n<\nT\n>(\nint\n \nsize\n)\n \n{...}\n\n  \npublic\n \nboolean\n \nisFull\n()\n \n{...}\n\n  \npublic\n \nboolean\n \nisEmpty\n()\n \n{...}\n\n  \npublic\n \nvoid\n \nenqueue\n(\nT\n \no\n)\n \n{...}\n\n  \npublic\n \nT\n \ndequeue\n()\n \n{...}\n\n\n}\n\n\n\n\n\n\n\nT\n is known as \ntype parameter\n.\nThe same code as before can be written as:\n\n\n1\n2\n3\n4\nQueue\n<\nCircle\n>\n \ncq\n \n=\n \nnew\n \nQueue\n<\nCircle\n>(\n10\n);\n\n\ncq\n.\nenqueue\n(\nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n));\n\n\ncq\n.\nenqueue\n(\nnew\n \nCircle\n(\nnew\n \nPoint\n(\n1\n,\n \n1\n),\n \n5\n));\n\n\nCircle\n \nc\n \n=\n \ncq\n.\ndequeue\n();\n\n\n\n\n\n\n\nHere, we passed \nCircle\n as \ntype argument\n to \nT\n, creating a \nparameterized type\n \nQueue<Circle>\n.\n\n\nIn Line 4, we no longer need to cast, and there is no danger of runtime error due to object of the wrong class being added to the queue, for doing this:\n\n1\n2\nQueue\n<\nCircle\n>\n \ncq\n \n=\n \nnew\n \nQueue\n<\nCircle\n>(\n10\n);\n\n\ncq\n.\nenqueue\n(\nnew\n \nPoint\n(\n1\n,\n \n3\n));\n\n\n\n\n\nwill generate a compile time error! \n\n\n\n\nDiamond Notation\n\n\nWe can use the short form \n<>\n in the constructor as the compiler can infer the type:\n\n1\nQueue\n<\nCircle\n>\n \ncq\n \n=\n \nnew\n \nQueue\n<>(\n10\n);\n\n\n\n\n\n\n\n\nWe can use parameterized type anywhere a type is used, including as type argument.  If we want to have a queue of queue of circle, we can:\n    \n1\nQueue\n<\nQueue\n<\nCircle\n>>\n \ncqq\n \n=\n \nnew\n \nQueue\n<>(\n10\n);\n\n\n\n\n\n\nWe will see many examples of generics next lecture.\n\n\n\n\n\n\n\n\n\n\nThe actual memory store is more complex that what is presented here, but for the purpose of this lecture, we only consider heap and stack.  Heap and stack is also common to all the languages and runtime system I am aware of.\u00a0\n\u21a9\n\n\n\n\n\n\nUnlike earlier figures, I didn't show the class metadata and method tables for simplicity.\u00a0\n\u21a9\n\n\n\n\n\n\nThis is not that difference from how an OS handles function call in a machine code, as you will see in CS2100/CS2106.\u00a0\n\u21a9\n\n\n\n\n\n\nThe other things are JVM implementation independent and not relevant to our discussion here.\u00a0\n\u21a9",
            "title": "4. Memory, Exceptions, Generics"
        },
        {
            "location": "/lec4/index.html#lecture-4-memory-exception-and-generics",
            "text": "",
            "title": "Lecture 4: Memory, Exception and Generics"
        },
        {
            "location": "/lec4/index.html#learning-outcomes",
            "text": "After this class, students should:   be understand when memory are allocated/deallocated from heap vs. from stack  understand the concept of call stack in JVM  understand how Java call by reference and call by value  know about the keywords  null ,  try ,  catch ,  finally ,  throw , and  throws .  appreciate why exceptions is useful way of handling errors  aware of the differences between errors, unchecked exception, and checked exception in Java  be able to trace through the control flow of  try / catch / finally  block  how to generate an exception and create a new exception  not commit bad practices when using exceptions  apprecaite why generics is helpful  be able to create generic class with type parameter, and instantiate parameterized type by passing in type arguments.",
            "title": "Learning Outcomes"
        },
        {
            "location": "/lec4/index.html#where-are-objects-and-variables-stored",
            "text": "First, let's look at where Java stores the objects and variables when a program is executed.  There are two memory regions, a heap and a stack 1 .  The  heap  is where all objects are allocated, while the  stack  is where all variables (including primitive types and object references) are allocated.  Considers the following two lines of code. 1\n2 Circle   c ;  c   =   new   Circle ( new   Point ( 1 ,   1 ),   8 );   \nLine 1 declares a variable  c .  When Java executes this line of code, it allocates some memory space for an object reference for  c , the content is initialized to  null .  Since  c  is a variable, it resides in the stack.   null  in Java  null  is a special value for object reference, that signify that this reference is not pointing to any object.  This is similar to the  null  in Javascript,  NULL  macro in C,  nullptr  in C++11,  None  in Python,  nil  in Objective-C.  (Again, you see here computer scientists just can't agree on names!)   Sir Tony Hoare  (who also invented quicksort) famously apologized for inventing the null pointer.  He calls it his billion-dollar mistake.   Line 2 creates a new Circle object.  When Java executes this line of code, it allocates some memory space for a  Circle  object on the heap.  The memory address of this memory space becomes the reference of the object, and is assigned to the variable  c .  This is shown in the figure below 2 .   The first argument to  Circle  constructor is also an object, so to be more precise, when Line 2 above is executed, a  Point  object is also created and allocated on the heap.  So the field  c  inside  Circle  is actually a reference to this object.   Now, let's look at a slightly different example.  1\n2\n3\n4\n5\n6 Circle   c ;  Point   center ;  double   radius ;  radius   =   8 ;  center   =   new   Point ( 1 ,   1 );  c   =   new   Circle ( center ,   radius );    In the second example, we have three variables,  c ,  center , and  radius  .  Lines 1-3 declare the variables, and as a result, we have three variables allocated on the stack.  Recall that for object references, they are initialized to  null .  Primitive type variables (e.g.,  radius ) are initialized to 0.   After Lines 4-6, we have:",
            "title": "Where are Objects and Variables Stored?"
        },
        {
            "location": "/lec4/index.html#call-stack",
            "text": "Now, let's look at what happens when we invoke a method.  Take the  distanceTo  method in  Point  as an example:  1\n2\n3\n4\n5\n6\n7 class   Point   { \n   private   double   x ; \n   private   double   y ; \n   public   double   distanceTo ( Point   q )   { \n     return   Math . sqrt (( q . x   -   this . x )*( q . x   -   this . x )+( q . y   -   this . y )*( q . y   -   this . y )); \n   }  }   \nand the invocation: 1\n2\n3 Point   p1   =   new   Point ( 0 , 0 );  Point   p2   =   new   Point ( 1 , 1 );  p1 . distanceTo ( p2 );    After declaring  p1  and  p2  and creating both objects, we have:  Let's see what happen when we call  distanceTo .  How is the argument  q  initialized?  What about  this ?    When  distanceTo  is called, Java (to be more precise, the Java Virtual Machine, or JVM) creates a  stack frame  for this instance method call.  This stack frame is a region of memory that tentatively contains (i) the  this  reference, (ii) the method arguments, and (iii) local variables within the method, among other things 3 4 .  When a class method is called, the stack frame does not contain the  this  reference.   You can see that the  reference  of the objects  p1  and  p2  are copied onto the stack frame.  p1  and  this  point to the same object, and  p2  and  q  point to the same object.\nWithin the method, any modification done to  this  would change the object referenced to by  p1 , and any change made to  q  would change the object referenced to by  p2  as well.\nAfter the method returns, the stack frame for that method is destroyed.  Let's call the  move  function from your  Lab 1 , with arguments  (double theta, double d) .  1\n2\n3 double   theta   =   Math . PI / 4.0 ;  double   distance   =   1 ;  p2 . move ( theta ,   distance );    Again, we create a stack frame, copy the reference to object  p2  into  this , copy  theta  from the calling function to  theta  the argument within the method, copy  distance  from the calling function to  d  the argument within the method.  Recall that, in this function, you actually change the  x  and  y  of  this  to move  p2 .     What is important here is that, as  theta  and  distance  are primitive types instead of references, we copy the values onto the stack.  If we change  theta  or  d  within  move , the  theta  and  distance  of the calling function will not change.  This behavior is the same as you would expect in C.  However, unlike in C where you can pass in a pointer to a variable, you cannot pass in a reference to a primitive type in any way in Java.  If you want to pass in a variable of primitive type into a method and have its value changed, you will have to use a  wrapper class , but we leave the details of that for another lesson on another day.  In short, Java uses  call by value  for primitive types, and  call by reference  for objects.  If we made multiple nested method calls, as we usually do, the stack frames get stacked on top of each other.  For instance, in Lab 1,  main  calls  solve , which calls the  Circle  constructor, which calls the  angleTo .  When JVM is executing  angleTo , the call stack contains the stack frames of (in order of top to bottom):  angleTo ,  Circle  constructor,  solve , and  main .  One final note: the memory allocated on the stack are deallocated when a method returns.  The memory allocated on the heap, however, stays there as long as there is a reference to it (either from another object or from a variable in the stack).  Unlike C or C++, in Java, you do not have to free the memory allocated to objects.  The JVM runs a  garbage collector   that checks for unreferenced objects on the heap and cleans up the memory automatically.",
            "title": "Call Stack"
        },
        {
            "location": "/lec4/index.html#exceptions",
            "text": "One of the nuances of programming is having to write code to deal with exceptions and errors.  Consider writing a method that reads in a series of x and y coordinates from a file, not unlike what you have seen in Lab 1.  Here are some things that could go wrong:   The file to read from may not exist  The file to read from exists, but you may not have permission to read it  You can open the file for reading, but it might contain non-numeric text where you numerical values  The file might contain fewer values than expected  The file might become unreadable as you are reading through it (e.g., someone unplug the USB drive)   In C, we usually have to write code like this:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 fd   =   fopen ( filename , \"r\" );  if   ( fd   ==   NULL )   { \n   fprintf ( stderr ,   \"Unable to open file. \" ); \n   if   ( errno   ==   ENFILE )   { \n     fprintf ( stderr ,   \"Too many opened files.  Unable to open another \\n \" ); \n   }   else   if   ( errno   ==   ENOENT )   { \n     fprintf ( stderr ,   \"No such file %s \\n \" ,   filename ); \n   }   else   if   ( errno   ==   EACCES )   { \n     fprintf ( stderr ,   \"No read permission to %s \\n \" ,   filename ); \n   } \n   return   - 1 ;  }  scanned   =   fscanf ( fd ,   \"%d\" ,   & num_of_points );  if   ( scanned   ==   0 )   { \n   fprintf ( stderr ,   \"Unable to scan for an integer \\n \" ); \n   fclose ( fd ); \n   return   - 2 ;  }  if   ( scanned   ==   EOF )   { \n   fprintf ( stderr ,   \"No input found. \\n \" ); \n   fclose ( fd ); \n   return   - 3 ;  }    Out of the lines above, only 2 lines correspond to the actual tasks, the others are for exception checking/handling.  How uncool is that?  Furthermore, the actual tasks are intersperse between exception checking code, making reading and understanding the logic of the code difficult.  The examples above also have to return different values to the calling method, because the calling method may have to do something to handle the errors.  Note that the POSIX APIs has a global variable  errno  which signifies the detailed error.  First, we have to check for different  errno  values and react accordingly (we can use  perror , but that has its limits).  Second,  errno  is global and we know that global variable is bad practice.  In fact, I am not even sure that code above works because  fprintf  in Line 3 might have changed  errno !  Then, there is the issue of having to repeatedly clean up after an error -- here we  fclose  the file if there is an error reading, twice.  It is easy to forgot to do so if we have to do this in multiple places.   Furthermore, if we need to perform more complex clean up, then we would end up with lots of repeated code.  Java supports  try / catch / finally  control statements, which is a way to group statements that check/handle errors together making code easier to read.  The Java equivalent to the above is:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 try   { \n   reader   =   new   FileReader ( filename ); \n   scanner   =   new   Scanner ( reader ); \n   numOfPoints   =   scanner . nextInt ();  }  catch   ( FileNotFoundException   e )   { \n     System . err . println ( \"Unable to open \"   +   filename   +   \" \"   +   e );  }  catch   ( InputMismatchException   e )   { \n     System . err . println ( \"Unable to scan for an integer\" );  }  catch   ( NoSuchElementException   e )   { \n     System . err . println ( \"No input found\" );  }  finally   { \n   if   ( scanner   !=   null ) \n     scanner . close ();  }    Here Lines 2-4 keep the basic tasks together, and all the clean up tasks are grouped together in Lines 18-19.  Lines 8-16 handles the exceptions.  We no longer rely on global variable to convey the type of exceptions, or special return value to indicate exceptions.   What if we want the calling method to handle the exception?  Then, we simply do not do anything (i.e., do not catch the exception) and let the exception propagates to the calling method automatically.   Error vs. Exception in Java  We have been using the term error and exception loosely.  Java has different classes for  Error  and  Exception .   Error  is for situations where the program should terminate as generally there is no way to recover.  For instance, when the heap is full ( OutOfMemoryError ) or the stack is full ( StackOverflowError ).  Exceptions are for situations where it is still possible to reasonably recover from the error.    Combining Multiple Catches  In cases where the code to handle the exceptions is the same, you can 1\n2\n3 catch (FileNotFoundException | InputMismatchException | NoSuchElementException e) {\n    System.err.println(e);\n}    Here is a more detailed description of the control flow of exceptions.  Consider we have a  try - catch - finally  block that catches two exceptions  E1  and  E2 .  Inside the  try  block, we call a method  m1() ;  m1()  calls  m2() ;  m2()  calls  m3() , and  m3()  calls  m4() .   In a normal (no exception) situation, the control flow looks like this:   The statements in  try  block is executed, followed by the statements in  finally  block.  Now, let's suppose something went wrong deep inside the nested call, in  m4() .  One of the statement executes  throw new E2(); , which causes the execution in  m4()  to stop.  JVM now looks for the block of code that catches  E2 , going down the call stack, until it can find a place where the exception is handled.  In this example, we suppose that none of  m1() - m4()  handles (i.e.,  catch ) the exception.  Thus, JVM then jumps to the code that handles  E2 .  Finally, JVM executes the  finally  block.",
            "title": "Exceptions"
        },
        {
            "location": "/lec4/index.html#checked-exceptions",
            "text": "There are two types of exceptions in Java:  checked  and  unchecked  exceptions:   A checked exception is something that the programmer should anticipate and handle.  For instance, when you open a file, you should anticipate that in some cases, the file cannot be open.     An unchecked exception is something that the programmer does not anticipate, and usually is a result of bugs.  For example, when you try to call  p.distanceTo(q)  but  p  is  null , resulting in a  NullPointerException  being thrown.     We need to catch all checked exceptions or let it propagate to the calling method.  Otherwise, the program will not compile.    For unchecked exceptions, even though we could catch it, it makes more sense to eliminate the bugs.  In Java, unchecked exceptions are subclasses of  RuntimeException .  All  Error s are unchecked.  All methods that throw checked exception need to  specify  the checked exception(s).  For example, if we want to put the code to open a file and read an  int  from it into a function, and want the calling function to deal with the exception, this is what we should do:  1\n2\n3\n4\n5\n6\n7\n8 public   static   int   readIntFromFile ( String   filename ) \n   throws   FileNotFoundException   { \n   FileReader   reader   =   new   FileReader ( filename ); \n   Scanner   scanner   =   new   Scanner ( reader ); \n   int   numOfPoints   =   scanner . nextInt ();     \n   scanner . close (); \n   return   numOfPoints ;  }    Note Line 2 specify that this method might throw  FileNotFoundException .    A checked exception must be either caught or thrown to calling function, except  main , which has no calling function to throw to.  If the main() does not catch an checked exception, the running program exits, and the exception is revealed to the user -- this is generally considered as bad programming.  The two other exceptions from the examples above  InputMismatchException  and  NoSuchElementException  are subclasses of  RuntimeException , and therefore are unchecked.",
            "title": "Checked Exceptions"
        },
        {
            "location": "/lec4/index.html#generating-exception",
            "text": "The Circle constructor in Lab 1 requires the distance  \\(d\\)  between two input points to be  \\(0 < d \\le 2r\\) .  If the condition is violated, you are asked to return an invalid circle.  Another way is to throw an unchecked exception  IllegalArgumentException  if one of the above two conditions is met.    1\n2\n3\n4\n5\n6\n7 public   Circle ( Point   p ,   Point   q ,   double   r ,   boolean   centerOnLeft )   { \n   if   ( p . distanceTo ( q )   >   2 * r )   { \n     throw   new   IllegalArgumentException ( \"Input points are too far apart\" ); \n   } \n   if   ( p . equals ( q ))   { \n     throw   new   IllegalArgumentException ( \"Input points coincide\" ); \n   }    Note that difference between  throw  and  throws : the former is to generate an exception, the latter to specify that the exception(s) thrown by a method.  If you find that none of the  exceptions provided by Java  meet your needs, you can create your own exceptions, by simply inheriting from one of the existing ones.\nBut, you should only do so if there is a good reason, for instance, to provide additional useful information to the exception handler.",
            "title": "Generating Exception"
        },
        {
            "location": "/lec4/index.html#overriding-method-that-throws-exceptions",
            "text": "When you override a method that throws a checked exception, the overriding method must throw only the same, or a more specific checked exception, than the overridden method.  This rule enforces the Liskov Substitution Principle.  The caller of the overridden method cannot expect any new checked exception than what has already been \"promised\" in the method specification.",
            "title": "Overriding Method that Throws Exceptions"
        },
        {
            "location": "/lec4/index.html#good-practices-for-exception-handling",
            "text": "",
            "title": "Good Practices for Exception Handling"
        },
        {
            "location": "/lec4/index.html#catch-exceptions-to-clean-up",
            "text": "While it is convenient to just let the calling method deals with exceptions (\"Hey! Not my problem!\"), it is not always responsible to do so.  Consider the example earlier, where  m1() ,  m2() , and  m3()  do not handle exception E2.  Let's say that E2 is a checked exception, and it is possible to react to this and let the program continues properly.  Also, suppose that  m2()  allocated some system resources (e.g., temporary files, network connections) at the beginning of the method, and deallocated the resources at the end of the method.  Not handling the exception, means that, code that deallocates these resources does not get called when an exception occur!  It is better for  m2()  to catch the exception, handle the resource deallocation in a  finally  block.  If there is a need for the calling methods to be aware of the exception,  m2()  can always re-throw the exception:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 public   void   m2 ()   throws   E2   { \n   try   { \n     // setup resources \n     m3 (); \n   } \n   catch   ( E2   e )   { \n     throw   e ; \n   } \n   finally   { \n     // clean up resources \n   }  }    Note that the  finally  block is always executed even when  return  or  throw  is called in a  catch  block.",
            "title": "Catch Exceptions to Clean Up"
        },
        {
            "location": "/lec4/index.html#catch-all-exception-is-bad",
            "text": "Sometimes, you just want to focus on the main logic of the program and get it working instead of dealing with the exceptions.  Since Java uses checked exceptions, it forces you to handle the exceptions or else your code will not compile.  One way to quickly get around this is to write:  1\n2\n3\n4 try   { \n   // your code  }  catch   ( Exception   e )   {}    to shut the compiler up.  DO NOT DO THIS.  All exceptions thrown are now silently ignored!    Can we do  worse ?  How about the following: 1\n2\n3\n4 try   { \n   // your code  }  catch   ( Error   e )   {}   \n\ud83d\ude31",
            "title": "Catch All Exception is Bad"
        },
        {
            "location": "/lec4/index.html#overreacting",
            "text": "Do not exit a program just because of exception.  This would prevent the calling function from cleaning up their resources.  Worse, do not exit a program silently.  1\n2\n3\n4\n5\n6 try   { \n   // your code  }  catch   ( Exception   e )   { \n   System . exit ( 0 );  }",
            "title": "Overreacting"
        },
        {
            "location": "/lec4/index.html#do-not-break-abstraction-barrier",
            "text": "Sometimes, letting the calling method handles the exception causes the implementation details to be leak, and make it harder to change the implementation later.  For instance, suppose we design a class  ClassRoster  with a method  getStudents() , which reads the list of students from a text file.  1\n2\n3\n4\n5\n6 class   ClassRoster   { \n    : \n   public   Students []   getStudents ()   throws   FileNotFoundException   { \n     : \n   }  }   \nLater, we change the implementation to reading the list from an SQL database, 1\n2\n3\n4\n5\n6 class   ClassRoster   { \n    : \n   public   Students []   getStudents ()   throws   SQLException   { \n     : \n   }  }   \nWe should, as much as possible, handle the implementation specific exceptions within the abstraction barrier.",
            "title": "Do Not Break Abstraction Barrier"
        },
        {
            "location": "/lec4/index.html#generics",
            "text": "Third topic of today is on generics.    Suppose you want to create a new class that encapsulates a queue of circles.  You wrote:  1\n2\n3\n4\n5\n6\n7\n8\n9 class   CircleQueue   { \n   private   Circle []   circles ; \n    : \n   public   CircleQueue ( int   size )   {...} \n   public   boolean   isFull() { ...} \n   public   boolean   isEmpty() { ...} \n   public   void   enqueue ( Circle   c )   {...} \n   public   Circle   dequeue() { ...}  }    Later, you found that you need a new class that encapsulates a queue of points.  You wrote: 1\n2\n3\n4\n5\n6\n7\n8\n9 class   PointQueue   { \n   private   Point []   points ; \n    : \n   public   PointQueue ( int   size )   {...} \n   public   boolean   isFull() { ...} \n   public   boolean   isEmpty() { ...} \n   public   void   enqueue ( Point   p )   {...} \n   public   Point   dequeue() { ...}  }    And you realize that there are actually a lot of similar code.  Invoking the  abstraction principle , which states that  \"Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts \", you decided to create an queue of Objects to replace the two classes above.  1\n2\n3\n4\n5\n6\n7\n8\n9 class   ObjectQueue   { \n   private   Object []   objects ; \n    : \n   public   ObjectQueue ( int   size )   {...} \n   public   boolean   isFull ()   {...} \n   public   boolean   isEmpty ()   {...} \n   public   void   enqueue ( Object   o )   {...} \n   public   Object   dequeue ()   {...}  }    Now you have a very general class, that you can use to store objects of any kind, including a queue of strings, a queue of colors, etc.  You are quite pleased with yourself, as you should!  The early Java collection library contains many such generic data structures that stores elements of type  Object .  To create a queue of 10 circles and add some circles, you just need: 1\n2\n3\n4 ObjectQueue   cq   =   new   ObjectQueue ( 10 );  cq . enqueue ( new   Circle ( new   Point ( 0 ,   0 ),   10 ));  cq . enqueue ( new   Circle ( new   Point ( 1 ,   1 ),   5 )); \n  :    Getting a circle out of the queue is a bit more troublesome: 1 Circle   c   =   cq . dequeue ();   \nWould generate a compilation error, since we cannot assign a variable of type  Object  to a variable of type  Circle .  We can get around the compilation error by typecasting it into a  Circle , since  Circle  is a subclass of  Object , Java compiler would let it go, assuming that you know what you are doing. 1 Circle   c   =   ( Circle ) cq . dequeue ();    The code above, however, could be dangerous.  For instance, it might generate a runtime  ClassCastException  if there is an object in the queue that is not  Circle  or its subclass.  To avoid runtime error, we should check the type first:  1\n2\n3\n4 Object   o   =   cq . dequeue ();  if   ( o   instanceof   Circle )   { \n     Circle   c   =   ( Circle ) o ;  }    Wouldn't it be nice if we can still have general code, but let the compiler generates an error if we try to add a non- Circle  into our queue of  Circle  objects, so that we don't have to check for the type of an object all the time?  Java 5 introduces generics, which is a significant improvement to the type systems in Java.  It allows a  generic class  of some type  T  to be written:  1\n2\n3\n4\n5\n6\n7\n8\n9 class   Queue < T >   { \n   private   T []   objects ; \n    : \n   public   Queue < T >( int   size )   {...} \n   public   boolean   isFull ()   {...} \n   public   boolean   isEmpty ()   {...} \n   public   void   enqueue ( T   o )   {...} \n   public   T   dequeue ()   {...}  }    T  is known as  type parameter .\nThe same code as before can be written as:  1\n2\n3\n4 Queue < Circle >   cq   =   new   Queue < Circle >( 10 );  cq . enqueue ( new   Circle ( new   Point ( 0 ,   0 ),   10 ));  cq . enqueue ( new   Circle ( new   Point ( 1 ,   1 ),   5 ));  Circle   c   =   cq . dequeue ();    Here, we passed  Circle  as  type argument  to  T , creating a  parameterized type   Queue<Circle> .  In Line 4, we no longer need to cast, and there is no danger of runtime error due to object of the wrong class being added to the queue, for doing this: 1\n2 Queue < Circle >   cq   =   new   Queue < Circle >( 10 );  cq . enqueue ( new   Point ( 1 ,   3 ));   \nwill generate a compile time error!    Diamond Notation  We can use the short form  <>  in the constructor as the compiler can infer the type: 1 Queue < Circle >   cq   =   new   Queue <>( 10 );     We can use parameterized type anywhere a type is used, including as type argument.  If we want to have a queue of queue of circle, we can:\n     1 Queue < Queue < Circle >>   cqq   =   new   Queue <>( 10 );    We will see many examples of generics next lecture.      The actual memory store is more complex that what is presented here, but for the purpose of this lecture, we only consider heap and stack.  Heap and stack is also common to all the languages and runtime system I am aware of.\u00a0 \u21a9    Unlike earlier figures, I didn't show the class metadata and method tables for simplicity.\u00a0 \u21a9    This is not that difference from how an OS handles function call in a machine code, as you will see in CS2100/CS2106.\u00a0 \u21a9    The other things are JVM implementation independent and not relevant to our discussion here.\u00a0 \u21a9",
            "title": "Generics"
        },
        {
            "location": "/lec5/index.html",
            "text": "Lecture 5: Numbers, Strings, Collections\n\n\nLearning Outcomes\n\n\n\n\nFamiliar with wrapper classes with primitives and autoboxing / unboxing; when to use primitive types and when to use wrapper classes\n\n\nUnderstand the differences between mutable and immutable objects, using \nString\n and \nStringBuilder\n as example\n\n\nFamiliar with the \nComparator\n and \nIterator\n interfaces\n\n\nUnderstand more about generics: type erasure, generic methods, wildcard types, bounded wild card types.\n\n\nFamiliar with Java collection frameworks: \nSet\n, \nList\n, \nMap\n and their concrete class \nHashSet\n, \nLinkedList\n, \nArrayList\n, and \nHashMap\n.\n\n\nAware of the other classes in Java Collection and is comfortable to look them up by reading the Java documentation.\n\n\nUnderstand there are differences between the collection classes and know when to use which one\n\n\n\n\nWrapper Classes\n\n\n\n\nEarlier Version of This Note\n\n\nAn earlier version of this note includes a discussion on passing-by-reference and motiving the use of wrapper class through swapping, which is wrong.  Please ignore that.\n\n\n\n\nRecall the generic class \nQueue<E>\n which we talked in \nLecture 4\n.  We can declare a \nQueue\n of \nPoint\n, a \nQueue\n of \nCircle\n, etc, but we cannot create a \nQueue\n of \nint\n or a \nQueue\n of \nboolean\n.  We can only pass in a class name to the type parameter \nE\n, not a primitive type.  So, to create a queue of integers, we cannot use \nQueue<int>\n -- we have to use \nQueue<Integer>\n.\n\n\nJava provides a set of wrapper class:  one for each primitive type: \nBoolean\n, \nByte\n, \nCharacter\n, \nInteger\n, \nDouble\n, \nLong\n, \nFloat\n, and \nShort\n.\n\n\n1\n2\n3\n4\nQueue\n<\nInteger\n>\n \niq\n \n=\n \nnew\n \nQueue\n<\nInteger\n>(\n10\n);\n\n\ncq\n.\nenqueue\n(\nnew\n \nInteger\n(\n4\n));\n\n\ncq\n.\nenqueue\n(\nnew\n \nInteger\n(\n8\n));\n\n\ncq\n.\nenqueue\n(\nnew\n \nInteger\n(\n15\n));\n\n\n\n\n\n\n\nJava 5 introduces something called \nautoboxing\n and \nunboxing\n, which creates the wrapper objects automatically (autoboxing) and retrieves its value (unboxing) automatically.  With autoboxing and unboxing, we can just write:\n\n\n1\n2\n3\n4\nQueue\n<\nInteger\n>\n \niq\n \n=\n \nnew\n \nQueue\n<\nInteger\n>(\n10\n);\n\n\ncq\n.\nenqueue\n(\n4\n);\n\n\ncq\n.\nenqueue\n(\n8\n);\n\n\ncq\n.\nenqueue\n(\n15\n);\n\n\n\n\n\n\n\nNote that \nenqueue\n expects an \nInteger\n object, but we pass in an \nint\n.  This would cause the \nint\n variable to automatically be boxed (i.e., be wrapped in Integer object) and put onto the call stack of \nenqueue\n.\n\n\n\n\nType Erasure\n\n\nThe reason why Java compiler does not allow generic class with primitive types, is that internally, the compiler uses \ntype erasure\n to implement generic class.  Type erasure just means that during compile time, the compiler replaces the type parameter with the most general type.  In the example given in \nLecture 4\n, \nE\n in \nQueue<E>\n is replaced with \nObject\n,  The compiler then inserts necessary cast to convert the \nObject\n to the type argument (e.g., \nCircle\n), exactly like how it is done in the \nObjectQueue\n example, and additional checks to ensure that only objects of given type is used as \nE\n (e.g., cannot add \nPoint\n to \nQueue<Circle>\n).  Since primitive types are not subclass \nObject\n, replacing \nE\n with primitive types would not work with type erasure.\n\n\nNote that, due to type erasure at compile time, Java has no information about \nE\n at runtime.\n\n\n\n\nIn short, wrapper class allows us to use primitive types to parameterize a generic class, and we do not have to write code to box and unbox the primitive types.\n\n\nPerformance Penalty\n\n\nIf the wrapper class is so great, why not use it all the time and forget about primitive types?\n\n\nThe answer: performance.  Because using an object comes with the cost of allocating memory for the object and collecting of garbage afterwards, it is less efficient than primitive types.  Consider the following two programs:\n\n\n1\n2\n3\n4\n5\nDouble\n \nsum\n;\n\n\nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n<\n \nInteger\n.\nMAX_VALUE\n;\n \ni\n++)\n\n\n{\n\n    \nsum\n \n+=\n \ni\n;\n\n\n}\n\n\n\n\n\nvs.\n\n1\n2\n3\n4\n5\ndouble\n \nsum\n;\n\n\nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n<\n \nInteger\n.\nMAX_VALUE\n;\n \ni\n++)\n\n\n{\n\n    \nsum\n \n+=\n \ni\n;\n\n\n}\n\n\n\n\n\n\nThe second one is 2 times faster!  Due to autoboxing and unboxing, the cost of creating objects become hidden and often forgotten.\n\n\nAll primitive wrapper class objects are immutable.\nWhat this means is that once you create an object, it cannot be changed.  Thus, everytime \nsum\n in the example above is updated, a new object gets created!\n\n\nString and StringBuilder\n\n\nAnother place with hidden cost for object creation and allocation is when dealing with \nString\n.\n\n\nA \nString\n object is also \nimmutable\n.\nWhen we do:\n\n1\n2\n3\nString\n \nwords\n \n=\n \n\"\"\n;\n\n\nwords\n \n+=\n \n\"Hello \"\n;\n\n\nwords\n \n+=\n \n\"World!\"\n;\n\n\n\n\n\nA new \nString\n object is created everytime we concatenate it with another \nString\n.\n\n\nJava provides a mutable version of \nString\n, called \n[StringBuilder](https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html)\n.  To build up a string, we could do:\n\n1\n2\n3\n4\nStringBuilder\n \nwordsBuilder\n \n=\n \nnew\n \nStringBuilder\n();\n\n\nwordsBuilder\n.\nappend\n(\n\"Hello \"\n);\n\n\nwordsBuilder\n.\nappend\n(\n\"World!\"\n);\n\n\nString\n \nwords\n \n=\n \nwordsBuilder\n.\ntoString\n();\n\n\n\n\n\n\nCode that uses \nStringBuilder\n is not as intuitive and readable than just using the \n+\n operator.  My preference is to use \nString\n and \n+\n for occasional concatenation, and \nStringBuilder\n for frequent concatenation that could become performance bottleneck.\n\n\nEquality for Strings and Numbers\n\n\nThe following is a common bug, so worthy of a special mention here, with its own header!\n\n\nOne common mistake when comparing strings and numbers is to do the following:\n\n\n1\n2\n3\nString\n \ns1\n \n=\n \nnew\n \nString\n(\n\"Hello\"\n);\n\n\nString\n \ns2\n \n=\n \nnew\n \nString\n(\n\"Hello\"\n);\n\n\nif\n \n(\ns1\n \n==\n \ns2\n)\n \n{\n \n...\n \n}\n\n\n\n\n\n\n\nor\n\n1\n2\n3\nInteger\n \ni1\n \n=\n \n2342\n;\n\n\nInteger\n \ni2\n \n=\n \n2342\n;\n\n\nif\n \n(\ni1\n \n==\n \ni2\n)\n \n{\n \n...\n \n}\n\n\n\n\n\n\nRemember that \n==\n compares only references: whether the two references are pointing the the same object or not.   The \nequals\n method has been overridden to compare if the values are the same or not.  So, the right way to compare two strings or two numbers are:\n\n\n1\n2\nif\n \n(\ns1\n.\nequals\n(\ns2\n))\n \n{\n \n...\n \n}\n\n\nif\n \n(\ni1\n.\nequals\n(\ni2\n))\n \n{\n \n...\n \n}\n\n\n\n\n\n\n\nIf you try:\n        \n1\n2\n3\nInteger\n \ni1\n \n=\n \n1\n;\n\n\nInteger\n \ni2\n \n=\n \n1\n;\n\n\nif\n \n(\ni1\n \n==\n \ni2\n)\n \n{\n \n...\n \n}\n\n\n\n\n\nIt might return \ntrue\n!  This behaviour is caused by some autoboxing optimization in the Integer class so that it does not create too many objects for frequently requested values.  It is called \nInteger caching\n.  If another \nInteger\n object with the same value has been autoboxed before, JVM just returns that object instead of returning a new one.\n        Do not rely on Integer caching for proper comparisons of \n==\n.  Use \nequals()\n, always.\n\n\nSimilarly, if you try:\n\n1\n2\n3\nString\n \ns1\n \n=\n \n\"hello\"\n;\n\n\nString\n \ns2\n \n=\n \n\"hello\"\n;\n\n\nif\n \n(\ns1\n \n==\n \ns2\n)\n \n{\n \n...\n \n}\n\n\n\n\n\nJava always returns \ntrue\n.  This is because, the Java \nString\n class internally maintain a pool of \ninterned string\n objects for all string literals and expression, as an optimization.\n\n\nJava Collections\n\n\nNow, we turn our attention to the Java Collection Framework.  Java provides a rich set of classes for managing and manipulating data.  They efficiently implement many useful data structures (hash tables, red black trees, etc.) and algorithms (sorting, searching, etc.) so that we no longer have to.  As computer scientists, it is still very important for us to know how these data structures and algorithms can be implemented, how to prove some behaviors (such as running time) and their correctness, how certain trade offs are made, etc. They are so important that we have two modules dedicated to them: CS2040 and CS3230 in the core CS curriculum.\n\n\nFor CS2030, however, we focus on how to use them.\n\n\nCollection\n\n\nOne of the basic interface in Java Collection Framework is \nCollection<E>\n, it looks like:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\npublic\n \ninterface\n \nCollection\n<\nE\n>\n \nextends\n \nIterable\n<\nE\n>\n \n{\n\n  \nboolean\n \nadd\n(\nE\n \ne\n);\n\n  \nboolean\n \ncontains\n(\nObject\n \no\n);\n\n  \nboolean\n \nremove\n(\nObject\n \no\n);\n\n  \nvoid\n \nclear\n();\n\n  \nboolean\n \nisEmpty\n();\n\n  \nint\n \nsize\n();\n\n\n  \nboolean\n \nequals\n(\nObject\n \no\n);\n\n  \nint\n \nhashCode\n();\n\n\n  \nObject\n[]\n \ntoArray\n();\n\n  \n<\nT\n>\n \nT\n[]\n \ntoArray\n(\nT\n[]\n \na\n);\n\n\n  \nboolean\n \naddAll\n(\nCollection\n<?\n \nextends\n \nE\n>\n \nc\n);\n\n  \nboolean\n \ncontainsAll\n(\nCollection\n<?>\n \nc\n);\n\n  \nboolean\n \nremoveAll\n(\nCollection\n<?>\n \nc\n);\n\n  \nboolean\n \nretainAll\n(\nCollection\n<?>\n \nc\n);\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThere are some newly added methods in Java 8 that we will visit in the second half of this module, but first,\nlet's try to understand what the definition above means.  First, like a generic class that you have seen, \nCollection\n is a \ngeneric interface\n parameterized with a type parameter \nE\n.  It extends a generic \nIterable<E>\n interface (we will get to this later).\n\n\nThe first six methods of \nCollection<E>\n should be self-explanatory.  \nadd\n adds an element into the collection; \ncontains\n checks if a given object is in the collection;  \nremove\n removes a single instance of the given object from the collection;  \nclear\n removes all objects from the collection;  \nisEmpty()\n checks if the collection has no elements or not; and finally, \nsize\n returns the number of elements.\n\n\nOne point of note is that \ncontains()\n relies of the implementation of \nequals()\n to check if the object exists in the collection or not.  Similarly, \nremove()\n relies on \nequals()\n to find the matching objects.  We said earlier that it is useful to override the \nequals\n methods of \nObject\n instead of implement our own \nequals\n because the overriden \nequals()\n will be called elsewhere.  This is one of the \"elsewhere\" I mentioned.  The documentation of \ncontains(o)\n mentions that it is gurantee to return \ntrue\n if there exists an element \ne\n such that \ne.equals(o)\n or \ne == null\n (if \no == null\n).  Ditto for \nremove(o)\n.\n\n\n\n\nNon-generic Methods\n\n\nYou might notice that, instead of \ncontains(E e)\nand \nremove(E e)\n, the \nCollection\n interface uses \ncontains(Object o)\n and \nremove(Object o)\n.  This little inconsistency, however, is harmless.  For instance, if you have a collection intended for circles only, adding a non-circle could be disastrous.  Trying to remove an non-circle or checking for a non-circle, would just return false.\nMore information can be found on this \nStackOverflow\n thread.\n\n\n\n\nJava Collection Framework allows classes that implements an interface to throw an \nUnsupportedOperationException\n if the implementation decides not to implement one of the operations (but still need to have the method in the class).\n\n\nThe methods on Lines 9-10 should also be familiar.  A collection can check if it is equal to another collection (which inevitably also a subclass of \nObject\n).  As before, we will explain why we need \nhashCode()\n later.  Just bear with it a little longer.\n\n\nThe method \ntoArray()\n on Line 12 returns an array containing all the elements inside this collection.  The second overloaded \ntoArray\n method takes in an array of generic type \nT\n.  If the collections fit in \na\n, \na\n is filled and returned.  Else, it allocates a new array of type \nT\n and returned.\n\n\nThe second \ntoArray\n method is a \ngeneric method\n.  It is declared with \n<T>\n to indicate that the method can take any type \nT\n.  When we call generic method, we do not have to pass in a type argument.  Instead, the Java compiler infers the type from the arguments.  If we call \ntoArray(new String[10)\n, it would return a \nString[]\n, if we call \ntoArray(new Point[0])\n, it would return a \nPoint[]\n and so on.\nIt is the caller resonsibility to pass in the right type, otherwise, an \nArrayStoreException\n will be thrown.\n\n\nThe next group of methods operate on another collection.  \naddAll\n add all the elements of collection \nc\n into the current collection; \ncontainsAll\n checks if all the elements of collection \nc\n are contained in the current collection; \nremoveAll\n removes all elements from collection \nc\n, and finally, \nretainsAll\n remove all elements not in \nc\n.\n\n\nWhat is more interesting about the methods is the type of \nc\n.  In \ncontainsAll\n, for instance, the collection \nc\n has the type \nCollection\n<?\n>\n.  \n?\n is known as wildcard type, or \nunknown\n type.  This notation is used to denote the supertype of all parameterized interfaces created from \nCollection<E>\n.\n\n\nIn \naddAll\n, \nc\n is declared as \nCollection\n<?\n \nextends\n \nE\n>\n.  The type parameter \n<?\n \nextends\n \nE\n>\n is an example of bounded type in generics.  It means that the type argument is still unknown, but we know that it extends \nE\n.  So, suppose I have a parameterized interface \nCollection<Circle>\n and \nPaintedCircle extends Circle\n, I can pass in a collection that has type \nCollection<PaintedCircle>\n.\n\n\nFinally, let's get back to supertype of \nCollection<E>\n, \nIterable<E>\n.  The \nIterable<E>\n interface provides only a single interface, \nIterator<E> iterator()\n, which returns a generic interface called \nIterator<E>\n over the collection.  An \nIterator\n is another interface that allows us to go through all the elements in a \nCollection<E>\n.  It has four method interfaces, three of which we will talk about today: \nhasNext()\n, which returns if there is a next element in the \nCollection<E>\n; \nnext()\n, which returns the next element (with paramterized type \nE\n; and \nremove()\n, which removes the last returned element from the \nCollection<E>\n.\n\n\nOK, so far I have talked about lots of methods but haven't showed any code.  This is because Java Collection Framework does not provide a class that implements the \nCollection<E>\n directly.  The documentation recommends that we implement the \nCollection<E>\n interface\n1\n if we want a collection of objects that allows duplicates and does not care about the orders.\n\n\nLet's move to somethat Java does have a concrete class implementation.\n\n\nSet and List\n\n\nThe \nSet<E>\n and \nList<E>\n interfaces extend the \nCollection<E>\n interface.  \nSet<E>\n is meant for implementing a collection of objects that does not allow duplicates (but still does not care about order of elements), while \nList<E>\n is for implementing a collection of objects that allow duplicates, but the order of elements matters.\n\n\nMathematically, a \nCollection<E>\n is used to represent a bag, \nSet<E>\n, a set, and \nList<E>\n, a sequence.\n\n\nThe \nList<E>\n interface has additional methods for adding and removing elements.  \nadd(e)\n by default would just add to the end of the list.  \nadd(i, e)\n inserts \ne\n to position \ni\n.  \nget(i)\n returns the element at position \ni\n, \nremove(i)\n removes the elements at position \ni\n; \nset(i,e)\n replace the \ni\n-th element with \ne\n.\n\n\nUseful classes in Java collection that implements \nList<E>\n includes \nArrayList\n and \nLinkedList\n, and useful classhes that implements \nSet<E>\n includes \nHashSet\n.\n\n\nLet's see some examples:\n\n\n1\n2\n3\n4\n5\nList\n<\nString\n>\n \nnames\n \n=\n \nnew\n \nArrayList\n();\n\n\nnames\n.\nadd\n(\n\"Cersei\"\n);\n\n\nnames\n.\nadd\n(\n\"Joffrey\"\n);\n\n\nnames\n.\nadd\n(\n0\n,\n \n\"Gregor\"\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\nnames\n.\nget\n(\n1\n));\n\n\n\n\n\n\n\nLine 1 above creates a empty array list.  The second line adds two strings into the list, each appending them to the list.  After executing Line 3, it would contain the sequence \n<\"Cersei\",\"Joffrey\">\n.  Line 4 inserts the string \n\"Gregor\"\n to position 0, moving the rest of the list down by 1 position.  The sequence is now \n<\"Gregor\",\"Cersei\",\"Joffrey\">\n.  Finally, calling \nget(1)\n would return the string \n\"Cersei\"\n.\n\n\nNote that we declare \nnames\n with the interface type \nList<String>\n.  We should always do this to keep our code flexible.  If we want to change our implementation to \nLinkedList\n, we only need to change Line 1 to:\n\n1\nList\n<\nString\n>\n \nnames\n \n=\n \nnew\n \nLinkedList\n();\n\n\n\n\n\n\nComparator\n\n\nThe \nList<E>\n interface also specifies a \nsort\n method, with the following specification:\n\n1\ndefault\n \nvoid\n \nsort\n(\nComparator\n<?\n \nsuper\n \nE\n>\n \nc\n)\n\n\n\n\n\n\nRemember at the end of Lecture 3 when we said there are \"unpure\" interfaces, that is interface that comes with implementation?  This is one of them.  The keyword \ndefault\n indicates that the interface \nList<E>\n comes with a default implementation of \nsort\n method.  So a class that implements the interface needs not implement it again if they do not want to.\n\n\nThis method specification is also interesting and worth looking closer.  It takes in an object \nc\n with generic interface \nComparator\n<?\n \nsuper\n \nE\n>\n.  Like \n<?\n \nextends\n \nE\n>\n that we have seen before, this is a \nbounded\n wildcard type.  While \n<?\n \nextends\n \nE\n>\n is an unknown type upper bounded by \nE\n, \n<?\n \nsuper\n \nE\n>\n is an unknown type lower bounded by \nE\n.  This means that we can pass in \nE\n or any supertype of E.\n\n\nWhat does the \nComparator\n interface do?  We can specify how to compare two elements of a given type, by implementing a \ncompare()\n method.\n\ncompare(o1,o2)\n should return 0 if the two elements are equals, a negative integer if o1 is \"less than\" o2, and a positive integer otherwise.\n\n\nLet's write \nComparator\n class\n2\n:\n\n\n1\n2\n3\n4\n5\nclass\n \nNameComparator\n \nimplements\n \nComparator\n<\nString\n>\n \n{\n\n    \npublic\n \nint\n \ncompare\n(\nString\n \ns1\n,\n \nString\n \ns2\n)\n \n{\n\n        \nreturn\n \ns1\n.\ncompareTo\n(\ns2\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nIn the above, we use the \ncompareTo\n method provided by the \nString\n class to do the comparison.  With the above, we can now sort the \nnames\n:\n\n\n1\nnames\n.\nsort\n(\nnew\n \nNameComparator\n());\n\n\n\n\n\n\n\nThis would result in the sequence being changed to \n<\"Cersei\",\"Gregor\",\"Joffrey\">\n.\n\n\nMap\n\n\nOne of the more powerful data structures provided by Java Collection is maps (also known as dictionary in other languages).  A map allows us to store a (unique key, value) pair into the collection, and retrieve the value later by looking up the key.\n\n\nThe \nMap<K,V>\n interface is again generic, but this time, has two type parameters, \nK\n for the type of the key, and \nV\n for the type of the value.  These makes the \nMap\n interface flexible -- we can use any type as the key and value.\n\n\nThe two most important methods for \nMap\n is \nput\n and \nget\n:\n\n\n1\n2\n    \nV\n \nput\n(\nK\n \nkey\n,\n \nV\n \nvalue\n);\n\n    \nV\n \nget\n(\nObject\n \nk\n);\n\n\n\n\n\n\n\nA useful class that implements \nMap\n interface is \nHashMap\n:\n\n\n1\n2\n3\n4\nMap\n<\nString\n,\nInteger\n>\n \npopulation\n \n=\n \nnew\n \nHashMap\n<\nString\n,\nInteger\n>();\n\n\npopulation\n.\nput\n(\n\"Oldtown\"\n,\n500000\n);\n\n\npopulation\n.\nput\n(\n\"Kings Landing\"\n,\n500000\n);\n\n\npopulation\n.\nput\n(\n\"Lannisport\"\n,\n300000\n);\n\n\n\n\n\n\n\nLater, if we want to lookup the value, we can:\n\n1\npopulation\n.\nget\n(\n\"Kings Landing\"\n);\n\n\n\n\n\n\nWhich Collection Class?\n\n\nJava provides many collection classes, more than what we have time to go through.  It is important to know which one to use to get the best performance out of them.  For the few classes we have seen:\n\n\n\n\nUse \nHashMap\n if you want to keep a (key, value) pair for lookup later.\n\n\nUse \nHashSet\n if you have a collection of elements with no duplicates and order is not important.\n\n\nUse \nArrayList\n if you have a collection of elements with possibly duplicates and order is important, and retriving a specific location is more important than removing elements from the list.\n\n\nUse \nLinkedList\n if you have a collection of elements with possibly duplicates and order is important, retriving a specific location is less important than removing elements from the list.\n\n\n\n\nYou should understand the reasons above after CS2040.\n\n\nFurther, if you want to check if a given object is contained in the list, then \nArrayList\n and \nLinkedList\n are not good candidates.  \nHashSet\n, on the other hand, can quickly check if an item is already contained in the set.  There is unfortunately no standard collection class that supports fast \ncontain\n and allow duplicates.  Maybe CS2040, you can build you own collection class :)\n\n\nSample Code\n\n\nRequested by some students, I am dumping the code I used in class here.  They are badly written code (not following style guidelines, no comments, etc) edited live in class to demonstrate the concepts -- not meant to be a model of how code should be written.  Here they are:\n\n\nThe following code was used to demonstrate the overhead of using wrapper class unnecessary.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nclass\n \nDable\n \n{\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \n// Double sum = 0.0;\n\n    \ndouble\n \nsum\n \n=\n \n0.0\n;\n\n    \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n<\n \nInteger\n.\nMAX_VALUE\n;\n \ni\n++)\n\n    \n{\n\n          \nsum\n \n+=\n \ni\n;\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\nThe following code was used to demonstrate sorting of an \nArrayList\n.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\nimport\n \njava.util.*\n;\n\n\n\nclass\n \nNameComparator\n \nimplements\n \nComparator\n<\nString\n>\n \n{\n\n  \npublic\n \nint\n \ncompare\n(\nString\n \ns1\n,\n \nString\n \ns2\n)\n \n{\n\n    \n// return (s1.compareTo(s2));\n\n    \n// return (s2.compareTo(s1));\n\n    \nreturn\n \n(\ns2\n.\nlength\n()\n \n-\n \ns1\n.\nlength\n());\n\n  \n}\n\n\n}\n\n\n\nclass\n \nSortedList\n \n{\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \nList\n<\nString\n>\n \nnames\n \n=\n \nnew\n \nArrayList\n<\nString\n>();\n\n\n    \nnames\n.\nadd\n(\n0\n,\n \n\"Joffrey\"\n);\n\n    \nnames\n.\nadd\n(\n1\n,\n \n\"Cersei\"\n);\n\n    \nnames\n.\nadd\n(\n2\n,\n \n\"Meryn\"\n);\n\n    \nnames\n.\nadd\n(\n3\n,\n \n\"Walder\"\n);\n\n    \nnames\n.\nadd\n(\n4\n,\n \n\"Gregor\"\n);\n\n    \nnames\n.\nadd\n(\n5\n,\n \n\"Sandor\"\n);\n\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"Initial List\"\n);\n\n    \nfor\n \n(\nString\n \ni\n:\n \nnames\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n    \n}\n\n\n    \nnames\n.\nsort\n(\nnew\n \nNameComparator\n());\n\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"Sorted List\"\n);\n\n    \nfor\n \n(\nString\n \ni\n:\n \nnames\n)\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\nThe following was used to demonstrate \nHashMap\n.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \njava.util.*\n;\n\n\n\nclass\n \nPopulation\n \n{\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \nMap\n<\nString\n,\nInteger\n>\n \npopulation\n \n=\n \nnew\n \nHashMap\n<\nString\n,\nInteger\n>();\n\n    \npopulation\n.\nput\n(\n\"Oldtown\"\n,\n500000\n);\n\n    \npopulation\n.\nput\n(\n\"Kings Landing\"\n,\n500000\n);\n\n    \npopulation\n.\nput\n(\n\"Lannisport\"\n,\n300000\n);\n\n    \nSystem\n.\nout\n.\nprintln\n(\npopulation\n.\nget\n(\n\"Lannisport\"\n));\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you want to do so, however, it is likely more useful to inherit from the abstract class \nAbstractCollection<E>\n (which implements most of the basic methods of the interface) rather than implementing the interface \nCollection<E>\n directly.\u00a0\n\u21a9\n\n\n\n\n\n\nLater in CS2030, you will see how we significantly reduce the verbosity of this code!  But let's do it the hard way first.\u00a0\n\u21a9",
            "title": "5. Numbers, Strings, Collections"
        },
        {
            "location": "/lec5/index.html#lecture-5-numbers-strings-collections",
            "text": "",
            "title": "Lecture 5: Numbers, Strings, Collections"
        },
        {
            "location": "/lec5/index.html#learning-outcomes",
            "text": "Familiar with wrapper classes with primitives and autoboxing / unboxing; when to use primitive types and when to use wrapper classes  Understand the differences between mutable and immutable objects, using  String  and  StringBuilder  as example  Familiar with the  Comparator  and  Iterator  interfaces  Understand more about generics: type erasure, generic methods, wildcard types, bounded wild card types.  Familiar with Java collection frameworks:  Set ,  List ,  Map  and their concrete class  HashSet ,  LinkedList ,  ArrayList , and  HashMap .  Aware of the other classes in Java Collection and is comfortable to look them up by reading the Java documentation.  Understand there are differences between the collection classes and know when to use which one",
            "title": "Learning Outcomes"
        },
        {
            "location": "/lec5/index.html#wrapper-classes",
            "text": "Earlier Version of This Note  An earlier version of this note includes a discussion on passing-by-reference and motiving the use of wrapper class through swapping, which is wrong.  Please ignore that.   Recall the generic class  Queue<E>  which we talked in  Lecture 4 .  We can declare a  Queue  of  Point , a  Queue  of  Circle , etc, but we cannot create a  Queue  of  int  or a  Queue  of  boolean .  We can only pass in a class name to the type parameter  E , not a primitive type.  So, to create a queue of integers, we cannot use  Queue<int>  -- we have to use  Queue<Integer> .  Java provides a set of wrapper class:  one for each primitive type:  Boolean ,  Byte ,  Character ,  Integer ,  Double ,  Long ,  Float , and  Short .  1\n2\n3\n4 Queue < Integer >   iq   =   new   Queue < Integer >( 10 );  cq . enqueue ( new   Integer ( 4 ));  cq . enqueue ( new   Integer ( 8 ));  cq . enqueue ( new   Integer ( 15 ));    Java 5 introduces something called  autoboxing  and  unboxing , which creates the wrapper objects automatically (autoboxing) and retrieves its value (unboxing) automatically.  With autoboxing and unboxing, we can just write:  1\n2\n3\n4 Queue < Integer >   iq   =   new   Queue < Integer >( 10 );  cq . enqueue ( 4 );  cq . enqueue ( 8 );  cq . enqueue ( 15 );    Note that  enqueue  expects an  Integer  object, but we pass in an  int .  This would cause the  int  variable to automatically be boxed (i.e., be wrapped in Integer object) and put onto the call stack of  enqueue .   Type Erasure  The reason why Java compiler does not allow generic class with primitive types, is that internally, the compiler uses  type erasure  to implement generic class.  Type erasure just means that during compile time, the compiler replaces the type parameter with the most general type.  In the example given in  Lecture 4 ,  E  in  Queue<E>  is replaced with  Object ,  The compiler then inserts necessary cast to convert the  Object  to the type argument (e.g.,  Circle ), exactly like how it is done in the  ObjectQueue  example, and additional checks to ensure that only objects of given type is used as  E  (e.g., cannot add  Point  to  Queue<Circle> ).  Since primitive types are not subclass  Object , replacing  E  with primitive types would not work with type erasure.  Note that, due to type erasure at compile time, Java has no information about  E  at runtime.   In short, wrapper class allows us to use primitive types to parameterize a generic class, and we do not have to write code to box and unbox the primitive types.",
            "title": "Wrapper Classes"
        },
        {
            "location": "/lec5/index.html#performance-penalty",
            "text": "If the wrapper class is so great, why not use it all the time and forget about primitive types?  The answer: performance.  Because using an object comes with the cost of allocating memory for the object and collecting of garbage afterwards, it is less efficient than primitive types.  Consider the following two programs:  1\n2\n3\n4\n5 Double   sum ;  for   ( int   i   =   0 ;   i   <   Integer . MAX_VALUE ;   i ++)  { \n     sum   +=   i ;  }   \nvs. 1\n2\n3\n4\n5 double   sum ;  for   ( int   i   =   0 ;   i   <   Integer . MAX_VALUE ;   i ++)  { \n     sum   +=   i ;  }    The second one is 2 times faster!  Due to autoboxing and unboxing, the cost of creating objects become hidden and often forgotten.  All primitive wrapper class objects are immutable.\nWhat this means is that once you create an object, it cannot be changed.  Thus, everytime  sum  in the example above is updated, a new object gets created!",
            "title": "Performance Penalty"
        },
        {
            "location": "/lec5/index.html#string-and-stringbuilder",
            "text": "Another place with hidden cost for object creation and allocation is when dealing with  String .  A  String  object is also  immutable .\nWhen we do: 1\n2\n3 String   words   =   \"\" ;  words   +=   \"Hello \" ;  words   +=   \"World!\" ;   \nA new  String  object is created everytime we concatenate it with another  String .  Java provides a mutable version of  String , called  [StringBuilder](https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html) .  To build up a string, we could do: 1\n2\n3\n4 StringBuilder   wordsBuilder   =   new   StringBuilder ();  wordsBuilder . append ( \"Hello \" );  wordsBuilder . append ( \"World!\" );  String   words   =   wordsBuilder . toString ();    Code that uses  StringBuilder  is not as intuitive and readable than just using the  +  operator.  My preference is to use  String  and  +  for occasional concatenation, and  StringBuilder  for frequent concatenation that could become performance bottleneck.",
            "title": "String and StringBuilder"
        },
        {
            "location": "/lec5/index.html#equality-for-strings-and-numbers",
            "text": "The following is a common bug, so worthy of a special mention here, with its own header!  One common mistake when comparing strings and numbers is to do the following:  1\n2\n3 String   s1   =   new   String ( \"Hello\" );  String   s2   =   new   String ( \"Hello\" );  if   ( s1   ==   s2 )   {   ...   }    or 1\n2\n3 Integer   i1   =   2342 ;  Integer   i2   =   2342 ;  if   ( i1   ==   i2 )   {   ...   }    Remember that  ==  compares only references: whether the two references are pointing the the same object or not.   The  equals  method has been overridden to compare if the values are the same or not.  So, the right way to compare two strings or two numbers are:  1\n2 if   ( s1 . equals ( s2 ))   {   ...   }  if   ( i1 . equals ( i2 ))   {   ...   }    If you try:\n         1\n2\n3 Integer   i1   =   1 ;  Integer   i2   =   1 ;  if   ( i1   ==   i2 )   {   ...   }   \nIt might return  true !  This behaviour is caused by some autoboxing optimization in the Integer class so that it does not create too many objects for frequently requested values.  It is called  Integer caching .  If another  Integer  object with the same value has been autoboxed before, JVM just returns that object instead of returning a new one.\n        Do not rely on Integer caching for proper comparisons of  == .  Use  equals() , always.  Similarly, if you try: 1\n2\n3 String   s1   =   \"hello\" ;  String   s2   =   \"hello\" ;  if   ( s1   ==   s2 )   {   ...   }   \nJava always returns  true .  This is because, the Java  String  class internally maintain a pool of  interned string  objects for all string literals and expression, as an optimization.",
            "title": "Equality for Strings and Numbers"
        },
        {
            "location": "/lec5/index.html#java-collections",
            "text": "Now, we turn our attention to the Java Collection Framework.  Java provides a rich set of classes for managing and manipulating data.  They efficiently implement many useful data structures (hash tables, red black trees, etc.) and algorithms (sorting, searching, etc.) so that we no longer have to.  As computer scientists, it is still very important for us to know how these data structures and algorithms can be implemented, how to prove some behaviors (such as running time) and their correctness, how certain trade offs are made, etc. They are so important that we have two modules dedicated to them: CS2040 and CS3230 in the core CS curriculum.  For CS2030, however, we focus on how to use them.",
            "title": "Java Collections"
        },
        {
            "location": "/lec5/index.html#collection",
            "text": "One of the basic interface in Java Collection Framework is  Collection<E> , it looks like:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 public   interface   Collection < E >   extends   Iterable < E >   { \n   boolean   add ( E   e ); \n   boolean   contains ( Object   o ); \n   boolean   remove ( Object   o ); \n   void   clear (); \n   boolean   isEmpty (); \n   int   size (); \n\n   boolean   equals ( Object   o ); \n   int   hashCode (); \n\n   Object []   toArray (); \n   < T >   T []   toArray ( T []   a ); \n\n   boolean   addAll ( Collection <?   extends   E >   c ); \n   boolean   containsAll ( Collection <?>   c ); \n   boolean   removeAll ( Collection <?>   c ); \n   boolean   retainAll ( Collection <?>   c ); \n     :  }    There are some newly added methods in Java 8 that we will visit in the second half of this module, but first,\nlet's try to understand what the definition above means.  First, like a generic class that you have seen,  Collection  is a  generic interface  parameterized with a type parameter  E .  It extends a generic  Iterable<E>  interface (we will get to this later).  The first six methods of  Collection<E>  should be self-explanatory.   add  adds an element into the collection;  contains  checks if a given object is in the collection;   remove  removes a single instance of the given object from the collection;   clear  removes all objects from the collection;   isEmpty()  checks if the collection has no elements or not; and finally,  size  returns the number of elements.  One point of note is that  contains()  relies of the implementation of  equals()  to check if the object exists in the collection or not.  Similarly,  remove()  relies on  equals()  to find the matching objects.  We said earlier that it is useful to override the  equals  methods of  Object  instead of implement our own  equals  because the overriden  equals()  will be called elsewhere.  This is one of the \"elsewhere\" I mentioned.  The documentation of  contains(o)  mentions that it is gurantee to return  true  if there exists an element  e  such that  e.equals(o)  or  e == null  (if  o == null ).  Ditto for  remove(o) .   Non-generic Methods  You might notice that, instead of  contains(E e) and  remove(E e) , the  Collection  interface uses  contains(Object o)  and  remove(Object o) .  This little inconsistency, however, is harmless.  For instance, if you have a collection intended for circles only, adding a non-circle could be disastrous.  Trying to remove an non-circle or checking for a non-circle, would just return false.\nMore information can be found on this  StackOverflow  thread.   Java Collection Framework allows classes that implements an interface to throw an  UnsupportedOperationException  if the implementation decides not to implement one of the operations (but still need to have the method in the class).  The methods on Lines 9-10 should also be familiar.  A collection can check if it is equal to another collection (which inevitably also a subclass of  Object ).  As before, we will explain why we need  hashCode()  later.  Just bear with it a little longer.  The method  toArray()  on Line 12 returns an array containing all the elements inside this collection.  The second overloaded  toArray  method takes in an array of generic type  T .  If the collections fit in  a ,  a  is filled and returned.  Else, it allocates a new array of type  T  and returned.  The second  toArray  method is a  generic method .  It is declared with  <T>  to indicate that the method can take any type  T .  When we call generic method, we do not have to pass in a type argument.  Instead, the Java compiler infers the type from the arguments.  If we call  toArray(new String[10) , it would return a  String[] , if we call  toArray(new Point[0]) , it would return a  Point[]  and so on.\nIt is the caller resonsibility to pass in the right type, otherwise, an  ArrayStoreException  will be thrown.  The next group of methods operate on another collection.   addAll  add all the elements of collection  c  into the current collection;  containsAll  checks if all the elements of collection  c  are contained in the current collection;  removeAll  removes all elements from collection  c , and finally,  retainsAll  remove all elements not in  c .  What is more interesting about the methods is the type of  c .  In  containsAll , for instance, the collection  c  has the type  Collection <? > .   ?  is known as wildcard type, or  unknown  type.  This notation is used to denote the supertype of all parameterized interfaces created from  Collection<E> .  In  addAll ,  c  is declared as  Collection <?   extends   E > .  The type parameter  <?   extends   E >  is an example of bounded type in generics.  It means that the type argument is still unknown, but we know that it extends  E .  So, suppose I have a parameterized interface  Collection<Circle>  and  PaintedCircle extends Circle , I can pass in a collection that has type  Collection<PaintedCircle> .  Finally, let's get back to supertype of  Collection<E> ,  Iterable<E> .  The  Iterable<E>  interface provides only a single interface,  Iterator<E> iterator() , which returns a generic interface called  Iterator<E>  over the collection.  An  Iterator  is another interface that allows us to go through all the elements in a  Collection<E> .  It has four method interfaces, three of which we will talk about today:  hasNext() , which returns if there is a next element in the  Collection<E> ;  next() , which returns the next element (with paramterized type  E ; and  remove() , which removes the last returned element from the  Collection<E> .  OK, so far I have talked about lots of methods but haven't showed any code.  This is because Java Collection Framework does not provide a class that implements the  Collection<E>  directly.  The documentation recommends that we implement the  Collection<E>  interface 1  if we want a collection of objects that allows duplicates and does not care about the orders.  Let's move to somethat Java does have a concrete class implementation.",
            "title": "Collection"
        },
        {
            "location": "/lec5/index.html#set-and-list",
            "text": "The  Set<E>  and  List<E>  interfaces extend the  Collection<E>  interface.   Set<E>  is meant for implementing a collection of objects that does not allow duplicates (but still does not care about order of elements), while  List<E>  is for implementing a collection of objects that allow duplicates, but the order of elements matters.  Mathematically, a  Collection<E>  is used to represent a bag,  Set<E> , a set, and  List<E> , a sequence.  The  List<E>  interface has additional methods for adding and removing elements.   add(e)  by default would just add to the end of the list.   add(i, e)  inserts  e  to position  i .   get(i)  returns the element at position  i ,  remove(i)  removes the elements at position  i ;  set(i,e)  replace the  i -th element with  e .  Useful classes in Java collection that implements  List<E>  includes  ArrayList  and  LinkedList , and useful classhes that implements  Set<E>  includes  HashSet .  Let's see some examples:  1\n2\n3\n4\n5 List < String >   names   =   new   ArrayList ();  names . add ( \"Cersei\" );  names . add ( \"Joffrey\" );  names . add ( 0 ,   \"Gregor\" );  System . out . println ( names . get ( 1 ));    Line 1 above creates a empty array list.  The second line adds two strings into the list, each appending them to the list.  After executing Line 3, it would contain the sequence  <\"Cersei\",\"Joffrey\"> .  Line 4 inserts the string  \"Gregor\"  to position 0, moving the rest of the list down by 1 position.  The sequence is now  <\"Gregor\",\"Cersei\",\"Joffrey\"> .  Finally, calling  get(1)  would return the string  \"Cersei\" .  Note that we declare  names  with the interface type  List<String> .  We should always do this to keep our code flexible.  If we want to change our implementation to  LinkedList , we only need to change Line 1 to: 1 List < String >   names   =   new   LinkedList ();",
            "title": "Set and List"
        },
        {
            "location": "/lec5/index.html#comparator",
            "text": "The  List<E>  interface also specifies a  sort  method, with the following specification: 1 default   void   sort ( Comparator <?   super   E >   c )    Remember at the end of Lecture 3 when we said there are \"unpure\" interfaces, that is interface that comes with implementation?  This is one of them.  The keyword  default  indicates that the interface  List<E>  comes with a default implementation of  sort  method.  So a class that implements the interface needs not implement it again if they do not want to.  This method specification is also interesting and worth looking closer.  It takes in an object  c  with generic interface  Comparator <?   super   E > .  Like  <?   extends   E >  that we have seen before, this is a  bounded  wildcard type.  While  <?   extends   E >  is an unknown type upper bounded by  E ,  <?   super   E >  is an unknown type lower bounded by  E .  This means that we can pass in  E  or any supertype of E.  What does the  Comparator  interface do?  We can specify how to compare two elements of a given type, by implementing a  compare()  method. compare(o1,o2)  should return 0 if the two elements are equals, a negative integer if o1 is \"less than\" o2, and a positive integer otherwise.  Let's write  Comparator  class 2 :  1\n2\n3\n4\n5 class   NameComparator   implements   Comparator < String >   { \n     public   int   compare ( String   s1 ,   String   s2 )   { \n         return   s1 . compareTo ( s2 ); \n     }  }    In the above, we use the  compareTo  method provided by the  String  class to do the comparison.  With the above, we can now sort the  names :  1 names . sort ( new   NameComparator ());    This would result in the sequence being changed to  <\"Cersei\",\"Gregor\",\"Joffrey\"> .",
            "title": "Comparator"
        },
        {
            "location": "/lec5/index.html#map",
            "text": "One of the more powerful data structures provided by Java Collection is maps (also known as dictionary in other languages).  A map allows us to store a (unique key, value) pair into the collection, and retrieve the value later by looking up the key.  The  Map<K,V>  interface is again generic, but this time, has two type parameters,  K  for the type of the key, and  V  for the type of the value.  These makes the  Map  interface flexible -- we can use any type as the key and value.  The two most important methods for  Map  is  put  and  get :  1\n2      V   put ( K   key ,   V   value ); \n     V   get ( Object   k );    A useful class that implements  Map  interface is  HashMap :  1\n2\n3\n4 Map < String , Integer >   population   =   new   HashMap < String , Integer >();  population . put ( \"Oldtown\" , 500000 );  population . put ( \"Kings Landing\" , 500000 );  population . put ( \"Lannisport\" , 300000 );    Later, if we want to lookup the value, we can: 1 population . get ( \"Kings Landing\" );",
            "title": "Map"
        },
        {
            "location": "/lec5/index.html#which-collection-class",
            "text": "Java provides many collection classes, more than what we have time to go through.  It is important to know which one to use to get the best performance out of them.  For the few classes we have seen:   Use  HashMap  if you want to keep a (key, value) pair for lookup later.  Use  HashSet  if you have a collection of elements with no duplicates and order is not important.  Use  ArrayList  if you have a collection of elements with possibly duplicates and order is important, and retriving a specific location is more important than removing elements from the list.  Use  LinkedList  if you have a collection of elements with possibly duplicates and order is important, retriving a specific location is less important than removing elements from the list.   You should understand the reasons above after CS2040.  Further, if you want to check if a given object is contained in the list, then  ArrayList  and  LinkedList  are not good candidates.   HashSet , on the other hand, can quickly check if an item is already contained in the set.  There is unfortunately no standard collection class that supports fast  contain  and allow duplicates.  Maybe CS2040, you can build you own collection class :)",
            "title": "Which Collection Class?"
        },
        {
            "location": "/lec5/index.html#sample-code",
            "text": "Requested by some students, I am dumping the code I used in class here.  They are badly written code (not following style guidelines, no comments, etc) edited live in class to demonstrate the concepts -- not meant to be a model of how code should be written.  Here they are:  The following code was used to demonstrate the overhead of using wrapper class unnecessary.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 class   Dable   { \n   public   static   void   main ( String []   args )   { \n     // Double sum = 0.0; \n     double   sum   =   0.0 ; \n     for   ( int   i   =   0 ;   i   <   Integer . MAX_VALUE ;   i ++) \n     { \n           sum   +=   i ; \n     } \n   }  }    The following code was used to demonstrate sorting of an  ArrayList .  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34 import   java.util.* ;  class   NameComparator   implements   Comparator < String >   { \n   public   int   compare ( String   s1 ,   String   s2 )   { \n     // return (s1.compareTo(s2)); \n     // return (s2.compareTo(s1)); \n     return   ( s2 . length ()   -   s1 . length ()); \n   }  }  class   SortedList   { \n   public   static   void   main ( String []   args )   { \n     List < String >   names   =   new   ArrayList < String >(); \n\n     names . add ( 0 ,   \"Joffrey\" ); \n     names . add ( 1 ,   \"Cersei\" ); \n     names . add ( 2 ,   \"Meryn\" ); \n     names . add ( 3 ,   \"Walder\" ); \n     names . add ( 4 ,   \"Gregor\" ); \n     names . add ( 5 ,   \"Sandor\" ); \n\n     System . out . println ( \"Initial List\" ); \n     for   ( String   i :   names )   { \n       System . out . println ( i ); \n     } \n\n     names . sort ( new   NameComparator ()); \n\n     System . out . println ( \"Sorted List\" ); \n     for   ( String   i :   names )   { \n       System . out . println ( i ); \n     } \n   }  }    The following was used to demonstrate  HashMap .  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   java.util.* ;  class   Population   { \n   public   static   void   main ( String []   args )   { \n     Map < String , Integer >   population   =   new   HashMap < String , Integer >(); \n     population . put ( \"Oldtown\" , 500000 ); \n     population . put ( \"Kings Landing\" , 500000 ); \n     population . put ( \"Lannisport\" , 300000 ); \n     System . out . println ( population . get ( \"Lannisport\" )); \n   }  }        If you want to do so, however, it is likely more useful to inherit from the abstract class  AbstractCollection<E>  (which implements most of the basic methods of the interface) rather than implementing the interface  Collection<E>  directly.\u00a0 \u21a9    Later in CS2030, you will see how we significantly reduce the verbosity of this code!  But let's do it the hard way first.\u00a0 \u21a9",
            "title": "Sample Code"
        },
        {
            "location": "/lec6/index.html",
            "text": "Lecture 6: Nested Classes, Enum\n\n\nLearning Outcomes\n\n\n\n\nUnderstand the need to override \nhashCode\n every time \nequals\n is overriden and how to use \nArrays\n' \nhashCode\n method to compute a hash code\n\n\nUnderstand static vs non-static nested class, local class, and anonymous class and when to use / not to use one. \n\n\nUnderstand the rules about final / effectively final variable access of local class and anonymous class\n\n\nAware of the limitation when declaring a new anonymous class\n\n\nUnderstand the concept of variable capture\n\n\nBe aware that \nenum\n is a special case of a \nclass\n and share many features as a class -- not just constants can be defined.\n\n\nUnderstand how \nenum\n is expanded into a subclass of \nEnum\n\n\nKnow that enum constants can have customized fields and methods.\n\n\n\n\nUnfinished Business: Hash Code\n\n\nLast week, we have seen how \nHashMap\n allows we to store a key-value pair and lookup a value with the key, and how \nHashSet\n stores item with no duplicates. \n\n\nInternally, to implement \nput\n, \nHashMap\n calls key's \nhashCode\n to return a \nint\n, which it uses to determine which \"bucket\" to store the (key, value) pair.  When \nget\n, \nHashMap\n again calls \nhashCode\n on the given key to determine which bucket, then it looks for the key in the bucket.  This process, called \nhashing\n, circumvents the need to look through every pair in the map to find the right key.\n\n\nYou will learn more about hashing and hash tables in CS2040.\n\n\nBut, what is important here is that, two keys (two objects, in general) which are the same (\nequals()\n returns \ntrue\n), must have the same \nhashCode()\n.  Otherwise, \nHashMap\n would fail!\n\n\nSo it is important to ensure that if \no1.equals(o2)\n, then \no1.hashCode() == o2.hashCode()\n.  Note that the reverse does not have to be true -- two objects with the same hash code does not have to be equals.\n\n\nThis property is also useful for implementing \nequals()\n.  For a complex object, comparing every field for equality can be expensive.  If we can compare the hash code first, we could filter out objects with different hash code (since they cannot be equal).  We only need to compare field by field if the hash code is the same.\n\n\nDitto for implementation of \nHashSet\n -- to checks if an element to add already exists, \nHashSet\n uses hash code, instead of going through all the elements and compare one by one.\n\n\nLet's see some example:\n\n\n1\n2\n3\n4\n5\n6\nString\n \ns1\n \n=\n \n\"hello\"\n;\n\n\nString\n \ns2\n \n=\n \nnew\n \nString\n(\n\"hello\"\n);\n\n\nString\n \ns3\n \n=\n \n\"goodbye\"\n;\n\n\ns1\n.\nhashCode\n();\n\n\ns2\n.\nhashCode\n();\n\n\ns3\n.\nhashCode\n();\n\n\n\n\n\n\n\nLines 4-5 both return 99162326, an integer value that is calculated using a mathematical function, called \nhash function\n, so that two strings with the same content returns the same value.  Line 6 returns 207022353.\n\n\nWe can see the problem when we don't define \nhashCode()\n.  Take our \nPoint\n class from before:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\njshell\n>\n \nPoint\n \np\n \n=\n \nnew\n \nPoint\n(\n0\n,\n0\n);\n\n\np\n \n==>\n \n(\n0.0\n,\n0.0\n)\n\n\n\njshell\n>\n \nPoint\n \nq\n \n=\n \nnew\n \nPoint\n(\n0\n,\n0\n);\n\n\nq\n \n==>\n \n(\n0.0\n,\n0.0\n)\n\n\n\njshell\n>\n \np\n.\nequals\n(\nq\n);\n\n\n$5\n \n==>\n \ntrue\n\n\n\njshell\n>\n \nHashSet\n<\nPoint\n>\n \nset\n \n=\n \nnew\n \nHashSet\n<>();\n\n\nset\n \n==>\n \n[]\n\n\n\njshell\n>\n \nset\n.\nadd\n(\np\n);\n\n\n$7\n \n==>\n \ntrue\n\n\n\njshell\n>\n \nset\n.\nadd\n(\nq\n);\n\n\n$8\n \n==>\n \ntrue\n\n\n\njshell\n>\n \nset\n\n\nset\n \n==>\n \n[(\n0.0\n,\n0.0\n),\n \n(\n0.0\n,\n0.0\n)]\n\n\n\n\n\n\n\nYou can see that we are adding two points that are equals into the set.  To fix this, we need to write our own \nhashCode()\n.\n\n\nCalculating good hash code is an involved topic, and is best left to the expert (some of you might become expert in this), but for now, we can rely on the static \nhashCode\n methods in the \nArrays\n class to help us.  Let's add the following to \nPoint\n:\n\n\n1\n2\n3\n4\n5\n6\npublic\n \nint\n \nhashCode\n()\n \n{\n\n  \ndouble\n[]\n \na\n \n=\n \nnew\n \ndouble\n[\n2\n];\n\n  \na\n[\n0\n]\n \n=\n \nthis\n.\nx\n;\n\n  \na\n[\n1\n]\n \n=\n \nthis\n.\ny\n;\n\n  \nreturn\n \nArrays\n.\nhashCode\n(\na\n);\n\n\n}\n\n\n\n\n\n\n\nNow, \nset.add(q)\n above returns false -- we can no longer add point (0,0) twice in to the set.\n\n\nRevisit: Wildcards\n\n\nA generic type can be instantiated with a wildcard \n?\n as type argument:\n\n\n1\nArrayList\n<?>\n \nl\n \n=\n \nnew\n \nArrayList\n<\nInteger\n>();\n\n\n\n\n\n\n\nYou can think of \nArrayList\n<?\n>\n as a short form for \nArrayList\n<?\n \nextends\n \nObject\n>\n, which is different from \nArrayList<Object>\n:\n\n\n1\nArrayList\n<\nObject\n>\n \nl\n \n=\n \nnew\n \nArrayList\n<\nInteger\n>();\n\n\n\n\n\n\n\nThe above will result in an error.\n\n\nThe first time I showed you the wildcard type is in the signature of the \nCollection<E>\n interface:\n\n\n1\npublic\n \nboolean\n \ncontainsAll\n(\nCollection\n<?>\n \nc\n);\n\n\n\n\n\n\n\nThe implication of this declaration is that we can pass in collection of any object types.  This provide lots of flexibility, but one could argue that there is probably too much flexibility!  One could pass in a collection of \nString\n objects to check if a collection of \nInteger\n contains these \nString\n objects -- the code will say no, but it seems silly to allow this.\n\n\nTo understand why Java designer goes with the above, instead of a less silly:\n\n\n1\npublic\n \nboolean\n \ncontainsAll\n(\nCollection\n<?\n \nextends\n \nE\n>\n \nc\n);\n\n\n\n\n\n\n\nrecall that generics is introduced only after Java 5.  There are possibly a lot of legacy code that expects \ncontainsAll\n to take a collection of \nObject\n objects (since before generics is introduced, the only way to write generic class is to use \nObject\n like I showed you).  To keep Java backward compatible, a little bit of silliness is worth it!\n\n\nNested Class\n\n\nThere are four kinds of nested classes in Java.  You have seen a static nested class, used inappropriately in Lab 2.  Let's see where are some good use cases to use nested classes.\n\n\nNested classes are use to group logically relevant classes together.  Typically, a nested class is tightly coupled with the container class, and would have no use outside of the container class.  The nested classes are used to encapsulate information within class, for instance, when implementation of a class becomes too complex.\n\n\nTake the \nHashMap<K,V>\n class for instance.  \nHashMap<K,V>\n contains several nested classes, including \nKeyIterator<K>\n, \nValueIterator<V>\n which implements a \nIterator<E>\n interface for iterating through the keys and the values in the map respectively, and an \nNode<K,V>\n class, which encapsulates a key-value pair in the map.  These classes are declared \nprivate\n, since they are only used within the \nLinkedList\n class.\n\n\nNested class can be either static or non-static .  Just like static fields and static methods, a \nstatic nested class\n is associated with the containing \nclass\n, NOT \ninstance\n.  So, it can only access static fields and static methods of the containing class.  A \nnon-static nested class\n, on the other hand, can access all fields and methods of the containing class.  A \nnon-static nested class\n is also known as a \ninner class\n.\n\n\nNote that a nested class can have read/write access even to the private fields and members of containing class.  Thus, you should really have a nested class only if the nested class belongs to the same encapsulation.  Otherwise, the containing class have a leaky abstraction barrier. \n\n\nLocal Class\n\n\nWe can declare a class within a function as well.  One example is the \nEventComparator\n class in Lab 3.  You might have felt silly to write a top-level class (in another file named \nEventComparator.java\n) just to compare two events, and you are right!\n\n\nWe can actually just define the \nEventComparator\n class when we need it, in the method that creates the event queue.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nEventComparator\n \nimplements\n \nComparator\n<\nEvent\n>\n \n{\n\n  \npublic\n \nint\n \ncompare\n(\nEvent\n \ne1\n,\n \nEvent\n \ne2\n)\n \n{\n\n    \nreturn\n \ne1\n.\ncompareTo\n(\ne2\n);\n\n  \n}\n\n\n}\n\n\nevents\n \n=\n \nnew\n \nPriorityQueue\n<\nEvent\n>(\nnew\n \nEventComparator\n());\n\n\n\n\n\n\n\nNote that I am not putting two code snippets from different part of the code together, as I sometimes do.  I am literally declaring the class inside the method where I initialize the \nevents\n variable!\n\n\nClasses declared inside a method (to be more precise, inside a block of code between \n{\n and \n}\n) is called a local class.  Just like a local variable, a local class is scoped within the method.  Like a nested class, a local class has access to the variables of the enclosing class.\n\n\nRecall that when a method returns, all local variables of the methods are removed from the stack.  But, an instance of that local class might still exist.  For this reason, even though a local class can access the local variables in the enclosing method, the local class makes \na copy of local variables\n inside itself.  We say that a local class \ncaptures\n the local variables.   It would be confusing if the copy of the variables inside the local class has a different value than the one outside.   To avoid the confusion, Java only allow a local class to access variables that are explicitly declared \nfinal\n or implicitly final (or \neffectively\n final).  An implicitly final variable is one that does not change after initialization.  \n\n\nConsider the following code:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nboolean\n \ndescendingOrder\n \n=\n \nfalse\n;\n\n\nclass\n \nEventComparator\n \nimplements\n \nComparator\n<\nEvent\n>\n \n{\n\n  \npublic\n \nint\n \ncompare\n(\nEvent\n \ne1\n,\n \nEvent\n \ne2\n)\n \n{\n\n    \nif\n \n(\ndescendingOrder\n)\n \n{\n\n        \nreturn\n \ne2\n.\ncompareTo\n(\ne1\n);\n\n    \n}\n \nelse\n \n{\n\n        \nreturn\n \ne1\n.\ncompareTo\n(\ne2\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\ndescendingOrder\n \n=\n \ntrue\n;\n\n\nevents\n \n=\n \nnew\n \nPriorityQueue\n<\nEvent\n>(\nnew\n \nEventComparator\n());\n\n\n\n\n\n\nIn what order will the event be sorted?  Luckily, the designers of Java save us from such hair-pulling situation and disallow such code -- \ndescendingOrder\n is not effectively final so the code will not compile.\n\n\nI do not see a good use case for local class -- if you have information and behavior inside a block of code that is so complex that you need to encapsulate it within a local class, it is time to rethink your design!\n\n\nWhat about the use case of \nEventComparator\n above?  Well, if the class is short enough and is only used once, then it is a good use case for \nanonymous class\n.\n\n\nAnonymous Class\n\n\nAn anonymous class is one where you declare a class and instantiate it in a single statement.  We do not even have to give it a name!\n\n1\n2\n3\n4\n5\nevents\n \n=\n \nnew\n \nPriorityQueue\n<\nEvent\n>(\nnew\n \nComparator\n<\nEvent\n>()\n \n{\n\n  \npublic\n \nint\n \ncompare\n(\nEvent\n \ne1\n,\n \nEvent\n \ne2\n)\n \n{\n\n    \nreturn\n \ne1\n.\ncompareTo\n(\ne2\n);\n\n  \n}\n\n\n});\n\n\n\n\n\n\nThe example above removes the need to declare just for the purpose of comparing two events.  An anonymous class has the following format: \nnew X (arguments) { body }\n, where:\n\n\n\n\nX\n is a class that the anonymous class extends or an interface that the anonymous class implements.  X cannot be empty.  This syntax also implies an anonymous class cannot extend another class and implement an interface at the same time.  Furthermore, an anonymous class cannot implements more than one interface. \n\n\narguments\n is the arguments that you want to pass into the constructor of the anonymous class.  If the anonymous class is extending an interface, then there is no constructor, but we still need the two parenthesis \n()\n.\n\n\nbody\n is the body of the class as per normal, except that we cannot have constructor for anonymous class.\n\n\n\n\nThe syntax might look overwhelming at the beginning, but we can also write it as:\n\n1\n2\n3\n4\n5\n6\nComparator\n<\nEvent\n>\n \ncmp\n \n=\n \nnew\n \nComparator\n<\nEvent\n>()\n \n{\n\n  \npublic\n \nint\n \ncompare\n(\nEvent\n \ne1\n,\n \nEvent\n \ne2\n)\n \n{\n\n    \nreturn\n \ne1\n.\ncompareTo\n(\ne2\n);\n\n  \n}\n\n\n}\n\n\nevents\n \n=\n \nnew\n \nPriorityQueue\n<\nEvent\n>(\ncmp\n);\n\n\n\n\n\n\nLine 1 above looks just like what we do when we instantiate a class, except that we are instantiating an interface with a \n{ .. }\n body.\n\n\nAn anonymous class is just like a local class, it captures the variables of the enclosing scope as well -- the same rules to variable access as local class applies.\n\n\nEnum\n\n\nAn \nenum\n is a special type of class in Java.  Variable of an enum type can only be one of the predefined constants.  Using enum has one advantage over the use of \nint\n for predefined constant -- it is type safe!  Consider how we have been defining different event types in Lab 2.\n\n\n1\n2\n  \npublic\n \nstatic\n \nfinal\n \nint\n \nCUSTOMER_ARRIVE\n \n=\n \n1\n;\n\n  \npublic\n \nstatic\n \nfinal\n \nint\n \nCUSTOMER_DONE\n \n=\n \n2\n;\n\n\n\n\n\n\n\nBut, we cannot prevent someone from creating an event \nnew Event(time, 100)\n, passing in an invalid event type (type 100).  \n\n\nIf we define the event type as enum, then we can write like this:\n\n\n1\n2\n3\n4\nenum\n \nEventType\n \n{\n\n  \nCUSTOMER_ARRIVE\n,\n \n  \nCUSTOMER_DONE\n\n\n}\n\n\n\n\n\n\n\nand the field \neventType\n in \nEvent\n now has a type \nEventType\n instead of \nint\n:\n\n1\n2\n3\n4\nclass\n \nEvent\n \n{\n\n  \nprivate\n \ndouble\n \ntime\n;\n \n  \nprivate\n \nEventType\n \neventType\n;\n \n\n}\n\n\n\n\n\n\nTrying to assign anything other than the two predefined event type to \neventType\n would result in compilation error.\n\n\nEach constant of an enum type is actually an instance of the enum class and is a field in the enum class declared with \npublic static final\n.  \n\n\nEnum's Fields and Methods\n\n\nSince enum in Java is a class, we can define constructors, methods, and fields in enums.  \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nenum\n \nColor\n \n{\n\n  \nBLACK\n(\n0\n,\n \n0\n,\n \n0\n),\n\n  \nWHITE\n(\n1\n,\n \n1\n,\n \n1\n),\n\n  \nRED\n(\n1\n,\n \n0\n,\n \n0\n),\n\n  \nBLUE\n(\n0\n,\n \n0\n,\n \n1\n),\n\n  \nGREEN\n(\n0\n,\n \n1\n,\n \n0\n),\n\n  \nYELLOW\n(\n1\n,\n \n1\n,\n \n0\n),\n\n  \nPURPLE\n(\n1\n,\n \n0\n,\n \n1\n);\n\n\n  \nprivate\n \nfinal\n \ndouble\n \nr\n;\n\n  \nprivate\n \nfinal\n \ndouble\n \ng\n;\n\n  \nprivate\n \nfinal\n \ndouble\n \nb\n;\n\n\n  \nColor\n(\ndouble\n \nr\n,\n \ndouble\n \ng\n,\n \ndouble\n \nb\n)\n \n{\n\n    \nthis\n.\nr\n \n=\n \nr\n;\n\n    \nthis\n.\ng\n \n=\n \ng\n;\n\n    \nthis\n.\nb\n \n=\n \nb\n;\n\n  \n}\n\n\n  \npublic\n \ndouble\n \nluminance\n()\n \n{\n\n    \nreturn\n \n(\n0.2126\n \n*\n \nr\n)\n \n+\n \n(\n0.7152\n \n*\n \ng\n)\n \n+\n \n(\n0.0722\n \n*\n \nb\n);\n\n  \n}\n\n\n  \npublic\n \nString\n \ntoString\n()\n \n{\n\n    \nreturn\n \n\"(\"\n \n+\n \nr\n \n+\n \n\", \"\n \n+\n \ng\n \n+\n \n\", \"\n \n+\n \nb\n \n+\n \n\")\"\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nIn the example above, we represent a color with its RGB component.  Enum values should only constants, so \nr\n, \ng\n, \nb\n are declared as \nfinal\n.  We have a method that computes the luminance (the \"brightness\") of a color, and a \ntoString()\n method.  \n\n\nThe enum values are now written as \nBLACK(0, 0, 0)\n, with arguments passed into constructor.\n\n\nCustom Methods for Each Enum\n\n\nEnum in Java is more powerful than the above -- we can define custom methods for each of the enum constant, by writing \nconstant-specific class body\n.  If we do this, then each constant becomes an anonymous class that extends the enclosing enum.   \n\n\nConsider the event type enum.  We are going to diverge from your Labs 2 and 3 now\n1\n, so that I can bring you the following eample:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nenum\n \nEventType\n \n{\n\n  \nCUSTOMER_ARRIVE\n \n{\n\n    \n// customer arrives at uniformly random interval [0, 0.5]\n\n    \ndouble\n \ntimeToNextEvent\n()\n \n{\n\n      \nreturn\n \nrng\n.\nnextDouble\n()*\n0.5\n;\n\n    \n}\n\n  \n},\n\n  \nCUSTOMER_DONE\n \n{\n\n    \n// customer completes service at exponential random interval with mu = 1.5\n\n    \ndouble\n \ntimeToNextEvent\n()\n \n{\n\n      \nreturn\n \n-\nMath\n.\nlog\n(\nrng\n.\nnextDouble\n())/\n1.5\n;\n\n    \n}\n\n  \n};\n\n  \nprivate\n \nstatic\n \nRandom\n \nrng\n \n=\n \nnew\n \nRandom\n(\n1\n);\n\n  \nabstract\n \ndouble\n \ntimeToNextEvent\n();\n\n\n}\n\n\n\n\n\n\n\nIn the code above, \nEventType\n is an abstract class -- \ntimeToNextEvent\n is defined as \nabstract\n with no implementatino.  Each enum constant has its own implementation for calculation of time to next event.\n\n\nNow, each event has its own method to generate the time to the next event of that type, and we can call\n\n1\nEventType\n.\nCUSTOMER_DONE\n.\ntimeToNextEvent\n()\n\n\n\n\n\nto get the time to the next event of that particular type!\n\n\nThe Class \nEnum\n\n\nenum\n is a special type of class in Java.  All \nenum\n inherits from the class \nEnum\n implicitly.  Since \nenum\n is a class, we can extend \nenum\n from interfaces as per normal class.  Unfortunately, \nenum\n cannot extend another class, since it already extends from \nEnum\n.\n\n\nOne impllicitly declared method in \nenum\n is a static method:\n\n\n1\npublic\n \nstatic\n \nE\n[]\n \nvalues\n();\n\n\n\n\n\n\n\nWe can call \nEventType.values()\n or \nColor.values()\n to return an array  of event types or an array of colors.  \nE\n is a type parameter, corresponding to the enum type (either \nEventType\n, \nColor\n, etc).  To maintain flexibility and type safety, the class \nEnum\n which all enums inherit from has to be a generic class with \nE\n as a type paramter.\n\n\nConsidering \nEventType\n,\n\n1\n2\n3\n4\nenum\n \nEventType\n \n{\n\n  \nCUSTOMER_ARRIVE\n,\n \n  \nCUSTOMER_DONE\n\n\n}\n\n\n\n\n\n\nis actually \n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\npublic\n \nfinal\n \nclass\n \nEventType\n \nextends\n \nEnum\n<\nEventType\n>\n \n{\n\n  \npublic\n \nstatic\n \nfinal\n \nEventType\n[]\n \nvalues\n \n{\n \n..\n \n}\n\n  \npublic\n \nstatic\n \nEventType\n \nvalueOf\n(\nString\n \nname\n)\n \n{\n \n..\n \n}\n\n\n  \npublic\n \nstatic\n \nfinal\n \nEventType\n \nCUSTOMER_ARRIVE\n;\n\n  \npublic\n \nstatic\n \nfinal\n \nEventType\n \nCUSTOMER_DONE\n;\n\n    \n:\n\n\n  \nstatic\n \n{\n\n    \nCUSTOMER_ARRIVE\n \n=\n \nnew\n \nEventType\n();\n\n    \nCUSTOMER_DONE\n \n=\n \nnew\n \nEventType\n();\n\n      \n:\n\n  \n}\n\n\n}\n\n\n\n\n\n\nEven though we can't extend from \nEnum\n directly, Java wants to ensure that \nE\n must be a subclass of \nEnum\n (so that we can't do something non-sensical like \nEnum<String>\n.  Furthermore, some methods from \nEnum\n (such as \ncompareTo()\n) are inherited to the enum class, and these methods involved generic type \nE\n.  To ensure that the generic type \nE\n actually inherits from \nEnum<E>\n, Java defines the class \nEnum\n to have bounded generic type \nEnum<E extends Enum<E>>\n.\n\n\nThe expansion of enum \nEventType\n to a class above also illustrates a few points:\n\n\n\n\nenum\n are finals.  We cannot inherit from enum (those with constant-specifc body are exceptions).\n\n\nA class in Java can contains fields of the same class.\n\n\nThe block marked by \nstatic { .. }\n are \nstatic initializers\n, they are called when the class is first used.  They are the counterpart to constructors for objects, and are useful for non-trivial initialization of static fields in a class.\n\n\n\n\nEnum-related Collections\n\n\nJava Collection Frameworks provide two useful classes \nEnumSet\n and \nEnumMap\n -- they can be viewed as special cases of \nHashSet\n and \nHashMap\n respectively -- the only different is that we can only put enum values into \nEnumSet\n and enum-type keys into \nEnumMap\n. \n\n\n\n\n\n\n\n\n\n\nThis may or may not be the best way to solve Lab 3. \u00a0\n\u21a9",
            "title": "6. Nested Classes, Enums"
        },
        {
            "location": "/lec6/index.html#lecture-6-nested-classes-enum",
            "text": "",
            "title": "Lecture 6: Nested Classes, Enum"
        },
        {
            "location": "/lec6/index.html#learning-outcomes",
            "text": "Understand the need to override  hashCode  every time  equals  is overriden and how to use  Arrays '  hashCode  method to compute a hash code  Understand static vs non-static nested class, local class, and anonymous class and when to use / not to use one.   Understand the rules about final / effectively final variable access of local class and anonymous class  Aware of the limitation when declaring a new anonymous class  Understand the concept of variable capture  Be aware that  enum  is a special case of a  class  and share many features as a class -- not just constants can be defined.  Understand how  enum  is expanded into a subclass of  Enum  Know that enum constants can have customized fields and methods.",
            "title": "Learning Outcomes"
        },
        {
            "location": "/lec6/index.html#unfinished-business-hash-code",
            "text": "Last week, we have seen how  HashMap  allows we to store a key-value pair and lookup a value with the key, and how  HashSet  stores item with no duplicates.   Internally, to implement  put ,  HashMap  calls key's  hashCode  to return a  int , which it uses to determine which \"bucket\" to store the (key, value) pair.  When  get ,  HashMap  again calls  hashCode  on the given key to determine which bucket, then it looks for the key in the bucket.  This process, called  hashing , circumvents the need to look through every pair in the map to find the right key.  You will learn more about hashing and hash tables in CS2040.  But, what is important here is that, two keys (two objects, in general) which are the same ( equals()  returns  true ), must have the same  hashCode() .  Otherwise,  HashMap  would fail!  So it is important to ensure that if  o1.equals(o2) , then  o1.hashCode() == o2.hashCode() .  Note that the reverse does not have to be true -- two objects with the same hash code does not have to be equals.  This property is also useful for implementing  equals() .  For a complex object, comparing every field for equality can be expensive.  If we can compare the hash code first, we could filter out objects with different hash code (since they cannot be equal).  We only need to compare field by field if the hash code is the same.  Ditto for implementation of  HashSet  -- to checks if an element to add already exists,  HashSet  uses hash code, instead of going through all the elements and compare one by one.  Let's see some example:  1\n2\n3\n4\n5\n6 String   s1   =   \"hello\" ;  String   s2   =   new   String ( \"hello\" );  String   s3   =   \"goodbye\" ;  s1 . hashCode ();  s2 . hashCode ();  s3 . hashCode ();    Lines 4-5 both return 99162326, an integer value that is calculated using a mathematical function, called  hash function , so that two strings with the same content returns the same value.  Line 6 returns 207022353.  We can see the problem when we don't define  hashCode() .  Take our  Point  class from before:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 jshell >   Point   p   =   new   Point ( 0 , 0 );  p   ==>   ( 0.0 , 0.0 )  jshell >   Point   q   =   new   Point ( 0 , 0 );  q   ==>   ( 0.0 , 0.0 )  jshell >   p . equals ( q );  $5   ==>   true  jshell >   HashSet < Point >   set   =   new   HashSet <>();  set   ==>   []  jshell >   set . add ( p );  $7   ==>   true  jshell >   set . add ( q );  $8   ==>   true  jshell >   set  set   ==>   [( 0.0 , 0.0 ),   ( 0.0 , 0.0 )]    You can see that we are adding two points that are equals into the set.  To fix this, we need to write our own  hashCode() .  Calculating good hash code is an involved topic, and is best left to the expert (some of you might become expert in this), but for now, we can rely on the static  hashCode  methods in the  Arrays  class to help us.  Let's add the following to  Point :  1\n2\n3\n4\n5\n6 public   int   hashCode ()   { \n   double []   a   =   new   double [ 2 ]; \n   a [ 0 ]   =   this . x ; \n   a [ 1 ]   =   this . y ; \n   return   Arrays . hashCode ( a );  }    Now,  set.add(q)  above returns false -- we can no longer add point (0,0) twice in to the set.",
            "title": "Unfinished Business: Hash Code"
        },
        {
            "location": "/lec6/index.html#revisit-wildcards",
            "text": "A generic type can be instantiated with a wildcard  ?  as type argument:  1 ArrayList <?>   l   =   new   ArrayList < Integer >();    You can think of  ArrayList <? >  as a short form for  ArrayList <?   extends   Object > , which is different from  ArrayList<Object> :  1 ArrayList < Object >   l   =   new   ArrayList < Integer >();    The above will result in an error.  The first time I showed you the wildcard type is in the signature of the  Collection<E>  interface:  1 public   boolean   containsAll ( Collection <?>   c );    The implication of this declaration is that we can pass in collection of any object types.  This provide lots of flexibility, but one could argue that there is probably too much flexibility!  One could pass in a collection of  String  objects to check if a collection of  Integer  contains these  String  objects -- the code will say no, but it seems silly to allow this.  To understand why Java designer goes with the above, instead of a less silly:  1 public   boolean   containsAll ( Collection <?   extends   E >   c );    recall that generics is introduced only after Java 5.  There are possibly a lot of legacy code that expects  containsAll  to take a collection of  Object  objects (since before generics is introduced, the only way to write generic class is to use  Object  like I showed you).  To keep Java backward compatible, a little bit of silliness is worth it!",
            "title": "Revisit: Wildcards"
        },
        {
            "location": "/lec6/index.html#nested-class",
            "text": "There are four kinds of nested classes in Java.  You have seen a static nested class, used inappropriately in Lab 2.  Let's see where are some good use cases to use nested classes.  Nested classes are use to group logically relevant classes together.  Typically, a nested class is tightly coupled with the container class, and would have no use outside of the container class.  The nested classes are used to encapsulate information within class, for instance, when implementation of a class becomes too complex.  Take the  HashMap<K,V>  class for instance.   HashMap<K,V>  contains several nested classes, including  KeyIterator<K> ,  ValueIterator<V>  which implements a  Iterator<E>  interface for iterating through the keys and the values in the map respectively, and an  Node<K,V>  class, which encapsulates a key-value pair in the map.  These classes are declared  private , since they are only used within the  LinkedList  class.  Nested class can be either static or non-static .  Just like static fields and static methods, a  static nested class  is associated with the containing  class , NOT  instance .  So, it can only access static fields and static methods of the containing class.  A  non-static nested class , on the other hand, can access all fields and methods of the containing class.  A  non-static nested class  is also known as a  inner class .  Note that a nested class can have read/write access even to the private fields and members of containing class.  Thus, you should really have a nested class only if the nested class belongs to the same encapsulation.  Otherwise, the containing class have a leaky abstraction barrier.",
            "title": "Nested Class"
        },
        {
            "location": "/lec6/index.html#local-class",
            "text": "We can declare a class within a function as well.  One example is the  EventComparator  class in Lab 3.  You might have felt silly to write a top-level class (in another file named  EventComparator.java ) just to compare two events, and you are right!  We can actually just define the  EventComparator  class when we need it, in the method that creates the event queue.  1\n2\n3\n4\n5\n6 class   EventComparator   implements   Comparator < Event >   { \n   public   int   compare ( Event   e1 ,   Event   e2 )   { \n     return   e1 . compareTo ( e2 ); \n   }  }  events   =   new   PriorityQueue < Event >( new   EventComparator ());    Note that I am not putting two code snippets from different part of the code together, as I sometimes do.  I am literally declaring the class inside the method where I initialize the  events  variable!  Classes declared inside a method (to be more precise, inside a block of code between  {  and  } ) is called a local class.  Just like a local variable, a local class is scoped within the method.  Like a nested class, a local class has access to the variables of the enclosing class.  Recall that when a method returns, all local variables of the methods are removed from the stack.  But, an instance of that local class might still exist.  For this reason, even though a local class can access the local variables in the enclosing method, the local class makes  a copy of local variables  inside itself.  We say that a local class  captures  the local variables.   It would be confusing if the copy of the variables inside the local class has a different value than the one outside.   To avoid the confusion, Java only allow a local class to access variables that are explicitly declared  final  or implicitly final (or  effectively  final).  An implicitly final variable is one that does not change after initialization.    Consider the following code:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 boolean   descendingOrder   =   false ;  class   EventComparator   implements   Comparator < Event >   { \n   public   int   compare ( Event   e1 ,   Event   e2 )   { \n     if   ( descendingOrder )   { \n         return   e2 . compareTo ( e1 ); \n     }   else   { \n         return   e1 . compareTo ( e2 ); \n     } \n   }  }  descendingOrder   =   true ;  events   =   new   PriorityQueue < Event >( new   EventComparator ());    In what order will the event be sorted?  Luckily, the designers of Java save us from such hair-pulling situation and disallow such code --  descendingOrder  is not effectively final so the code will not compile.  I do not see a good use case for local class -- if you have information and behavior inside a block of code that is so complex that you need to encapsulate it within a local class, it is time to rethink your design!  What about the use case of  EventComparator  above?  Well, if the class is short enough and is only used once, then it is a good use case for  anonymous class .",
            "title": "Local Class"
        },
        {
            "location": "/lec6/index.html#anonymous-class",
            "text": "An anonymous class is one where you declare a class and instantiate it in a single statement.  We do not even have to give it a name! 1\n2\n3\n4\n5 events   =   new   PriorityQueue < Event >( new   Comparator < Event >()   { \n   public   int   compare ( Event   e1 ,   Event   e2 )   { \n     return   e1 . compareTo ( e2 ); \n   }  });    The example above removes the need to declare just for the purpose of comparing two events.  An anonymous class has the following format:  new X (arguments) { body } , where:   X  is a class that the anonymous class extends or an interface that the anonymous class implements.  X cannot be empty.  This syntax also implies an anonymous class cannot extend another class and implement an interface at the same time.  Furthermore, an anonymous class cannot implements more than one interface.   arguments  is the arguments that you want to pass into the constructor of the anonymous class.  If the anonymous class is extending an interface, then there is no constructor, but we still need the two parenthesis  () .  body  is the body of the class as per normal, except that we cannot have constructor for anonymous class.   The syntax might look overwhelming at the beginning, but we can also write it as: 1\n2\n3\n4\n5\n6 Comparator < Event >   cmp   =   new   Comparator < Event >()   { \n   public   int   compare ( Event   e1 ,   Event   e2 )   { \n     return   e1 . compareTo ( e2 ); \n   }  }  events   =   new   PriorityQueue < Event >( cmp );    Line 1 above looks just like what we do when we instantiate a class, except that we are instantiating an interface with a  { .. }  body.  An anonymous class is just like a local class, it captures the variables of the enclosing scope as well -- the same rules to variable access as local class applies.",
            "title": "Anonymous Class"
        },
        {
            "location": "/lec6/index.html#enum",
            "text": "An  enum  is a special type of class in Java.  Variable of an enum type can only be one of the predefined constants.  Using enum has one advantage over the use of  int  for predefined constant -- it is type safe!  Consider how we have been defining different event types in Lab 2.  1\n2    public   static   final   int   CUSTOMER_ARRIVE   =   1 ; \n   public   static   final   int   CUSTOMER_DONE   =   2 ;    But, we cannot prevent someone from creating an event  new Event(time, 100) , passing in an invalid event type (type 100).    If we define the event type as enum, then we can write like this:  1\n2\n3\n4 enum   EventType   { \n   CUSTOMER_ARRIVE ,  \n   CUSTOMER_DONE  }    and the field  eventType  in  Event  now has a type  EventType  instead of  int : 1\n2\n3\n4 class   Event   { \n   private   double   time ;  \n   private   EventType   eventType ;   }    Trying to assign anything other than the two predefined event type to  eventType  would result in compilation error.  Each constant of an enum type is actually an instance of the enum class and is a field in the enum class declared with  public static final .",
            "title": "Enum"
        },
        {
            "location": "/lec6/index.html#enums-fields-and-methods",
            "text": "Since enum in Java is a class, we can define constructors, methods, and fields in enums.     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 enum   Color   { \n   BLACK ( 0 ,   0 ,   0 ), \n   WHITE ( 1 ,   1 ,   1 ), \n   RED ( 1 ,   0 ,   0 ), \n   BLUE ( 0 ,   0 ,   1 ), \n   GREEN ( 0 ,   1 ,   0 ), \n   YELLOW ( 1 ,   1 ,   0 ), \n   PURPLE ( 1 ,   0 ,   1 ); \n\n   private   final   double   r ; \n   private   final   double   g ; \n   private   final   double   b ; \n\n   Color ( double   r ,   double   g ,   double   b )   { \n     this . r   =   r ; \n     this . g   =   g ; \n     this . b   =   b ; \n   } \n\n   public   double   luminance ()   { \n     return   ( 0.2126   *   r )   +   ( 0.7152   *   g )   +   ( 0.0722   *   b ); \n   } \n\n   public   String   toString ()   { \n     return   \"(\"   +   r   +   \", \"   +   g   +   \", \"   +   b   +   \")\" ; \n   }  }    In the example above, we represent a color with its RGB component.  Enum values should only constants, so  r ,  g ,  b  are declared as  final .  We have a method that computes the luminance (the \"brightness\") of a color, and a  toString()  method.    The enum values are now written as  BLACK(0, 0, 0) , with arguments passed into constructor.",
            "title": "Enum's Fields and Methods"
        },
        {
            "location": "/lec6/index.html#custom-methods-for-each-enum",
            "text": "Enum in Java is more powerful than the above -- we can define custom methods for each of the enum constant, by writing  constant-specific class body .  If we do this, then each constant becomes an anonymous class that extends the enclosing enum.     Consider the event type enum.  We are going to diverge from your Labs 2 and 3 now 1 , so that I can bring you the following eample:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 enum   EventType   { \n   CUSTOMER_ARRIVE   { \n     // customer arrives at uniformly random interval [0, 0.5] \n     double   timeToNextEvent ()   { \n       return   rng . nextDouble ()* 0.5 ; \n     } \n   }, \n   CUSTOMER_DONE   { \n     // customer completes service at exponential random interval with mu = 1.5 \n     double   timeToNextEvent ()   { \n       return   - Math . log ( rng . nextDouble ())/ 1.5 ; \n     } \n   }; \n   private   static   Random   rng   =   new   Random ( 1 ); \n   abstract   double   timeToNextEvent ();  }    In the code above,  EventType  is an abstract class --  timeToNextEvent  is defined as  abstract  with no implementatino.  Each enum constant has its own implementation for calculation of time to next event.  Now, each event has its own method to generate the time to the next event of that type, and we can call 1 EventType . CUSTOMER_DONE . timeToNextEvent ()   \nto get the time to the next event of that particular type!",
            "title": "Custom Methods for Each Enum"
        },
        {
            "location": "/lec6/index.html#the-class-enum",
            "text": "enum  is a special type of class in Java.  All  enum  inherits from the class  Enum  implicitly.  Since  enum  is a class, we can extend  enum  from interfaces as per normal class.  Unfortunately,  enum  cannot extend another class, since it already extends from  Enum .  One impllicitly declared method in  enum  is a static method:  1 public   static   E []   values ();    We can call  EventType.values()  or  Color.values()  to return an array  of event types or an array of colors.   E  is a type parameter, corresponding to the enum type (either  EventType ,  Color , etc).  To maintain flexibility and type safety, the class  Enum  which all enums inherit from has to be a generic class with  E  as a type paramter.  Considering  EventType , 1\n2\n3\n4 enum   EventType   { \n   CUSTOMER_ARRIVE ,  \n   CUSTOMER_DONE  }    is actually   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 public   final   class   EventType   extends   Enum < EventType >   { \n   public   static   final   EventType []   values   {   ..   } \n   public   static   EventType   valueOf ( String   name )   {   ..   } \n\n   public   static   final   EventType   CUSTOMER_ARRIVE ; \n   public   static   final   EventType   CUSTOMER_DONE ; \n     : \n\n   static   { \n     CUSTOMER_ARRIVE   =   new   EventType (); \n     CUSTOMER_DONE   =   new   EventType (); \n       : \n   }  }    Even though we can't extend from  Enum  directly, Java wants to ensure that  E  must be a subclass of  Enum  (so that we can't do something non-sensical like  Enum<String> .  Furthermore, some methods from  Enum  (such as  compareTo() ) are inherited to the enum class, and these methods involved generic type  E .  To ensure that the generic type  E  actually inherits from  Enum<E> , Java defines the class  Enum  to have bounded generic type  Enum<E extends Enum<E>> .  The expansion of enum  EventType  to a class above also illustrates a few points:   enum  are finals.  We cannot inherit from enum (those with constant-specifc body are exceptions).  A class in Java can contains fields of the same class.  The block marked by  static { .. }  are  static initializers , they are called when the class is first used.  They are the counterpart to constructors for objects, and are useful for non-trivial initialization of static fields in a class.",
            "title": "The Class Enum"
        },
        {
            "location": "/lec6/index.html#enum-related-collections",
            "text": "Java Collection Frameworks provide two useful classes  EnumSet  and  EnumMap  -- they can be viewed as special cases of  HashSet  and  HashMap  respectively -- the only different is that we can only put enum values into  EnumSet  and enum-type keys into  EnumMap .       This may or may not be the best way to solve Lab 3. \u00a0 \u21a9",
            "title": "Enum-related Collections"
        },
        {
            "location": "/lec7/index.html",
            "text": "Lecture 7: Functions\n\n\nLearning Objectives\n\n\nAfter this lecture, students should be familiar with:\n\n\n\n\nthe concept of functions as a side-effect free programming constructs and its relation to functions in mathematics.\n\n\nthe \nFunction\n interface in Java 8, including apply and compose methods.\n\n\nthe syntax of method reference and lambda expression\n\n\nhow to write functions with multiple arguments using curried functions \n\n\n\n\nJava 8 introduces several new important new features, including lambda expressions and the stream APIs.  We will spend the next few lectures exploring these new features and how it allows us to write more succinct code and hopefully, less buggy code.  The stream APIs also makes it possible for us to parallelize our code for execution on multiple cores/processors with ease.\n\n\nAbstraction Principles Revisited\n\n\nLet's revisit the abstraction principles we first visited in Lecture 2.  It says that \"Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.\"\n\n\nWe have seen this principles being applied in several ways.  \n\n\nFirst, consider the methods to generate random inter-arrival time and random service time.  We can write them as methods below:\n\n\n1\n2\n3\n4\n5\n6\n7\ndouble\n \ngenerateInterArrivalTime\n()\n \n{\n\n  \nreturn\n \n-\nMath\n.\nlog\n(\nrng\n.\nnextDouble\n())/\nthis\n.\narrivalRate\n;\n\n\n}\n\n\n\ndouble\n \ngenerateServiceTime\n()\n \n{\n\n  \nreturn\n \n-\nMath\n.\nlog\n(\nrng\n.\nnextDouble\n())/\nthis\n.\nserviceRate\n;\n\n\n}\n\n\n\n\n\n\n\nYou can see that the three methods above have similar implementation.  They all generate an exponentially distributed random number, with different rate.  One could apply the abstraction principle and write the code as follows:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ndouble\n \nrandomExponentialValue\n(\ndouble\n \nrate\n)\n \n{\n\n  \nreturn\n \n-\nMath\n.\nlog\n(\nrng\n.\nnextDouble\n())/\nrate\n;\n\n\n}\n\n\n\ndouble\n \ngenerateServiceTime\n()\n \n{\n\n  \nreturn\n \nrandomExponentialValue\n(\nthis\n.\nserviceRate\n);\n\n\n}\n\n\n\ndouble\n \ngenerateInterArrivalTime\n()\n \n{\n\n  \nreturn\n \nrandomExponentialValue\n(\nthis\n.\narrivalRate\n);\n\n\n}\n\n\n\n\n\n\n\nNow, if you need a new exponentially distributed random number, say for inter-switching time or break time (see Lab 5), you can just write a method that calls \nrandomExponentialValue()\n method with the appropriate rate.\n\n\nHere, the varying parts that we abstracted out is the variables.  \n\n\nSecond, consider the \nCircleQueue\n and \nPointQueue\n examples from Lecture 4.  The two classes implements similar methods with similar logic.  The only difference is the type.  \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nCircleQueue\n \n{\n\n  \nprivate\n \nCircle\n[]\n \ncircles\n;\n\n   \n:\n\n  \npublic\n \nCircleQueue\n(\nint\n \nsize\n)\n \n{...}\n\n  \npublic\n \nboolean\n \nisFull\n()\n \n{...}\n\n  \npublic\n \nboolean\n \nisEmpty\n()\n \n{...}\n\n  \npublic\n \nvoid\n \nenqueue\n(\nCircle\n \nc\n)\n \n{...}\n\n  \npublic\n \nCircle\n \ndequeue\n()\n \n{...}\n\n\n}\n\n\n\nclass\n \nPointQueue\n \n{\n\n  \nprivate\n \nPoint\n[]\n \npoints\n;\n\n   \n:\n\n  \npublic\n \nPointQueue\n(\nint\n \nsize\n)\n \n{...}\n\n  \npublic\n \nboolean\n \nisFull\n()\n \n{...}\n\n  \npublic\n \nboolean\n \nisEmpty\n()\n \n{...}\n\n  \npublic\n \nvoid\n \nenqueue\n(\nPoint\n \np\n)\n \n{...}\n\n  \npublic\n \nPoint\n \ndequeue\n()\n \n{...}\n\n\n}\n\n\n\n\n\n\n\nWe then replace the two classes (and any future class that we might write to implement such queues) with a generic \nQueue<T>\n.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nclass\n \nQueue\n<\nT\n>\n \n{\n\n  \nprivate\n \nT\n[]\n \nobjects\n;\n\n   \n:\n\n  \npublic\n \nQueue\n<\nT\n>(\nint\n \nsize\n)\n \n{...}\n\n  \npublic\n \nboolean\n \nisFull\n()\n \n{...}\n\n  \npublic\n \nboolean\n \nisEmpty\n()\n \n{...}\n\n  \npublic\n \nvoid\n \nenqueue\n(\nT\n \no\n)\n \n{...}\n\n  \npublic\n \nT\n \ndequeue\n()\n \n{...}\n\n\n}\n\n\n\n\n\n\n\nHere, the varying parts that we abstracted out is the type of the elements.  \n\n\nThird, consider how we tell \nArrayList.sort()\n to sort the items in the array in Lecture 5.  By passing in \nNameComparator\n, we can tell \nArrayList\n to sort in alphabetical order, either in ascending order or descending order, or by the length of the strings, or any other ways we like.   An alternative would be to have our own \nStringList\n class and implements methods \nsortAlphabeticallyAscending()\n, \nsortAlphabeticallyDescending()\n, \nsortByLengthAscending()\n, \nsortByLengthDescending()\n, etc.  But all of these methods would be implementing the same sorting algorithms, the only part that is different is the comparison method to determine the order of the elements.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nimport\n \njava.util.*\n;\n\n\n\nclass\n \nNameComparator\n \nimplements\n \nComparator\n<\nString\n>\n \n{\n\n  \npublic\n \nint\n \ncompare\n(\nString\n \ns1\n,\n \nString\n \ns2\n)\n \n{\n\n    \n// return (s1.compareTo(s2));\n\n    \n// return (s2.compareTo(s1));\n\n    \nreturn\n \n(\ns2\n.\nlength\n()\n \n-\n \ns1\n.\nlength\n());\n\n  \n}\n\n\n}\n\n\n\nclass\n \nSortedList\n \n{\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \nList\n<\nString\n>\n \nnames\n \n=\n \nnew\n \nArrayList\n<\nString\n>();\n\n\n    \nnames\n.\nadd\n(\n0\n,\n \n\"Joffrey\"\n);\n\n    \nnames\n.\nadd\n(\n1\n,\n \n\"Cersei\"\n);\n\n    \nnames\n.\nadd\n(\n2\n,\n \n\"Meryn\"\n);\n\n    \nnames\n.\nadd\n(\n3\n,\n \n\"Walder\"\n);\n\n      \n:\n\n      \n:\n\n\n    \nnames\n.\nsort\n(\nnew\n \nNameComparator\n());\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nHere, the varying parts that we abstracted out is a snippet of the code, or functionality, of the methods.  This idea is much more powerful than just abstracting out how we compare and sort.  We will see how it can lead to a significantly different ways of writing code.\n\n\nFunctions\n\n\nWhile we have been using the terms functions and methods (and occasionally, procedure) interchangeably, we will now use the term function to refer to methods with specific properties.  \n\n\nA function, in mathematics, refer to a mapping from a set of inputs (\ndomain\n) \n\\(X\\)\n to a set of output values (\ncodomain\n) \n\\(Y\\)\n.  We write \n\\(f: X \\rightarrow Y\\)\n.  Every input in the domain must map to exactly one output but multiple inputs can map to the same output.  Not all values in the codomain needs to be mapped.  The set of elements in the codomain that is mapped is called the \nimage\n.  \n\n\nFunctions in programming language is the same as functions in mathematics.  Given an input, the function computes and returns an output.  A \npure\n function does nothing else -- it does not print to the screen, write to files, throw exceptions, change other variables, modify the values of the arguments.  We say that a pure function does not cause any \nside effect\n.  \n\n\nHere is an example of a pure functions:\n\n\n1\n2\n3\n4\n5\n6\n7\nint\n \nsquare\n(\nint\n \ni\n)\n \n{\n\n  \nreturn\n \ni\n \n*\n \ni\n;\n\n\n}\n\n\n\nint\n \nadd\n(\nint\n \ni\n,\n \nint\n \nj\n)\n \n{\n\n  \nreturn\n \ni\n \n+\n \nj\n;\n\n\n}\n\n\n\n\n\n\n\nand some examples of non-pure functions:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nint\n \ndiv\n(\nint\n \ni\n,\n \nint\n \nj\n)\n \n{\n\n  \nreturn\n \ni\n \n/\n \nj\n;\n  \n// may throw an exception\n\n\n}\n\n\n\nint\n \nincrCount\n(\nint\n \ni\n)\n \n{\n\n  \nreturn\n \nthis\n.\ncount\n \n+\n \ni\n;\n \n// assume that count is not final.\n\n                         \n// this may give diff results for the same i.\n\n\n}\n\n\n\nvoid\n \nincrCount\n(\nint\n \ni\n)\n \n{\n\n  \nthis\n.\ncount\n \n+=\n \ni\n;\n \n// does not return a value\n\n                   \n// and has side effects on count\n\n\n}\n\n\n\nint\n \naddToList\n(\nArrayList\n \nqueue\n,\n \nint\n \ni\n)\n \n{\n\n  \nqueue\n.\nadd\n(\ni\n);\n  \n// has side effects on queue\n\n\n}\n\n\n\n\n\n\nIn fact, in OO paradigm, we commonly need to write methods that update the fields of an instance or compute values using the fields of an instance.  Such methods are not pure functions.\nWhile the notion of pure functions might seems restrictive, recall how many times your program has a bug that is related to incorrect side effects or unintended side effects?  If we design and write our program with pure functions as much as possible, we could significantly reduce the number of bugs.\n\n\nIn mathematics, we say that a mapping is a \npartial function\n if not all elements in the domain are mapped.   A common programming error is to treat a partial function like a function -- for instance, the \ndiv\n method above is written as if it is defined for all int values, but it is not defined when \nj\n is 0.\n\n\nMathematically, a function takes in only one value and return one value (e.g., \nsquare\n above).  In programming, we often need to write functions that takes in more than one arguments (e.g., \nadd\n above).  We will see how to reconcile this later.\n\n\nLet's explore functions in Java 8 by looking at the \nFunction\n interface, it is a generic interface with two type parameters, \nFunction<T, R>\n, \nT\n is the type of the inpuT, \nR\n is the type of the Result.  It has one abstract method \nR apply(T t)\n that applies the function to a given argument.\n\n\nLet's write a class that implements \nFunction\n.\n\n\n1\n2\n3\n4\n5\nclass\n \nSquare\n \nimplements\n \nFunction\n<\nInteger\n,\n \nInteger\n>\n \n{\n\n  \npublic\n \nInteger\n \napply\n(\nInteger\n \nx\n)\n \n{\n\n    \nreturn\n \nx\n*\nx\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nTo use it, we can:\n\n1\nint x = new Square().apply(4);\n\n\n\n\n\nSo far, everything is as you have seen before, and is significantly more complex than just writing:\n\n\n1\nint x = square(4);\n\n\n\n\n\n\nSo, what is the use of this?  Consider now if we have a \nList<Integer>\n of integers, and we want to return another list where the elements is the square of the first list.  We can write a method:\n\n1\n2\n3\n4\n5\n6\n7\nList\n<\nInteger\n>\n \nsquareList\n(\nList\n<\nInteger\n>\n \nlist\n)\n \n{\n\n  \nList\n<\nInteger\n>\n \nnewList\n \n=\n \nnew\n \nArrayList\n<\nInteger\n>();\n\n  \nfor\n \n(\nInteger\n \ni\n:\n \nlist\n)\n \n{\n\n    \nnewList\n.\nadd\n(\nsquare\n(\ni\n));\n\n  \n}\n\n  \nreturn\n \nnewList\n;\n\n\n}\n\n\n\n\n\nCreating a new list out of an existing list is actually a common pattern.  We might want to, say, create a list with the absolute values:\n\n1\n2\n3\n4\n5\n6\n7\nList\n<\nInteger\n>\n \nnegativeList\n(\nList\n<\nInteger\n>\n \nlist\n)\n \n{\n\n  \nList\n<\nInteger\n>\n \nnewList\n \n=\n \nnew\n \nArrayList\n<\nInteger\n>();\n\n  \nfor\n \n(\nInteger\n \ni\n:\n \nlist\n)\n \n{\n\n    \nnewList\n.\nadd\n(\nMath\n.\nabs\n(\ni\n));\n\n  \n}\n\n  \nreturn\n \nnewList\n;\n\n\n}\n\n\n\n\n\nThis is actually a common pattern.  Applying the abstraction principles, we can generalize the method to:\n\n1\n2\n3\n4\n5\n6\n7\nList\n<\nInteger\n>\n \napplyList\n(\nList\n<\nInteger\n>\n \nlist\n,\n \nFunction\n<\nInteger\n,\nInteger\n>\n \nf\n)\n \n{\n\n  \nList\n<\nInteger\n>\n \nnewList\n \n=\n \nnew\n \nArrayList\n<\nInteger\n>();\n\n  \nfor\n \n(\nInteger\n \ni\n:\n \nlist\n)\n \n{\n\n    \nnewList\n.\nadd\n(\nf\n.\napply\n(\ni\n));\n\n  \n}\n\n  \nreturn\n \nnewList\n;\n\n\n}\n\n\n\n\n\n\nand call:\n\n1\napplyList\n(\nlist\n,\n \nnew\n \nSquare\n());\n\n\n\n\n\nto return a list of squares.\n\n\nIf we do not want to create a new class just for this, we can, as before, use an anonymous class:\n\n1\n2\n3\n4\n5\napplyList\n(\nlist\n,\n \nnew\n \nFunction\n<\nInteger\n,\nInteger\n>()\n \n{\n \n  \nInteger\n \napply\n(\nInteger\n \nx\n)\n \n{\n\n    \nreturn\n \nx\n \n*\n \nx\n;\n\n  \n}\n\n\n});\n\n\n\n\n\n\n\n\nMap\n\n\nThe \napplyList\n method above is most commonly refered to as \nmap\n.\n\n\n\n\nLambda Expression\n\n\nThe code is still pretty ugly, and there is much boiler plate code.  The key line is actually Line 3 above, \nreturn x * x\n.  Fortunately, Java 8 provides a clean way to write this:\n\n\n1\n2\n3\napplyList\n(\nlist\n,\n \n(\nInteger\n \nx\n)\n \n->\n \n{\n \nreturn\n \nx\n \n*\n \nx\n;\n \n});\n\n\napplyList\n(\nlist\n,\n \nx\n \n->\n \n{\n \nreturn\n \nx\n \n*\n \nx\n;\n \n});\n\n\napplyList\n(\nlist\n,\n \nx\n \n->\n \nx\n \n*\n \nx\n);\n\n\n\n\n\n\n\nThe expressions above, including \nx -> x * x\n, are \nlambda expressions\n.  You can recognize one by the use of \n->\n.   The left hand side lists the arguments (use \n()\n if there is no argument), while the right hand side is the computation.  We do not need the type in cases where Java can refer the type, or need the return statements and the curly brackets.\n\n\n\n\nlambda\n\n\nAlonzo Church invented lambda calculus (\n\\(\\lambda\\)\n-calculus) in 1936, before electronic computers, as a way to express computation.  In \n\\(\\lambda\\)\n-calculus, all functions are anonymous.  The term lambda expression originated from there.\n\n\n\n\nWe can use lambda expressions just like any other values in Java.  We have seen above that we can pass a lambda expression to a method.  We can also assign lambda expression to a variable:\n\n1\n2\nFunction\n<\nInteger\n,\nInteger\n>\n \nsquare\n \n=\n \nx\n \n->\n \nx\n \n*\n \nx\n;\n\n\nsquare\n.\napply\n(\n4\n);\n\n\n\n\n\n\nMethod Reference\n\n\nWe can use lambda expression to implement \napplyList\n with \nabs()\n method in \nMath\n.\n\n1\napplyList\n(\nlist\n,\n \nx\n \n->\n \nMath\n.\nabs\n(\nx\n));\n\n\n\n\n\n\nIf we look carefully at \nabs()\n, however, it takes in an \nint\n, and returns an \nint\n.  So, it already fits the \nFunction<Integer,Integer>\n interface (with autoboxing and unboxing).  As such, we can refer to the method with a method reference: \nMath::abs\n.  The code above can be simplified to:\n\n1\napplyList\n(\nlist\n,\n \nMath\n::\nabs\n);\n\n\n\n\n\n\nAgain, we can assign method reference and pass them around like any other objects.\n\n1\n2\nFunction\n<\nInteger\n,\nInteger\n>\n \nf\n \n=\n \nMath\n::\nabs\n;\n\n\nf\n.\napply\n(-\n4\n);\n\n\n\n\n\n\nComposing Functions\n\n\nThe \nFunction\n interface has two default methods:\n\n1\n2\ndefault\n \n<\nV\n>\n \nFunction\n<\nT\n,\nV\n>\n \nandThen\n(\nFunction\n<?\n \nsuper\n \nR\n,?\n \nextends\n \nV\n>\n \nafter\n);\n\n\ndefault\n \n<\nV\n>\n \nFunction\n<\nV\n,\nR\n>\n \ncompose\n(\nFunction\n<?\n \nsuper\n \nV\n,?\n \nextends\n \nT\n>\n \nbefore\n);\n\n\n\n\n\n\nfor composing two functions.  The term \ncompose\n here is used in the mathematical sense (i.e., the \n\\(\\cdot\\)\n operator in \n\\(f \\cdot g\\)\n).\n\n\nThese two methods, \nandThen\n and \ncompose\n, return another function, and they are generic methods, as they have a type parameter \n<V>\n.  Suppose we want to write a function that returns the square root of the absolute value of an int, we can write:\n\n1\n2\n3\ndouble\n \nSquareRootAbs\n(\nint\n \nx\n)\n \n{\n\n  \nreturn\n \nMath\n.\nsqrt\n(\nMath\n.\nabs\n(\nx\n));\n\n\n}\n\n\n\n\n\n\nor, we can write either\n\n1\n2\n3\nFunction\n<\nInteger\n,\nInteger\n>\n \nabs\n \n=\n \nMath\n::\nabs\n;\n\n\nFunction\n<\nInteger\n,\nDouble\n>\n \nsqrt\n \n=\n \nMath\n::\nsqrt\n;\n\n\nabs\n.\nandThen\n(\nsqrt\n)\n\n\n\n\n\n\nor \n\n1\nsqrt\n.\ncompose\n(\nabs\n)\n\n\n\n\n\n\nBut isn't writing the plain old method \nSquareRootAbs()\n clearer?  Why bother with \nFunction\n?  The difference is that, \nSquareRootAbs()\n has to be written before we compile our code, and is fixed once we compile.  Using the \nFunction\n interface, we can compose functions at \nrun time\n, dynamically as needed!  Here is an example that you might be familiar with, from Lab 5:\n\n\n1\n2\n3\n4\n5\n6\nFunction\n<\nCustomer\n,\n \nQueue\n>\n \nfindQueueToSwitchTo\n;\n\n\nif\n \n(\nnumOfQueue\n \n>\n \n1\n)\n \n{\n\n  \nfindQueueToSwitchTo\n \n=\n \nfindShortestQueue\n.\nandThen\n(\ncheckIfFewerInFront\n);\n \n\n}\n \nelse\n \n{\n \n// only one queue\n\n  \nfindQueueToSwitchTo\n \n=\n \nCustomer\n::\ngetQueue\n;\n  \n// no need to do anything\n\n\n}\n\n\n\n\n\n\n\nSo instead of relying on the logic that the shortest queue is the same as the only queue and there is always the same number of customer in front if the customer is already is in the shortest queue, we just redefine the function that finds the queue to switch to to return the only queue.\n\n\nOther Functions\n\n\nJava 8 package \njava.util.function\n provides other useful interfaces, including:\n\n\n\n\nPredicate<T>\n with a \nboolean test(T t)\n method \n\n\nSupplier<T>\n with a \nT get()\n method\n\n\nConsumer<T>\n with a \nvoid accept(T t)\n method\n\n\nBiFunction<T,U,R>\n with a \nR apply(T t, U u)\n method\n\n\n\n\nOther variations that involves primitive types are also provided.\n\n\nCurried Functions\n\n\nFunctions have an \narity\n.  The \nFunction\n interface is for unary functions that take in a single argument; the \nBiFunction\n inteface for binary functions, with two arguments.  But we can have functions that take more than two arguments.  We can, however, build functions that take in multiple arguments with only unary functions.   Let's look at this mathematically first.  Consider a binary function \n\\(f: (X, Y) \\rightarrow Z\\)\n.  We can introduce \n\\(F\\)\n as a set of all functions \n\\(f': Y \\rightarrow Z\\)\n, and rewrite \n\\(f\\)\n as \n\\(f: X \\rightarrow F\\)\n, of \n\\(f: X \\rightarrow Y \\rightarrow Z\\)\n.\n\n\nA trivial example for this is the \nadd\n method that adds two \nint\n values. \n\n1\n2\n3\nint\n \nadd\n(\nint\n \nx\n,\n \nint\n \ny\n)\n \n{\n\n  \nreturn\n \nx\n \n+\n \ny\n;\n\n\n}\n\n\n\n\n\n\nThis can be written as\n\n1\nFunction\n<\nInteger\n,\n \nFunction\n<\nInteger\n,\n \nInteger\n>>\n \nadd\n \n=\n \nx\n \n->\n \ny\n \n->\n \n(\nx\n \n+\n \ny\n);\n\n\n\n\n\n\nTo calcualte 1 + 1, we call\n\n1\nadd\n.\napply\n(\n1\n).\napply\n(\n1\n);\n\n\n\n\n\n\nLet's break it down a litte, \nadd\n is a function that takes in an \nInteger\n object and returns a unary \nFunction\n over \nInteger\n.  So \nadd.apply(1)\n returns the function \ny -> 1 + y\n.  We could assign this to a variable:\n\n1\nFunction<Integer,Integer> incr = add.apply(1);\n\n\n\n\n\nHere is the place where you need to change how you think: \nadd\n is not a function that takes two arguments and return a value.  It is a \nhigher-order function\n that takes in a single argument, and return another function.\n\n\nThe technique that translates a general \n\\(n\\)\n-ary function to a sequence of \n\\(n\\)\n unary functions is called \ncurrying\n.  After currying, we have a sequence of \ncurried\n functions.  \n\n\n\n\nCurry\n\n\nCurrying is not related to food, but rather is named after computer scientist Haskell Curry, who popularized the technique.\n\n\n\n\nAgain, you might question why do we need this?  We can simply call \nadd(1, 1)\n, instead of \nadd.apply(1).apply(1)\n?  Well, the verbosity is the fault of Java instead of functional programming techniques.  Other languages like Haskell or Scala have much simpler syntax (e.g., \nadd 1 1\n or \nadd(1)(1)\n).  \n\n\nIf you get past the verbosity, there is another reason why currying is cool.  Consider \nadd(1, 1)\n -- we have to have both arguments available at the same time to compute the function.  With currying, we no longer have to.  We can evaluate the different arguments at different time (as \nincr\n example above).  This feature is useful in cases where some arguments are not available until later.  We can \npartially apply\n a function first.  This is also useful if one of the arguments does not change often, or is expensive to compute.  We can save the partial results as a function and continue applying later.\n\n\nAgain, using Lab 5 as example, you may have a method \nserve\n that takes in a \nCustomer\n c and a \nServer\n s in a \nSimulation\n class.  When a customer is created, you do not know who is the server is yet.  You can partially apply the method first with the customer.  When the customer is served, you apply it again with the server \ns\n as argument.",
            "title": "7. Lambda and Functions"
        },
        {
            "location": "/lec7/index.html#lecture-7-functions",
            "text": "",
            "title": "Lecture 7: Functions"
        },
        {
            "location": "/lec7/index.html#learning-objectives",
            "text": "After this lecture, students should be familiar with:   the concept of functions as a side-effect free programming constructs and its relation to functions in mathematics.  the  Function  interface in Java 8, including apply and compose methods.  the syntax of method reference and lambda expression  how to write functions with multiple arguments using curried functions    Java 8 introduces several new important new features, including lambda expressions and the stream APIs.  We will spend the next few lectures exploring these new features and how it allows us to write more succinct code and hopefully, less buggy code.  The stream APIs also makes it possible for us to parallelize our code for execution on multiple cores/processors with ease.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec7/index.html#abstraction-principles-revisited",
            "text": "Let's revisit the abstraction principles we first visited in Lecture 2.  It says that \"Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.\"  We have seen this principles being applied in several ways.    First, consider the methods to generate random inter-arrival time and random service time.  We can write them as methods below:  1\n2\n3\n4\n5\n6\n7 double   generateInterArrivalTime ()   { \n   return   - Math . log ( rng . nextDouble ())/ this . arrivalRate ;  }  double   generateServiceTime ()   { \n   return   - Math . log ( rng . nextDouble ())/ this . serviceRate ;  }    You can see that the three methods above have similar implementation.  They all generate an exponentially distributed random number, with different rate.  One could apply the abstraction principle and write the code as follows:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 double   randomExponentialValue ( double   rate )   { \n   return   - Math . log ( rng . nextDouble ())/ rate ;  }  double   generateServiceTime ()   { \n   return   randomExponentialValue ( this . serviceRate );  }  double   generateInterArrivalTime ()   { \n   return   randomExponentialValue ( this . arrivalRate );  }    Now, if you need a new exponentially distributed random number, say for inter-switching time or break time (see Lab 5), you can just write a method that calls  randomExponentialValue()  method with the appropriate rate.  Here, the varying parts that we abstracted out is the variables.    Second, consider the  CircleQueue  and  PointQueue  examples from Lecture 4.  The two classes implements similar methods with similar logic.  The only difference is the type.     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   CircleQueue   { \n   private   Circle []   circles ; \n    : \n   public   CircleQueue ( int   size )   {...} \n   public   boolean   isFull ()   {...} \n   public   boolean   isEmpty ()   {...} \n   public   void   enqueue ( Circle   c )   {...} \n   public   Circle   dequeue ()   {...}  }  class   PointQueue   { \n   private   Point []   points ; \n    : \n   public   PointQueue ( int   size )   {...} \n   public   boolean   isFull ()   {...} \n   public   boolean   isEmpty ()   {...} \n   public   void   enqueue ( Point   p )   {...} \n   public   Point   dequeue ()   {...}  }    We then replace the two classes (and any future class that we might write to implement such queues) with a generic  Queue<T> .  1\n2\n3\n4\n5\n6\n7\n8\n9 class   Queue < T >   { \n   private   T []   objects ; \n    : \n   public   Queue < T >( int   size )   {...} \n   public   boolean   isFull ()   {...} \n   public   boolean   isEmpty ()   {...} \n   public   void   enqueue ( T   o )   {...} \n   public   T   dequeue ()   {...}  }    Here, the varying parts that we abstracted out is the type of the elements.    Third, consider how we tell  ArrayList.sort()  to sort the items in the array in Lecture 5.  By passing in  NameComparator , we can tell  ArrayList  to sort in alphabetical order, either in ascending order or descending order, or by the length of the strings, or any other ways we like.   An alternative would be to have our own  StringList  class and implements methods  sortAlphabeticallyAscending() ,  sortAlphabeticallyDescending() ,  sortByLengthAscending() ,  sortByLengthDescending() , etc.  But all of these methods would be implementing the same sorting algorithms, the only part that is different is the comparison method to determine the order of the elements.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 import   java.util.* ;  class   NameComparator   implements   Comparator < String >   { \n   public   int   compare ( String   s1 ,   String   s2 )   { \n     // return (s1.compareTo(s2)); \n     // return (s2.compareTo(s1)); \n     return   ( s2 . length ()   -   s1 . length ()); \n   }  }  class   SortedList   { \n   public   static   void   main ( String []   args )   { \n     List < String >   names   =   new   ArrayList < String >(); \n\n     names . add ( 0 ,   \"Joffrey\" ); \n     names . add ( 1 ,   \"Cersei\" ); \n     names . add ( 2 ,   \"Meryn\" ); \n     names . add ( 3 ,   \"Walder\" ); \n       : \n       : \n\n     names . sort ( new   NameComparator ()); \n   }  }    Here, the varying parts that we abstracted out is a snippet of the code, or functionality, of the methods.  This idea is much more powerful than just abstracting out how we compare and sort.  We will see how it can lead to a significantly different ways of writing code.",
            "title": "Abstraction Principles Revisited"
        },
        {
            "location": "/lec7/index.html#functions",
            "text": "While we have been using the terms functions and methods (and occasionally, procedure) interchangeably, we will now use the term function to refer to methods with specific properties.    A function, in mathematics, refer to a mapping from a set of inputs ( domain )  \\(X\\)  to a set of output values ( codomain )  \\(Y\\) .  We write  \\(f: X \\rightarrow Y\\) .  Every input in the domain must map to exactly one output but multiple inputs can map to the same output.  Not all values in the codomain needs to be mapped.  The set of elements in the codomain that is mapped is called the  image .    Functions in programming language is the same as functions in mathematics.  Given an input, the function computes and returns an output.  A  pure  function does nothing else -- it does not print to the screen, write to files, throw exceptions, change other variables, modify the values of the arguments.  We say that a pure function does not cause any  side effect .    Here is an example of a pure functions:  1\n2\n3\n4\n5\n6\n7 int   square ( int   i )   { \n   return   i   *   i ;  }  int   add ( int   i ,   int   j )   { \n   return   i   +   j ;  }    and some examples of non-pure functions:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 int   div ( int   i ,   int   j )   { \n   return   i   /   j ;    // may throw an exception  }  int   incrCount ( int   i )   { \n   return   this . count   +   i ;   // assume that count is not final. \n                          // this may give diff results for the same i.  }  void   incrCount ( int   i )   { \n   this . count   +=   i ;   // does not return a value \n                    // and has side effects on count  }  int   addToList ( ArrayList   queue ,   int   i )   { \n   queue . add ( i );    // has side effects on queue  }    In fact, in OO paradigm, we commonly need to write methods that update the fields of an instance or compute values using the fields of an instance.  Such methods are not pure functions.\nWhile the notion of pure functions might seems restrictive, recall how many times your program has a bug that is related to incorrect side effects or unintended side effects?  If we design and write our program with pure functions as much as possible, we could significantly reduce the number of bugs.  In mathematics, we say that a mapping is a  partial function  if not all elements in the domain are mapped.   A common programming error is to treat a partial function like a function -- for instance, the  div  method above is written as if it is defined for all int values, but it is not defined when  j  is 0.  Mathematically, a function takes in only one value and return one value (e.g.,  square  above).  In programming, we often need to write functions that takes in more than one arguments (e.g.,  add  above).  We will see how to reconcile this later.  Let's explore functions in Java 8 by looking at the  Function  interface, it is a generic interface with two type parameters,  Function<T, R> ,  T  is the type of the inpuT,  R  is the type of the Result.  It has one abstract method  R apply(T t)  that applies the function to a given argument.  Let's write a class that implements  Function .  1\n2\n3\n4\n5 class   Square   implements   Function < Integer ,   Integer >   { \n   public   Integer   apply ( Integer   x )   { \n     return   x * x ; \n   }  }    To use it, we can: 1 int x = new Square().apply(4);   So far, everything is as you have seen before, and is significantly more complex than just writing:  1 int x = square(4);   So, what is the use of this?  Consider now if we have a  List<Integer>  of integers, and we want to return another list where the elements is the square of the first list.  We can write a method: 1\n2\n3\n4\n5\n6\n7 List < Integer >   squareList ( List < Integer >   list )   { \n   List < Integer >   newList   =   new   ArrayList < Integer >(); \n   for   ( Integer   i :   list )   { \n     newList . add ( square ( i )); \n   } \n   return   newList ;  }   \nCreating a new list out of an existing list is actually a common pattern.  We might want to, say, create a list with the absolute values: 1\n2\n3\n4\n5\n6\n7 List < Integer >   negativeList ( List < Integer >   list )   { \n   List < Integer >   newList   =   new   ArrayList < Integer >(); \n   for   ( Integer   i :   list )   { \n     newList . add ( Math . abs ( i )); \n   } \n   return   newList ;  }   \nThis is actually a common pattern.  Applying the abstraction principles, we can generalize the method to: 1\n2\n3\n4\n5\n6\n7 List < Integer >   applyList ( List < Integer >   list ,   Function < Integer , Integer >   f )   { \n   List < Integer >   newList   =   new   ArrayList < Integer >(); \n   for   ( Integer   i :   list )   { \n     newList . add ( f . apply ( i )); \n   } \n   return   newList ;  }    and call: 1 applyList ( list ,   new   Square ());   \nto return a list of squares.  If we do not want to create a new class just for this, we can, as before, use an anonymous class: 1\n2\n3\n4\n5 applyList ( list ,   new   Function < Integer , Integer >()   {  \n   Integer   apply ( Integer   x )   { \n     return   x   *   x ; \n   }  });     Map  The  applyList  method above is most commonly refered to as  map .",
            "title": "Functions"
        },
        {
            "location": "/lec7/index.html#lambda-expression",
            "text": "The code is still pretty ugly, and there is much boiler plate code.  The key line is actually Line 3 above,  return x * x .  Fortunately, Java 8 provides a clean way to write this:  1\n2\n3 applyList ( list ,   ( Integer   x )   ->   {   return   x   *   x ;   });  applyList ( list ,   x   ->   {   return   x   *   x ;   });  applyList ( list ,   x   ->   x   *   x );    The expressions above, including  x -> x * x , are  lambda expressions .  You can recognize one by the use of  -> .   The left hand side lists the arguments (use  ()  if there is no argument), while the right hand side is the computation.  We do not need the type in cases where Java can refer the type, or need the return statements and the curly brackets.   lambda  Alonzo Church invented lambda calculus ( \\(\\lambda\\) -calculus) in 1936, before electronic computers, as a way to express computation.  In  \\(\\lambda\\) -calculus, all functions are anonymous.  The term lambda expression originated from there.   We can use lambda expressions just like any other values in Java.  We have seen above that we can pass a lambda expression to a method.  We can also assign lambda expression to a variable: 1\n2 Function < Integer , Integer >   square   =   x   ->   x   *   x ;  square . apply ( 4 );",
            "title": "Lambda Expression"
        },
        {
            "location": "/lec7/index.html#method-reference",
            "text": "We can use lambda expression to implement  applyList  with  abs()  method in  Math . 1 applyList ( list ,   x   ->   Math . abs ( x ));    If we look carefully at  abs() , however, it takes in an  int , and returns an  int .  So, it already fits the  Function<Integer,Integer>  interface (with autoboxing and unboxing).  As such, we can refer to the method with a method reference:  Math::abs .  The code above can be simplified to: 1 applyList ( list ,   Math :: abs );    Again, we can assign method reference and pass them around like any other objects. 1\n2 Function < Integer , Integer >   f   =   Math :: abs ;  f . apply (- 4 );",
            "title": "Method Reference"
        },
        {
            "location": "/lec7/index.html#composing-functions",
            "text": "The  Function  interface has two default methods: 1\n2 default   < V >   Function < T , V >   andThen ( Function <?   super   R ,?   extends   V >   after );  default   < V >   Function < V , R >   compose ( Function <?   super   V ,?   extends   T >   before );    for composing two functions.  The term  compose  here is used in the mathematical sense (i.e., the  \\(\\cdot\\)  operator in  \\(f \\cdot g\\) ).  These two methods,  andThen  and  compose , return another function, and they are generic methods, as they have a type parameter  <V> .  Suppose we want to write a function that returns the square root of the absolute value of an int, we can write: 1\n2\n3 double   SquareRootAbs ( int   x )   { \n   return   Math . sqrt ( Math . abs ( x ));  }    or, we can write either 1\n2\n3 Function < Integer , Integer >   abs   =   Math :: abs ;  Function < Integer , Double >   sqrt   =   Math :: sqrt ;  abs . andThen ( sqrt )    or  1 sqrt . compose ( abs )    But isn't writing the plain old method  SquareRootAbs()  clearer?  Why bother with  Function ?  The difference is that,  SquareRootAbs()  has to be written before we compile our code, and is fixed once we compile.  Using the  Function  interface, we can compose functions at  run time , dynamically as needed!  Here is an example that you might be familiar with, from Lab 5:  1\n2\n3\n4\n5\n6 Function < Customer ,   Queue >   findQueueToSwitchTo ;  if   ( numOfQueue   >   1 )   { \n   findQueueToSwitchTo   =   findShortestQueue . andThen ( checkIfFewerInFront );   }   else   {   // only one queue \n   findQueueToSwitchTo   =   Customer :: getQueue ;    // no need to do anything  }    So instead of relying on the logic that the shortest queue is the same as the only queue and there is always the same number of customer in front if the customer is already is in the shortest queue, we just redefine the function that finds the queue to switch to to return the only queue.",
            "title": "Composing Functions"
        },
        {
            "location": "/lec7/index.html#other-functions",
            "text": "Java 8 package  java.util.function  provides other useful interfaces, including:   Predicate<T>  with a  boolean test(T t)  method   Supplier<T>  with a  T get()  method  Consumer<T>  with a  void accept(T t)  method  BiFunction<T,U,R>  with a  R apply(T t, U u)  method   Other variations that involves primitive types are also provided.",
            "title": "Other Functions"
        },
        {
            "location": "/lec7/index.html#curried-functions",
            "text": "Functions have an  arity .  The  Function  interface is for unary functions that take in a single argument; the  BiFunction  inteface for binary functions, with two arguments.  But we can have functions that take more than two arguments.  We can, however, build functions that take in multiple arguments with only unary functions.   Let's look at this mathematically first.  Consider a binary function  \\(f: (X, Y) \\rightarrow Z\\) .  We can introduce  \\(F\\)  as a set of all functions  \\(f': Y \\rightarrow Z\\) , and rewrite  \\(f\\)  as  \\(f: X \\rightarrow F\\) , of  \\(f: X \\rightarrow Y \\rightarrow Z\\) .  A trivial example for this is the  add  method that adds two  int  values.  1\n2\n3 int   add ( int   x ,   int   y )   { \n   return   x   +   y ;  }    This can be written as 1 Function < Integer ,   Function < Integer ,   Integer >>   add   =   x   ->   y   ->   ( x   +   y );    To calcualte 1 + 1, we call 1 add . apply ( 1 ). apply ( 1 );    Let's break it down a litte,  add  is a function that takes in an  Integer  object and returns a unary  Function  over  Integer .  So  add.apply(1)  returns the function  y -> 1 + y .  We could assign this to a variable: 1 Function<Integer,Integer> incr = add.apply(1);   Here is the place where you need to change how you think:  add  is not a function that takes two arguments and return a value.  It is a  higher-order function  that takes in a single argument, and return another function.  The technique that translates a general  \\(n\\) -ary function to a sequence of  \\(n\\)  unary functions is called  currying .  After currying, we have a sequence of  curried  functions.     Curry  Currying is not related to food, but rather is named after computer scientist Haskell Curry, who popularized the technique.   Again, you might question why do we need this?  We can simply call  add(1, 1) , instead of  add.apply(1).apply(1) ?  Well, the verbosity is the fault of Java instead of functional programming techniques.  Other languages like Haskell or Scala have much simpler syntax (e.g.,  add 1 1  or  add(1)(1) ).    If you get past the verbosity, there is another reason why currying is cool.  Consider  add(1, 1)  -- we have to have both arguments available at the same time to compute the function.  With currying, we no longer have to.  We can evaluate the different arguments at different time (as  incr  example above).  This feature is useful in cases where some arguments are not available until later.  We can  partially apply  a function first.  This is also useful if one of the arguments does not change often, or is expensive to compute.  We can save the partial results as a function and continue applying later.  Again, using Lab 5 as example, you may have a method  serve  that takes in a  Customer  c and a  Server  s in a  Simulation  class.  When a customer is created, you do not know who is the server is yet.  You can partially apply the method first with the customer.  When the customer is served, you apply it again with the server  s  as argument.",
            "title": "Curried Functions"
        },
        {
            "location": "/lec8/index.html",
            "text": "Lecture 8: Lambdas and Streams\n\n\nLearning Objectives\n\n\nAfter this lecture, students should be familiar with:\n\n\n\n\nhow to write functions with multiple arguments using curried functions \n\n\nhow to compose functions\n\n\ngeneral functional interface with single abstract method (SAM)\n\n\nthe concept of closure and its relation to lambda expression\n\n\nthe concept of eager evaluation vs. lazy evaluation\n\n\nthe concept of function as delayed data and its application in defining an infinite list\n\n\nJava \nStream\n class and its operations\n\n\nusing the stream operations to write declarative-style code, avoiding loops and branches\n\n\n\n\nWe continue where we left off in Lecture 7.\n\n\nLambdas (continued)\n\n\nComposing Functions\n\n\nThe \nFunction\n interface has two default methods:\n\n1\n2\ndefault\n \n<\nV\n>\n \nFunction\n<\nT\n,\nV\n>\n \nandThen\n(\nFunction\n<?\n \nsuper\n \nR\n,?\n \nextends\n \nV\n>\n \nafter\n);\n\n\ndefault\n \n<\nV\n>\n \nFunction\n<\nV\n,\nR\n>\n \ncompose\n(\nFunction\n<?\n \nsuper\n \nV\n,?\n \nextends\n \nT\n>\n \nbefore\n);\n\n\n\n\n\n\nfor composing two functions.  The term \ncompose\n here is used in the mathematical sense (i.e., the \n\\(\\cdot\\)\n operator in \n\\(f \\cdot g\\)\n).\n\n\nThese two methods, \nandThen\n and \ncompose\n, return another function, and they are generic methods, as they have a type parameter \n<V>\n.  Suppose we want to write a function that returns the square root of the absolute value of an int, we can write:\n\n1\n2\n3\ndouble\n \nSquareRootAbs\n(\nint\n \nx\n)\n \n{\n\n  \nreturn\n \nMath\n.\nsqrt\n(\nMath\n.\nabs\n(\nx\n));\n\n\n}\n\n\n\n\n\n\nor, we can write either\n\n1\n2\n3\nFunction\n<\nInteger\n,\nInteger\n>\n \nabs\n \n=\n \nMath\n::\nabs\n;\n\n\nFunction\n<\nInteger\n,\nDouble\n>\n \nsqrt\n \n=\n \nMath\n::\nsqrt\n;\n\n\nabs\n.\nandThen\n(\nsqrt\n)\n\n\n\n\n\n\nor \n\n1\nsqrt\n.\ncompose\n(\nabs\n)\n\n\n\n\n\n\nBut isn't writing the plain old method \nSquareRootAbs()\n clearer?  Why bother with \nFunction\n?  The difference is that, \nSquareRootAbs()\n has to be written before we compile our code, and is fixed once we compile.  Using the \nFunction\n interface, we can compose functions at \nrun time\n, dynamically as needed!  Here is an example that you might be familiar with, from Lab 5:\n\n\n1\n2\n3\n4\n5\n6\nFunction\n<\nCustomer\n,\n \nQueue\n>\n \nfindQueueToSwitchTo\n;\n\n\nif\n \n(\nnumOfQueue\n \n>\n \n1\n)\n \n{\n\n  \nfindQueueToSwitchTo\n \n=\n \nfindShortestQueue\n.\nandThen\n(\ncheckIfFewerInFront\n);\n \n\n}\n \nelse\n \n{\n \n// only one queue\n\n  \nfindQueueToSwitchTo\n \n=\n \nCustomer\n::\ngetQueue\n;\n  \n// no need to do anything\n\n\n}\n\n\n\n\n\n\n\nSo instead of relying on the logic that the shortest queue is the same as the only queue and there is always the same number of customer in front if the customer is already is in the shortest queue, we just redefine the function that finds the queue to switch to to return the only queue.\n\n\nOther Functions\n\n\nJava 8 package \njava.util.function\n provides other useful interfaces, including:\n\n\n\n\nPredicate<T>\n with a \nboolean test(T t)\n method \n\n\nSupplier<T>\n with a \nT get()\n method\n\n\nConsumer<T>\n with a \nvoid accept(T t)\n method\n\n\nBiFunction<T,U,R>\n with a \nR apply(T t, U u)\n method\n\n\n\n\nOther variations that involves primitive types are also provided.\n\n\nCurried Functions\n\n\nFunctions have an \narity\n.  The \nFunction\n interface is for unary functions that take in a single argument; the \nBiFunction\n inteface for binary functions, with two arguments.  But we can have functions that take more than two arguments.  We can, however, build functions that take in multiple arguments with only unary functions.   Let's look at this mathematically first.  Consider a binary function \n\\(f: (X, Y) \\rightarrow Z\\)\n.  We can introduce \n\\(F\\)\n as a set of all functions \n\\(f': Y \\rightarrow Z\\)\n, and rewrite \n\\(f\\)\n as \n\\(f: X \\rightarrow F\\)\n, of \n\\(f: X \\rightarrow Y \\rightarrow Z\\)\n.\n\n\nA trivial example for this is the \nadd\n method that adds two \nint\n values. \n\n1\n2\n3\nint\n \nadd\n(\nint\n \nx\n,\n \nint\n \ny\n)\n \n{\n\n  \nreturn\n \nx\n \n+\n \ny\n;\n\n\n}\n\n\n\n\n\n\nThis can be written as\n\n1\nFunction\n<\nInteger\n,\n \nFunction\n<\nInteger\n,\n \nInteger\n>>\n \nadd\n \n=\n \nx\n \n->\n \ny\n \n->\n \n(\nx\n \n+\n \ny\n);\n\n\n\n\n\n\nTo calcualte 1 + 1, we call\n\n1\nadd\n.\napply\n(\n1\n).\napply\n(\n1\n);\n\n\n\n\n\n\nLet's break it down a litte, \nadd\n is a function that takes in an \nInteger\n object and returns a unary \nFunction\n over \nInteger\n.  So \nadd.apply(1)\n returns the function \ny -> 1 + y\n.  We could assign this to a variable:\n\n1\nFunction<Integer,Integer> incr = add.apply(1);\n\n\n\n\n\nHere is the place where you need to change how you think: \nadd\n is not a function that takes two arguments and return a value.  It is a \nhigher-order function\n that takes in a single argument, and return another function.\n\n\nThe technique that translates a general \n\\(n\\)\n-ary function to a sequence of \n\\(n\\)\n unary functions is called \ncurrying\n.  After currying, we have a sequence of \ncurried\n functions.  \n\n\n\n\nCurry\n\n\nCurrying is not related to food, but rather is named after computer scientist Haskell Curry, who popularized the technique.\n\n\n\n\nAgain, you might question why do we need this?  We can simply call \nadd(1, 1)\n, instead of \nadd.apply(1).apply(1)\n?  Well, the verbosity is the fault of Java instead of functional programming techniques.  Other languages like Haskell or Scala have much simpler syntax (e.g., \nadd 1 1\n or \nadd(1)(1)\n).  \n\n\nIf you get past the verbosity, there is another reason why currying is cool.  Consider \nadd(1, 1)\n -- we have to have both arguments available at the same time to compute the function.  With currying, we no longer have to.  We can evaluate the different arguments at different time (as \nincr\n example above).  This feature is useful in cases where some arguments are not available until later.  We can \npartially apply\n a function first.  This is also useful if one of the arguments does not change often, or is expensive to compute.  We can save the partial results as a function and continue applying later.\n\n\nAgain, using Lab 5 as example, you can have several functions defined:\n\n1\n2\n3\n4\n5\n6\n7\nFunction\n<\nDouble\n,\n \nFunction\n<\nDouble\n,\nDouble\n>>\n \ngenerateExponetialVariable\n \n=\n \n    \nrate\n \n->\n \nrandDouble\n \n->\n \n-\nMath\n.\nlog\n(\nrandDouble\n)/\nrate\n;\n\n\nFunction\n<\nDouble\n,\nDouble\n>\n \ngenerateServiceTime\n \n=\n \n    \ngenerateExponentialVariable\n.\napply\n(\nparam\n.\nlambda\n);\n\n\nFunction\n<\nDouble\n,\nDouble\n>\n \ngenerateInterArrivalTime\n \n=\n \n    \ngenerateExponentialVariable\n.\napply\n(\nparam\n.\nmu\n);\n\n  \n:\n\n\n\n\n\n\nInstead of keeping around the parameters, you could keep the functions to generate the random time as fields, and invoked them:\n\n1\nthis\n.\ngenerateServiceTime\n.\napply\n(\nrng\n.\nnextDouble\n());\n\n\n\n\n\n\nFunctional Interface\n\n\nWe are not limited to using lambda expression for the interfaces defined in \njava.util.function\n.  We can use lambda expression as a short hand to a class that implements a interface with a single abstract method -- there has to be only one abstract method so that the compiler knows which method the lambda implements.  This is more commonly known as SAM interface.\n\nNote that a SAM interface can be mulitple methods, but only one can be abstract (others can have default implementation).\n\n\nFor instance, Java has the following interface:\n\n1\n2\n3\ninterface\n \nRunnable\n \n{\n\n  \nvoid\n \nrun\n();\n\n\n}\n\n\n\n\n\n\nThere is only one method, and it is abstract (no default implementation).  So it is a valid SAM interface.\n\n\nWe can annotate a class with \n@FunctionalInterface\n to hint our intention to the compiler and to let the compiler helps us to catch unintended error (such as when we add a second abstract method to the interface).\n\n\nWe can define our own interface as well.  For instance, in Lab 5, we can define:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n@FunctionalInterface\n\n\ninterface\n \nFindQueueStrategy\n \n{\n\n  \nCustomerQueue\n \nfindQueue\n(\nShop\n \nshop\n);\n\n\n}\n\n\n\n@FunctionalInterface\n\n\ninterface\n \nJoinQueueStrategy\n \n{\n\n  \nvoid\n \njoinQueue\n(\nCustomerQueue\n \nqueue\n,\n \nCustomer\n \nc\n);\n\n\n}\n\n\n\n\n\n\nNow, we can avoid three \nCustomer\n subclasses.  We just need to instantiate a new \nCustomer\n with different strategies:\n\n\nWe can set \nFindQueueStrategy\n to either \nshop -> shop.getShortestQueue()\n or \nshop -> shop.getRandomQueue()\n and set the JoinQueueStrategy to either \n(q, customer) -> q.addToBack(customer)\n or \n(q, customer) -> q.addToFront(customer)\n.\n\n\nLambda as Closure\n\n\nJust like a local class an anonymous classes, a lambda can capture the variables of the enclosing scope.  For instance, if you do not wish to generate the service time of a customer at the time of arrival, you can pass in a \nSupplier\n to \nCustomer\n instead:\n\n1\nCustomer c = new Customer(() -> -Math.log(rng.nextDouble())/rate);\n\n\n\n\n\nHere, \nrng\n and \nrate\n are variables captured from the enclosing scope.\n\n\nAnd just like in local and anonymous classes, a captured variable must be either explicitly declared as \nfinal\n or is effectively final.\n\n\nA lambda expression therefore store more than just the function to invoke -- it also stores the data from the environment where it is defined.  We call such construct which store a function together with the enclosing environments a \nclosure\n. \n\n\nFunction as Delayed Data\n\n\nConsider a function that produces new value or values.  We can consider the function as a promise to give us the given data sometime later, when needed.  For instance:\n\n1\n() -> -Math.log(rng.nextDouble())/rate)\n\n\n\n\n\nis not the value of a service time, but rather, a supplier of the service time.  When we need a service time, we just invoke the supplier.\n\n\nWhat's the big deal?  Not so much in the simple example above.  But consider the case where the function is an expensive one.\nWe can then delay the execution of the expensive function until it is absolutely needed.  This allows us to do things that we couldn't before, for instance, create and manipulate an infinite list!\n\n\nAn Infinite List\n\n\nHow can we represent an infinite list?  If we store the values of each element in the list, then we will run out of memory pretty soon.  If we try to manipulate every element in the list, then we will enter an infinite loop.  \n\n\nThe trick to building an infinite list, is to treat the elements in the list as \ndelayed data\n, and store a function that generates the elements, instead of the elements itself.\n\n\nWe can think of an infinite list as two functions, the first is a function that generates the first element, and the second is a function that generates the rest of the list.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nclass\n \nInfiniteList\n<\nT\n>\n \n{\n\n  \nprivate\n \nSupplier\n<\nT\n>\n \nhead\n;\n\n  \nprivate\n \nSupplier\n<\nInfiniteList\n<\nT\n>>\n \ntail\n;\n\n\n  \npublic\n \nstatic\n \nInfiniteList\n<\nT\n>\n \ngenerate\n(\nSupplier\n<\nT\n>\n \nsupply\n)\n \n{\n\n    \nreturn\n \nnew\n \nInfiniteList\n(\nsupply\n,\n\n      \n()\n \n->\n \nInfiniteList\n.\ngenerate\n(\nsupply\n));\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nThere you go!  We now have an infinite list defined by the supply function.  \n\n\nA list defined this way is lazily evaluated.  We won't get the elements until we need it -- this is in constrast to the eager \nLambdaList\n you write in Lab 6.\n\n\nLet's see how to use this list.  Consider the \nfindFirst\n method:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\npublic\n \nT\n \nfindFirst\n(\nPredicate\n<\nT\n>\n \npredicate\n)\n \n{\n\n  \nT\n \nfirst\n \n=\n \nthis\n.\nhead\n.\nget\n();\n\n  \nif\n \n(\npredicate\n.\ntest\n(\nfirst\n))\n \n{\n\n    \nreturn\n \nfirst\n;\n\n  \n}\n \n  \nInfiniteList\n<\nT\n>\n \nlist\n \n=\n \nthis\n.\ntail\n.\nget\n();\n\n  \nwhile\n \n(\ntrue\n)\n \n{\n\n    \nT\n \nnext\n \n=\n \nlist\n.\nhead\n.\nget\n();\n\n    \nif\n \n(\npredicate\n.\ntest\n(\nnext\n))\n \n{\n\n      \nreturn\n \nnext\n;\n\n    \n}\n\n    \nlist\n \n=\n \nlist\n.\ntail\n.\nget\n();\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nSimpler code\n\n\nThe code shown in the lecture above could be simplified to:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\npublic\n \nT\n \nfindFirst\n(\nPredicate\n<\nT\n>\n \npredicate\n)\n \n{\n\n  \nInfiniteList\n<\nT\n>\n \nlist\n \n=\n \nthis\n;\n\n  \nwhile\n \n(\ntrue\n)\n \n{\n\n    \nT\n \nnext\n \n=\n \nlist\n.\nhead\n.\nget\n();\n\n    \nif\n \n(\npredicate\n.\ntest\n(\nnext\n))\n \n{\n\n      \nreturn\n \nnext\n;\n\n    \n}\n\n    \nlist\n \n=\n \nlist\n.\ntail\n.\nget\n();\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\nIn the method above, we repeatedly invoke the supplier, until we find an element that matches the predicate.  This way, we never had to generate every element in the list just to find the first element that matches.\n\n\n\n\niterate\n\n\nIn class, I also showed the \niterate\n method to generate a list:\n\n1\n2\n3\n4\n5\n6\n  \npublic\n \nstatic\n \n<\nT\n>\n \nInfiniteList\n<\nT\n>\n \niterate\n(\nT\n \ninit\n,\n \nFunction\n<\nT\n,\n \nT\n>\n \nnext\n)\n \n{\n\n    \nreturn\n \nnew\n \nInfiniteList\n<\nT\n>(\n\n        \n()\n \n->\n \ninit\n,\n \n        \n()\n \n->\n \nInfiniteList\n.\niterate\n(\nnext\n.\napply\n(\ninit\n),\n \nnext\n)\n\n      \n);\n\n  \n}\n\n\n\n\n\n\n\n\nStream\n\n\nSuch a list, possibly infinite, that is lazily evaluated on demand is also known as a \nstream\n.  Java 8 provides a set of useful and powerful methods on streams, allowing programmers to manipulate data very easily.  Java 9 adds a couple of useful methods, \ntakeWhile\n and \ndropWhile\n, which is also invaluable.  To take full advantage of streams, we will be using Java 9, not Java 8 for the rest of this class.  \n\n\nStream operations\n\n\nA few things to note before I show you how to use streams.  First, the operations on streams can be classified as either \nintermediate\n or \nterminal\n.  An \nintermediate\n operation returns another stream.  For instance, \nmap\n, \nfilter\n, \npeek\n are examples of intermediate operations.  An intermediate operation does not cause the stream to be evaluated.  A terminal operation, on the other hand, force the streams to be evaluated.  It does not return a stream.  \nreduce\n, \nfindFirst\n, \nforEach\n are examples of terminal operation.  A typical way of writing code that operate on streams is to chain a series of intermediate operation together, ending with a terminal operation.  \n\n\nSecond, a stream can only be consumed once.  We cannot iterate through a stream mulitple times.  We have to create the stream again if we want to do that:\n\n\n1\n2\n3\nStream\n<\nInteger\n>\n \ns\n \n=\n \nStream\n.\nof\n(\n1\n,\n2\n,\n3\n);\n\n\ns\n.\ncount\n();\n\n\ns\n.\ncount\n();\n \n// <- error\n\n\n\n\n\n\n\nIn the example above, we use the \nof\n static method with variable number of arguments to create a stream.  We can also create a stream by:\n\n\n\n\nconverting an array to stream using \nArrays.stream\n method\n\n\nconverting a collection to stream using \nstream\n method\n\n\nreading from a file using \nFiles.lines\n method\n\n\nusing the \ngenerate\n method (provide a \nSupplier\n) or \ninterate\n method (providing the initial value and incremental operation). \n\n\n\n\nYou have seen many of the stream operations before, in Lab 6, including \nmap\n, \nreduce\n, \nfilter\n, \nfindFirst\n, \npeek\n, and \nforEach\n.  Even though they are in the context of an eagerly evaluated list, the semantics are the same.  Here are a few more useful ones.\n\n\n\n\nflatMap\n is just like \nmap\n, but it takes in a function that produces another stream (instead of another element), and it \nflattens\n the stream by inserting the elements from the stream produced into the stream.\n\n\n\n\nLet see an example.  The lambda below takes a string and return a stream of \nInteger\n objects:\n\n\n1\nx\n \n->\n \nx\n.\nchars\n().\nboxed\n()\n\n\n\n\n\n\n\nWe can create a stream of strings using the static \nof\n method from \nStream\n:\n\n\n1\nStream\n.\nof\n(\n\"live\"\n,\n \n\"long\"\n,\n \n\"and\"\n,\n \n\"prosper\"\n)\n\n\n\n\n\n\n\nIf we chain the two together, using \nmap\n, however, we will produce a stream of stream of \nInteger\n.\n\n\n1\n2\nSteam\n.\nof\n(\n\"live\"\n,\n \n\"long\"\n,\n \n\"and\"\n,\n \n\"prosper\"\n)\n\n    \n.\nmap\n(\nx\n \n->\n \nx\n.\nchars\n().\nboxed\n())\n\n\n\n\n\n\n\nTo produce a stream of \nInteger\ns, we use \nflatMap()\n:\n\n\n1\n2\nStream\n.\nof\n(\n\"live\"\n,\n \n\"long\"\n,\n \n\"and\"\n,\n \n\"prosper\"\n)\n\n    \n.\nflatMap\n(\nx\n \n->\n \nx\n.\nchars\n().\nboxed\n())\n\n\n\n\n\n\n\n\n\n\n\nsorted\n is an intermediate operation that returns a stream with the elements in the stream sorted.  Without argument, it sorts according to the natural order.  You can also passed in a \nComparator\n to tell \nsorted\n how to sort.\n\n\n\n\n\n\ndistinct\n is another intermediate operation that returns a stream with only distinct elements in the stream. \n\n\n\n\n\n\ndistinct\n and \nsorted\n are stateful operations -- it needs to keep track of states in order to perform the operation.  \nsorted\n in particular, need to know every elements in the stream before it can output the result.  They are also known as \nbounded\n operations, since call them on an infinite stream is a very bad idea!\n\n\nHere is how we print out the unique characters of a given sequence of streams in sorted order\n\n1\n2\n3\n4\n5\n6\nStream\n.\nof\n(\n\"live\"\n,\n \n\"long\"\n,\n \n\"and\"\n,\n \n\"prosper\"\n)\n\n    \n.\nflatMap\n(\nx\n \n->\n \nx\n.\nchars\n().\nboxed\n())\n\n    \n.\ndistinct\n()\n\n    \n.\nsorted\n()\n\n    \n.\nmap\n(\nx\n \n->\n \nnew\n \nCharacter\n((\nchar\n)\nx\n.\nintValue\n()))\n\n    \n.\nforEach\n(\nSystem\n.\nout\n::\nprint\n);\n\n\n\n\n\n\nThere are several intermediate operations that convert from infinite stream to finite stream.  \n\n\n\n\nlimit\n takes in an \nint\n \n\\(n\\)\n and return a stream containing the first \n\\(n\\)\n elements of the stream;\n\n\ntakeWhile\n takes in a predicate and return a stream containing the elements of the stream, until the predicate becomes false.  The resulting stream might still be infinite if the predicate never becomes false.\n\n\n\n\nHere are more useful terminal operations:\n\n\n\n\nnoneMatch\n return true if none of the elements pass the given predicate.\n\n\nallMatch\n return true if every element passes the given predicate.\n\n\nanyMatch\n return true if no elements passes the given predicate.\n\n\n\n\nExample 1: Is this a prime?\n\n\nConsider the method below, which checks if a given \nint\n is a prime:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nboolean\n \nisPrime\n(\nint\n \nx\n)\n \n{\n\n  \nfor\n \n(\ni\n \n=\n \n2\n;\n \ni\n \n<=\n \nx\n-\n1\n;\n \ni\n++)\n \n{\n\n    \nif\n \n(\nx\n \n%\n \ni\n \n==\n \n0\n)\n \n{\n\n      \nreturn\n \nfalse\n;\n\n    \n}\n\n  \n}\n\n  \nreturn\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\n\nThe code coudln't be simpler -- or can it?  With streams, we can write it as:\n\n1\n2\n3\n4\nboolean\n \nisPrime\n(\nint\n \nx\n)\n \n{\n\n  \nreturn\n \nIntStream\n.\nrange\n(\n2\n,\n \nx\n-\n1\n)\n\n      \n.\nmatchNone\n(\nx\n \n%\n \ni\n \n==\n \n0\n);\n\n\n}\n\n\n\n\n\n\n\n\nBug\n\n\nThere is a bug in the earlier code where the code showed \nIntStream.range(2,x-1)\n.  \nrange(m,n)\n returns a stream from \nm\n to \nn-1\n.\n\n\n\n\nIntStream\n is a special \nStream\n for primitive type \nint\n, the \nrange\n method generates a stream of \nint\n in a given range (inclusive)\n\n\nWhat if we want to print out the first 500 prime numbers, starting from 2?  Normally, we would do the following:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nvoid\n \nfiveHundredPrime\n()\n \n{\n\n  \nint\n \ncount\n \n=\n \n0\n;\n\n  \nint\n \ni\n \n=\n \n2\n;\n\n  \nwhile\n \n(\ncount\n \n<\n \n500\n)\n \n{\n\n    \nif\n \n(\nisPrime\n(\ni\n))\n \n{\n\n      \nSystem\n.\nout\n.\nprintln\n(\ni\n);\n\n      \ncount\n++;\n\n    \n}\n\n    \ni\n++;\n\n  \n}\n\n\n}\n\n\n\n\n\n\nThe code is still considered simple, and understandable for many, but I am sure some of us will encounter a bug the first time we write this (either forgot to increment counter, or put the increment in the wrong place).  If you look at the code, there are a couple of compnents:\n\n\n\n\nLines 3 and 9 deal with iterating through different numbers for primality testing\n\n\nLine 4 is the test\n\n\nLines 2, 4, and 7, deal with limiting the output to 500 primes\n\n\nLine 5 is the action to perform on the prime\n\n\n\n\nWith streams, we can write it like the following:\n\n1\n2\n3\n4\nIntStream\n.\niterate\n(\n2\n,\n \nx\n \n->\n \nx\n+\n1\n)\n\n    \n.\nfilter\n(\nx\n \n->\n \nisPrime\n(\nx\n))\n\n      \n.\nlimit\n(\n500\n)\n\n      \n.\nforEach\n(\nSystem\n.\nout\n::\nprintln\n);\n\n\n\n\n\n\nNotice how each of the four components matches neatly with one operation on stream!  \n\n\nWith stream, we no longer have to write loops -- as you have done in Lab 6, we have move the iterations to within each operation in stream.  We no longer need to maintain states and counters, they are done within each operation as needed as well.  This has another powerful implication: our code become more \ndeclarative\n, we only need to concern about what we want at each step, much less about how to do it.\n\n\nYou should take a look at the methods provided by the \nStream\n class, and read through the APIs, a few times, they formed fundamental building blocks for writing data processing code in functional style in Java.\n\n\nExample 2: Simulator's run\n\n\nLet's convert our code from our lab into stream.  Consider this:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n  \npublic\n \nvoid\n \nrun\n(\nSimulation\n \nsim\n)\n \n{\n\n      \nschedule\n(\nsim\n.\nfirstEvents\n());\n\n      \nwhile\n \n(!\nevents\n.\nisEmpty\n())\n \n{\n\n        \nEvent\n \ne\n \n=\n \nthis\n.\nevents\n.\npoll\n();\n\n        \nif\n \n(\ne\n.\nhappensBefore\n(\nsim\n.\nexpireTime\n()))\n \n{\n\n          \ne\n.\nlog\n();\n\n          \nEvent\n[]\n \nnewEvents\n \n=\n \nsim\n.\nhandle\n(\ne\n);\n\n          \nif\n \n(\nnewEvents\n \n!=\n \nnull\n)\n \n{\n\n            \nschedule\n(\nnewEvents\n);\n\n          \n}\n\n        \n}\n \nelse\n \n{\n\n          \nbreak\n;\n\n        \n}\n\n      \n}\n\n      \nSystem\n.\nout\n.\nprintln\n(\nsim\n.\nstats\n);\n\n\n\n\n\n\n\nAgain, you can see that the main loop is doing several things at one time: (i) it checks if there is still events in the queue, in Line 3, (ii) it checks if we have reached the end of the simulation in Line 5 and Line 12, (iii) it logs the event for debugging in Line 6, (iv) it runs and generates new events in Line 7, then (v) adds to the events in Lines 8-9.\n\n\nLet's try to rewrite this using stream.  First, we need to change our event generation to return a stream of events.  Instead of:\n\n\n1\nreturn new Event[] { event1, event2 };\n\n\n\n\n\n\nWe can now say:\n\n\n1\nreturn Stream.of(event1, event2);\n\n\n\n\n\n\nwhich is IMHO cleaner and more readable.  We also get to avoid \nnull\n (which is never a bad thing) by returning \nStream.empty()\n instead of \nnull\n if we are not going to generate a new event.\n\n\nThe \nschedule\n method becomes:\n\n1\n2\n3\n  \npublic\n \nvoid\n \nschedule\n(\nStream\n<\nEvent\n>\n \nstream\n)\n \n{\n\n    \nthis\n.\nevents\n.\naddAll\n(\nstream\n.\ncollect\n(\nCollectors\n.\ntoList\n()));\n\n  \n}\n\n\n\n\n\n\nWe will still use \nPriorityQueue\n for events, and so \naddAll\n expects a collection.  The \ncollect\n method simply converts a stream to a collection.\n\n\nWith the above changes, we can now rewrite the while loop in \nrun\n using stream:\n\n1\n2\n3\n4\n5\n6\n    \nStream\n.\ngenerate\n(\nthis\n.\nevents\n::\npoll\n)\n\n        \n.\ntakeWhile\n(\nevent\n \n->\n \nevent\n \n!=\n \nnull\n)\n\n        \n.\nfilter\n(\nevent\n \n->\n \nevent\n.\nhappensBefore\n(\nsim\n.\nexpireTime\n()))\n \n        \n.\npeek\n(\nevent\n \n->\n \nevent\n.\nlog\n())\n\n        \n.\nmap\n(\nevent\n \n->\n \nsim\n.\nhandle\n(\nevent\n))\n\n        \n.\nforEach\n(\neventStream\n \n->\n \nthis\n.\nschedule\n(\neventStream\n));\n\n\n\n\n\n\nOnce you get used to writing code with streams, it might be hard to go back to writing loops and bracnhes again!",
            "title": "8. More Lambda and Streams"
        },
        {
            "location": "/lec8/index.html#lecture-8-lambdas-and-streams",
            "text": "",
            "title": "Lecture 8: Lambdas and Streams"
        },
        {
            "location": "/lec8/index.html#learning-objectives",
            "text": "After this lecture, students should be familiar with:   how to write functions with multiple arguments using curried functions   how to compose functions  general functional interface with single abstract method (SAM)  the concept of closure and its relation to lambda expression  the concept of eager evaluation vs. lazy evaluation  the concept of function as delayed data and its application in defining an infinite list  Java  Stream  class and its operations  using the stream operations to write declarative-style code, avoiding loops and branches   We continue where we left off in Lecture 7.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec8/index.html#lambdas-continued",
            "text": "",
            "title": "Lambdas (continued)"
        },
        {
            "location": "/lec8/index.html#composing-functions",
            "text": "The  Function  interface has two default methods: 1\n2 default   < V >   Function < T , V >   andThen ( Function <?   super   R ,?   extends   V >   after );  default   < V >   Function < V , R >   compose ( Function <?   super   V ,?   extends   T >   before );    for composing two functions.  The term  compose  here is used in the mathematical sense (i.e., the  \\(\\cdot\\)  operator in  \\(f \\cdot g\\) ).  These two methods,  andThen  and  compose , return another function, and they are generic methods, as they have a type parameter  <V> .  Suppose we want to write a function that returns the square root of the absolute value of an int, we can write: 1\n2\n3 double   SquareRootAbs ( int   x )   { \n   return   Math . sqrt ( Math . abs ( x ));  }    or, we can write either 1\n2\n3 Function < Integer , Integer >   abs   =   Math :: abs ;  Function < Integer , Double >   sqrt   =   Math :: sqrt ;  abs . andThen ( sqrt )    or  1 sqrt . compose ( abs )    But isn't writing the plain old method  SquareRootAbs()  clearer?  Why bother with  Function ?  The difference is that,  SquareRootAbs()  has to be written before we compile our code, and is fixed once we compile.  Using the  Function  interface, we can compose functions at  run time , dynamically as needed!  Here is an example that you might be familiar with, from Lab 5:  1\n2\n3\n4\n5\n6 Function < Customer ,   Queue >   findQueueToSwitchTo ;  if   ( numOfQueue   >   1 )   { \n   findQueueToSwitchTo   =   findShortestQueue . andThen ( checkIfFewerInFront );   }   else   {   // only one queue \n   findQueueToSwitchTo   =   Customer :: getQueue ;    // no need to do anything  }    So instead of relying on the logic that the shortest queue is the same as the only queue and there is always the same number of customer in front if the customer is already is in the shortest queue, we just redefine the function that finds the queue to switch to to return the only queue.",
            "title": "Composing Functions"
        },
        {
            "location": "/lec8/index.html#other-functions",
            "text": "Java 8 package  java.util.function  provides other useful interfaces, including:   Predicate<T>  with a  boolean test(T t)  method   Supplier<T>  with a  T get()  method  Consumer<T>  with a  void accept(T t)  method  BiFunction<T,U,R>  with a  R apply(T t, U u)  method   Other variations that involves primitive types are also provided.",
            "title": "Other Functions"
        },
        {
            "location": "/lec8/index.html#curried-functions",
            "text": "Functions have an  arity .  The  Function  interface is for unary functions that take in a single argument; the  BiFunction  inteface for binary functions, with two arguments.  But we can have functions that take more than two arguments.  We can, however, build functions that take in multiple arguments with only unary functions.   Let's look at this mathematically first.  Consider a binary function  \\(f: (X, Y) \\rightarrow Z\\) .  We can introduce  \\(F\\)  as a set of all functions  \\(f': Y \\rightarrow Z\\) , and rewrite  \\(f\\)  as  \\(f: X \\rightarrow F\\) , of  \\(f: X \\rightarrow Y \\rightarrow Z\\) .  A trivial example for this is the  add  method that adds two  int  values.  1\n2\n3 int   add ( int   x ,   int   y )   { \n   return   x   +   y ;  }    This can be written as 1 Function < Integer ,   Function < Integer ,   Integer >>   add   =   x   ->   y   ->   ( x   +   y );    To calcualte 1 + 1, we call 1 add . apply ( 1 ). apply ( 1 );    Let's break it down a litte,  add  is a function that takes in an  Integer  object and returns a unary  Function  over  Integer .  So  add.apply(1)  returns the function  y -> 1 + y .  We could assign this to a variable: 1 Function<Integer,Integer> incr = add.apply(1);   Here is the place where you need to change how you think:  add  is not a function that takes two arguments and return a value.  It is a  higher-order function  that takes in a single argument, and return another function.  The technique that translates a general  \\(n\\) -ary function to a sequence of  \\(n\\)  unary functions is called  currying .  After currying, we have a sequence of  curried  functions.     Curry  Currying is not related to food, but rather is named after computer scientist Haskell Curry, who popularized the technique.   Again, you might question why do we need this?  We can simply call  add(1, 1) , instead of  add.apply(1).apply(1) ?  Well, the verbosity is the fault of Java instead of functional programming techniques.  Other languages like Haskell or Scala have much simpler syntax (e.g.,  add 1 1  or  add(1)(1) ).    If you get past the verbosity, there is another reason why currying is cool.  Consider  add(1, 1)  -- we have to have both arguments available at the same time to compute the function.  With currying, we no longer have to.  We can evaluate the different arguments at different time (as  incr  example above).  This feature is useful in cases where some arguments are not available until later.  We can  partially apply  a function first.  This is also useful if one of the arguments does not change often, or is expensive to compute.  We can save the partial results as a function and continue applying later.  Again, using Lab 5 as example, you can have several functions defined: 1\n2\n3\n4\n5\n6\n7 Function < Double ,   Function < Double , Double >>   generateExponetialVariable   =  \n     rate   ->   randDouble   ->   - Math . log ( randDouble )/ rate ;  Function < Double , Double >   generateServiceTime   =  \n     generateExponentialVariable . apply ( param . lambda );  Function < Double , Double >   generateInterArrivalTime   =  \n     generateExponentialVariable . apply ( param . mu ); \n   :    Instead of keeping around the parameters, you could keep the functions to generate the random time as fields, and invoked them: 1 this . generateServiceTime . apply ( rng . nextDouble ());",
            "title": "Curried Functions"
        },
        {
            "location": "/lec8/index.html#functional-interface",
            "text": "We are not limited to using lambda expression for the interfaces defined in  java.util.function .  We can use lambda expression as a short hand to a class that implements a interface with a single abstract method -- there has to be only one abstract method so that the compiler knows which method the lambda implements.  This is more commonly known as SAM interface. \nNote that a SAM interface can be mulitple methods, but only one can be abstract (others can have default implementation).  For instance, Java has the following interface: 1\n2\n3 interface   Runnable   { \n   void   run ();  }    There is only one method, and it is abstract (no default implementation).  So it is a valid SAM interface.  We can annotate a class with  @FunctionalInterface  to hint our intention to the compiler and to let the compiler helps us to catch unintended error (such as when we add a second abstract method to the interface).  We can define our own interface as well.  For instance, in Lab 5, we can define: 1\n2\n3\n4\n5\n6\n7\n8\n9 @FunctionalInterface  interface   FindQueueStrategy   { \n   CustomerQueue   findQueue ( Shop   shop );  }  @FunctionalInterface  interface   JoinQueueStrategy   { \n   void   joinQueue ( CustomerQueue   queue ,   Customer   c );  }    Now, we can avoid three  Customer  subclasses.  We just need to instantiate a new  Customer  with different strategies:  We can set  FindQueueStrategy  to either  shop -> shop.getShortestQueue()  or  shop -> shop.getRandomQueue()  and set the JoinQueueStrategy to either  (q, customer) -> q.addToBack(customer)  or  (q, customer) -> q.addToFront(customer) .",
            "title": "Functional Interface"
        },
        {
            "location": "/lec8/index.html#lambda-as-closure",
            "text": "Just like a local class an anonymous classes, a lambda can capture the variables of the enclosing scope.  For instance, if you do not wish to generate the service time of a customer at the time of arrival, you can pass in a  Supplier  to  Customer  instead: 1 Customer c = new Customer(() -> -Math.log(rng.nextDouble())/rate);   Here,  rng  and  rate  are variables captured from the enclosing scope.  And just like in local and anonymous classes, a captured variable must be either explicitly declared as  final  or is effectively final.  A lambda expression therefore store more than just the function to invoke -- it also stores the data from the environment where it is defined.  We call such construct which store a function together with the enclosing environments a  closure .",
            "title": "Lambda as Closure"
        },
        {
            "location": "/lec8/index.html#function-as-delayed-data",
            "text": "Consider a function that produces new value or values.  We can consider the function as a promise to give us the given data sometime later, when needed.  For instance: 1 () -> -Math.log(rng.nextDouble())/rate)   is not the value of a service time, but rather, a supplier of the service time.  When we need a service time, we just invoke the supplier.  What's the big deal?  Not so much in the simple example above.  But consider the case where the function is an expensive one.\nWe can then delay the execution of the expensive function until it is absolutely needed.  This allows us to do things that we couldn't before, for instance, create and manipulate an infinite list!",
            "title": "Function as Delayed Data"
        },
        {
            "location": "/lec8/index.html#an-infinite-list",
            "text": "How can we represent an infinite list?  If we store the values of each element in the list, then we will run out of memory pretty soon.  If we try to manipulate every element in the list, then we will enter an infinite loop.    The trick to building an infinite list, is to treat the elements in the list as  delayed data , and store a function that generates the elements, instead of the elements itself.  We can think of an infinite list as two functions, the first is a function that generates the first element, and the second is a function that generates the rest of the list.  1\n2\n3\n4\n5\n6\n7\n8\n9 class   InfiniteList < T >   { \n   private   Supplier < T >   head ; \n   private   Supplier < InfiniteList < T >>   tail ; \n\n   public   static   InfiniteList < T >   generate ( Supplier < T >   supply )   { \n     return   new   InfiniteList ( supply , \n       ()   ->   InfiniteList . generate ( supply )); \n   }  }    There you go!  We now have an infinite list defined by the supply function.    A list defined this way is lazily evaluated.  We won't get the elements until we need it -- this is in constrast to the eager  LambdaList  you write in Lab 6.  Let's see how to use this list.  Consider the  findFirst  method:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 public   T   findFirst ( Predicate < T >   predicate )   { \n   T   first   =   this . head . get (); \n   if   ( predicate . test ( first ))   { \n     return   first ; \n   }  \n   InfiniteList < T >   list   =   this . tail . get (); \n   while   ( true )   { \n     T   next   =   list . head . get (); \n     if   ( predicate . test ( next ))   { \n       return   next ; \n     } \n     list   =   list . tail . get (); \n   }  }     Simpler code  The code shown in the lecture above could be simplified to:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 public   T   findFirst ( Predicate < T >   predicate )   { \n   InfiniteList < T >   list   =   this ; \n   while   ( true )   { \n     T   next   =   list . head . get (); \n     if   ( predicate . test ( next ))   { \n       return   next ; \n     } \n     list   =   list . tail . get (); \n   }  }     In the method above, we repeatedly invoke the supplier, until we find an element that matches the predicate.  This way, we never had to generate every element in the list just to find the first element that matches.   iterate  In class, I also showed the  iterate  method to generate a list: 1\n2\n3\n4\n5\n6    public   static   < T >   InfiniteList < T >   iterate ( T   init ,   Function < T ,   T >   next )   { \n     return   new   InfiniteList < T >( \n         ()   ->   init ,  \n         ()   ->   InfiniteList . iterate ( next . apply ( init ),   next ) \n       ); \n   }",
            "title": "An Infinite List"
        },
        {
            "location": "/lec8/index.html#stream",
            "text": "Such a list, possibly infinite, that is lazily evaluated on demand is also known as a  stream .  Java 8 provides a set of useful and powerful methods on streams, allowing programmers to manipulate data very easily.  Java 9 adds a couple of useful methods,  takeWhile  and  dropWhile , which is also invaluable.  To take full advantage of streams, we will be using Java 9, not Java 8 for the rest of this class.",
            "title": "Stream"
        },
        {
            "location": "/lec8/index.html#stream-operations",
            "text": "A few things to note before I show you how to use streams.  First, the operations on streams can be classified as either  intermediate  or  terminal .  An  intermediate  operation returns another stream.  For instance,  map ,  filter ,  peek  are examples of intermediate operations.  An intermediate operation does not cause the stream to be evaluated.  A terminal operation, on the other hand, force the streams to be evaluated.  It does not return a stream.   reduce ,  findFirst ,  forEach  are examples of terminal operation.  A typical way of writing code that operate on streams is to chain a series of intermediate operation together, ending with a terminal operation.    Second, a stream can only be consumed once.  We cannot iterate through a stream mulitple times.  We have to create the stream again if we want to do that:  1\n2\n3 Stream < Integer >   s   =   Stream . of ( 1 , 2 , 3 );  s . count ();  s . count ();   // <- error    In the example above, we use the  of  static method with variable number of arguments to create a stream.  We can also create a stream by:   converting an array to stream using  Arrays.stream  method  converting a collection to stream using  stream  method  reading from a file using  Files.lines  method  using the  generate  method (provide a  Supplier ) or  interate  method (providing the initial value and incremental operation).    You have seen many of the stream operations before, in Lab 6, including  map ,  reduce ,  filter ,  findFirst ,  peek , and  forEach .  Even though they are in the context of an eagerly evaluated list, the semantics are the same.  Here are a few more useful ones.   flatMap  is just like  map , but it takes in a function that produces another stream (instead of another element), and it  flattens  the stream by inserting the elements from the stream produced into the stream.   Let see an example.  The lambda below takes a string and return a stream of  Integer  objects:  1 x   ->   x . chars (). boxed ()    We can create a stream of strings using the static  of  method from  Stream :  1 Stream . of ( \"live\" ,   \"long\" ,   \"and\" ,   \"prosper\" )    If we chain the two together, using  map , however, we will produce a stream of stream of  Integer .  1\n2 Steam . of ( \"live\" ,   \"long\" ,   \"and\" ,   \"prosper\" ) \n     . map ( x   ->   x . chars (). boxed ())    To produce a stream of  Integer s, we use  flatMap() :  1\n2 Stream . of ( \"live\" ,   \"long\" ,   \"and\" ,   \"prosper\" ) \n     . flatMap ( x   ->   x . chars (). boxed ())      sorted  is an intermediate operation that returns a stream with the elements in the stream sorted.  Without argument, it sorts according to the natural order.  You can also passed in a  Comparator  to tell  sorted  how to sort.    distinct  is another intermediate operation that returns a stream with only distinct elements in the stream.     distinct  and  sorted  are stateful operations -- it needs to keep track of states in order to perform the operation.   sorted  in particular, need to know every elements in the stream before it can output the result.  They are also known as  bounded  operations, since call them on an infinite stream is a very bad idea!  Here is how we print out the unique characters of a given sequence of streams in sorted order 1\n2\n3\n4\n5\n6 Stream . of ( \"live\" ,   \"long\" ,   \"and\" ,   \"prosper\" ) \n     . flatMap ( x   ->   x . chars (). boxed ()) \n     . distinct () \n     . sorted () \n     . map ( x   ->   new   Character (( char ) x . intValue ())) \n     . forEach ( System . out :: print );    There are several intermediate operations that convert from infinite stream to finite stream.     limit  takes in an  int   \\(n\\)  and return a stream containing the first  \\(n\\)  elements of the stream;  takeWhile  takes in a predicate and return a stream containing the elements of the stream, until the predicate becomes false.  The resulting stream might still be infinite if the predicate never becomes false.   Here are more useful terminal operations:   noneMatch  return true if none of the elements pass the given predicate.  allMatch  return true if every element passes the given predicate.  anyMatch  return true if no elements passes the given predicate.",
            "title": "Stream operations"
        },
        {
            "location": "/lec8/index.html#example-1-is-this-a-prime",
            "text": "Consider the method below, which checks if a given  int  is a prime:  1\n2\n3\n4\n5\n6\n7\n8 boolean   isPrime ( int   x )   { \n   for   ( i   =   2 ;   i   <=   x - 1 ;   i ++)   { \n     if   ( x   %   i   ==   0 )   { \n       return   false ; \n     } \n   } \n   return   true ;  }    The code coudln't be simpler -- or can it?  With streams, we can write it as: 1\n2\n3\n4 boolean   isPrime ( int   x )   { \n   return   IntStream . range ( 2 ,   x - 1 ) \n       . matchNone ( x   %   i   ==   0 );  }     Bug  There is a bug in the earlier code where the code showed  IntStream.range(2,x-1) .   range(m,n)  returns a stream from  m  to  n-1 .   IntStream  is a special  Stream  for primitive type  int , the  range  method generates a stream of  int  in a given range (inclusive)  What if we want to print out the first 500 prime numbers, starting from 2?  Normally, we would do the following:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 void   fiveHundredPrime ()   { \n   int   count   =   0 ; \n   int   i   =   2 ; \n   while   ( count   <   500 )   { \n     if   ( isPrime ( i ))   { \n       System . out . println ( i ); \n       count ++; \n     } \n     i ++; \n   }  }    The code is still considered simple, and understandable for many, but I am sure some of us will encounter a bug the first time we write this (either forgot to increment counter, or put the increment in the wrong place).  If you look at the code, there are a couple of compnents:   Lines 3 and 9 deal with iterating through different numbers for primality testing  Line 4 is the test  Lines 2, 4, and 7, deal with limiting the output to 500 primes  Line 5 is the action to perform on the prime   With streams, we can write it like the following: 1\n2\n3\n4 IntStream . iterate ( 2 ,   x   ->   x + 1 ) \n     . filter ( x   ->   isPrime ( x )) \n       . limit ( 500 ) \n       . forEach ( System . out :: println );    Notice how each of the four components matches neatly with one operation on stream!    With stream, we no longer have to write loops -- as you have done in Lab 6, we have move the iterations to within each operation in stream.  We no longer need to maintain states and counters, they are done within each operation as needed as well.  This has another powerful implication: our code become more  declarative , we only need to concern about what we want at each step, much less about how to do it.  You should take a look at the methods provided by the  Stream  class, and read through the APIs, a few times, they formed fundamental building blocks for writing data processing code in functional style in Java.",
            "title": "Example 1: Is this a prime?"
        },
        {
            "location": "/lec8/index.html#example-2-simulators-run",
            "text": "Let's convert our code from our lab into stream.  Consider this:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15    public   void   run ( Simulation   sim )   { \n       schedule ( sim . firstEvents ()); \n       while   (! events . isEmpty ())   { \n         Event   e   =   this . events . poll (); \n         if   ( e . happensBefore ( sim . expireTime ()))   { \n           e . log (); \n           Event []   newEvents   =   sim . handle ( e ); \n           if   ( newEvents   !=   null )   { \n             schedule ( newEvents ); \n           } \n         }   else   { \n           break ; \n         } \n       } \n       System . out . println ( sim . stats );    Again, you can see that the main loop is doing several things at one time: (i) it checks if there is still events in the queue, in Line 3, (ii) it checks if we have reached the end of the simulation in Line 5 and Line 12, (iii) it logs the event for debugging in Line 6, (iv) it runs and generates new events in Line 7, then (v) adds to the events in Lines 8-9.  Let's try to rewrite this using stream.  First, we need to change our event generation to return a stream of events.  Instead of:  1 return new Event[] { event1, event2 };   We can now say:  1 return Stream.of(event1, event2);   which is IMHO cleaner and more readable.  We also get to avoid  null  (which is never a bad thing) by returning  Stream.empty()  instead of  null  if we are not going to generate a new event.  The  schedule  method becomes: 1\n2\n3    public   void   schedule ( Stream < Event >   stream )   { \n     this . events . addAll ( stream . collect ( Collectors . toList ())); \n   }    We will still use  PriorityQueue  for events, and so  addAll  expects a collection.  The  collect  method simply converts a stream to a collection.  With the above changes, we can now rewrite the while loop in  run  using stream: 1\n2\n3\n4\n5\n6      Stream . generate ( this . events :: poll ) \n         . takeWhile ( event   ->   event   !=   null ) \n         . filter ( event   ->   event . happensBefore ( sim . expireTime ()))  \n         . peek ( event   ->   event . log ()) \n         . map ( event   ->   sim . handle ( event )) \n         . forEach ( eventStream   ->   this . schedule ( eventStream ));    Once you get used to writing code with streams, it might be hard to go back to writing loops and bracnhes again!",
            "title": "Example 2: Simulator's run"
        },
        {
            "location": "/lec9/index.html",
            "text": "Lecture 9: Functors, Monads, Collectors\n\n\nLearning Objectives\n\n\nAfter this lecture, students should:\n\n\n\n\nUnderstand what is a functor and monad in the context of Java's \nStream\n, \nOptional\n\n\nUnderstand the laws that a functor and monad must obey and be able to verify them.\n\n\nBe familiar with the \ncollect\n method of \nStream\n, the \nCollector\n interface, and the \nCollectors\n classes\n\n\nBe able to write their own simple \nCollectors\n.\n\n\n\n\nFunctor\n\n\nIn this lecture, we are going to abstract out some useful patterns that we have seen so far in functional-style programming in Java, and relates it to concepts in functional programming.\n\nOnce you see and understand the patterns, hopefully you can reapply the patterns in other context!\n\n\nLet's start with a simplest one, called \nfunctor\n.  This funny name originated from a branch of mathematics, called category theory.  We can think of a functor as something that takes in a function and returns another functor.  If you like, you can think of it as something that implements an interface that looks like:\n\n\n1\n2\n3\ninterface\n \nFunctor\n<\nT\n>\n \n{\n\n  \npublic\n \n<\nR\n>\n \nFunctor\n<\nR\n>\n \nf\n(\nFunction\n<\nT\n,\nR\n>\n \nfunc\n);\n\n\n}\n\n\n\n\n\n\n\nWait, that's a recursive definition, and doesn't really explain what is a functor?  In OO-speak, a functor can be any class that implements the interface above (or matches the pattern above).\n\n\nSo, is this a functor?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nA\n \n{\n\n  \nprivate\n \nint\n \nx\n;\n\n\n  \npublic\n \nA\n(\nint\n \ni\n)\n \n{\n\n    \nthis\n.\nx\n \n=\n \ni\n;\n\n  \n}\n\n\n  \npublic\n \nA\n \nf\n(\nFunction\n<\nInteger\n,\nInteger\n>\n \nfunc\n)\n \n{\n\n    \nif\n \n(\nthis\n.\nx\n \n>\n \n0\n)\n \n{\n\n      \nreturn\n \nnew\n \nA\n(\nfunc\n.\napply\n(\nx\n));\n\n    \n}\n \nelse\n \n{\n\n      \nreturn\n \nnew\n \nA\n(\n0\n);\n\n    \n}\n\n  \n}\n\n\n  \npublic\n \nboolean\n \nisSameAs\n(\nA\n \na\n)\n \n{\n\n    \nreturn\n \nthis\n.\nx\n \n==\n \na\n.\nx\n;\n \n  \n}\n\n\n}\n\n\n\n\n\n\n\nThe class \nA\n above takes in a function and returns another \nA\n with \nfunc\n applied on the content \nx\n, if \nx\n is positive.  Otherwise, it returns another \nA\n with 0.  \n\n\nDespite that it does not implement the interface \nFunctor\n1\n, it does match the pattern of having a method that takes in a function and returns itself, it is a special case since both \nR\n and \nT\n are \nInteger\n.\n\n\nMatching the patterns syntactically, however, is not enough to be a functor.  A functor have to semantically obey the functor laws, which are:\n\n\n\n\nif \nfunc\n is an identity function \nx -> x\n, then it should not change the functor.\n\n\nif \nfunc\n is a composition of two functions \n\\(g \\cdot h\\)\n, then the resulting functor should be the same as calling \nf\n with \n\\(h\\)\n and then with \n\\(g\\)\n.\n\n\n\n\nLet's check: \n\n1\n2\n3\nA a = new A(-1);\na.isSameAs(a.f(x -> x));\na.f(x -> x + 1).g(x -> x * 2).isSameAs(a.f(x -> (x + 1) * 2);\n\n\n\n\n\nNope.  Our class \nA\n violates the first functor law and therefore does not qualify to be a functor.  A simpler version, without all the weird stuff going on in \nf\n, is, however, a valid functor.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nB\n \n{\n\n  \nprivate\n \nint\n \nx\n;\n\n\n  \npublic\n \nB\n(\nint\n \ni\n)\n \n{\n\n    \nthis\n.\nx\n \n=\n \ni\n;\n\n  \n}\n\n\n  \npublic\n \nB\n \nf\n(\nFunction\n<\nInteger\n,\nInteger\n>\n \nfunc\n)\n \n{\n\n    \nreturn\n \nnew\n \nB\n(\nfunc\n.\napply\n(\nx\n));\n\n  \n}\n\n\n  \npublic\n \nboolean\n \nisSameAs\n(\nB\n \na\n)\n \n{\n\n    \nreturn\n \nthis\n.\nx\n \n==\n \na\n.\nx\n;\n \n  \n}\n\n\n}\n\n\n\n\n\n\n\nIt is easy to see that if \nfunc\n is \nx -> x\n, then \nB(func.apply(x)\n is just \nB(x)\n.  Further, \nif \nfunc\n is \ng.compose(h)\n, then calling \nfunc.apply(x)\n is the same as \ng.apply(h.apply(x))\n.\n\n\nAnother way to think of a functor, in the OO-way, is that that it is a variable wrapped within a class in some context.  Instead of manipulating the variable directly, we pass in a function to the class to manipulate the variable.  The variable must then interact with the function as if it is not be wrapped.  The class should not interfere with the function (as in the class \nA\n).\n\n\nYou have actually seen several functors before.  You might recognize by now that \nfunc\n is just our old friend \nmap\n!  A \nLambdaList\n is just a functor with a list of variables stored in an array list.  A \nStream\n is another functor.  So is \nInfiniteList\n.\n\n\nOnce you understand the laws of functor and recognize this pattern, it is easy to learn about new classes -- one just have to tell you that it is a functor, and you will know how the class should behave.\n\n\n\n\nFunctors in other languages\n\n\nHaskell, Scala, Python, Javascript, and other functional languages have functors as well.  C++, unfortunately, uses the term functors to mean function object -- a function object is not a functor in the sense of the word in category theory.  So, do not get confused between the two.\n\n\n\n\nOptional\n\n\nLet's see another functor in Java 8: the \nOptional\n class.  Recall that you can wrapped a possibly \nnull\n object in an \nOptional\n class.  It is unfortunate that Java 8 provides a \nget()\n method to allow retrieval of the object inside -- it is convenient but that defeats the point of \nOptional\n -- not to mentioned that Java Collections Framework does not support \nOptional\n.  But, since Java's \nOptional\n is a functor, we can manipulate the value\n2\n wrapped in an \nOptional\n with the \nmap\n function, without having to \nget()\n and put back again!\n\n\nLet's consider the \nSimulator\n again.  In a better version of Java, we would have a \nPriorityQueue<T>\n with a \npoll\n method that returns \nOptional<T>\n, instead of either an object of type \nT\n or \nnull\n.  Let's pretend that we have a different \npoll\n, called \noptionalPoll\n that does that.  Now, we can process the event returned (maybe?) in the following way:\n\n\n1\n2\n3\n4\nevents\n.\noptionalPoll\n()\n\n    \n.\nfilter\n(\nevent\n \n->\n \nevent\n.\nhappensBefore\n(\nsim\n.\nexpireTime\n()))\n\n    \n.\nmap\n(\nevent\n \n->\n \nsim\n.\nhandle\n(\nevent\n))\n\n    \n.\nifPresent\n(\neventStream\n \n->\n \nthis\n.\nschedule\n(\neventStream\n));\n\n\n\n\n\n\n\nThis beats writing code that looks like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nEvent\n \nevent\n \n=\n \nevents\n.\npoll\n();\n\n\nif\n \n(\nevent\n \n!=\n \nnull\n)\n \n{\n\n  \nif\n \n(\nevent\n.\nhappensBefore\n(\nsim\n.\nexpireTire\n()))\n \n{\n\n    \nStream\n<\nEvent\n>\n \neventStream\n \n=\n \nsim\n.\nhandle\n(\nevent\n);\n \n    \nif\n \n(\neventStream\n \n!=\n \nnull\n)\n \n{\n\n      \nthis\n.\nschedule\n(\neventStream\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nOptional\n helps us check for \nnull\n and takes care of the \"maybe?\" for us.  In \nmap\n, if \nevent\n is \nnull\n, it does nothing, otherwise it invokes \nsim.handle\n and returns \nan \nOptional<Steam<Event>>\n.\n\n\n\n\nIn other languages\n\n\nScale has \nOption\n; Haskell has \nMaybe\n. If you use Python, check out the \nPyMonad\n library that supplies various functors and monad, including \nMaybe\n.\n\n\n\n\nMonad\n\n\nMonad\n is another funny name originated from category theory.  A monad also takes in a function and returns a monad.  But, unlike functor, it takes in a function that returns a monad!\n\n\n1\n2\n3\ninterface\n \nMonad\n<\nT\n>\n \n{\n\n  \npublic\n \n<\nR\n>\n \nMonad\n<\nR\n>\n \nf\n(\nFunction\n<\nT\n,\nMonad\n<\nR\n>>\n \nfunc\n);\n\n\n}\n\n\n\n\n\n\n\nLooks complicated?  How about now:\n\n1\n2\n3\ninterface\n \nStream\n<\nT\n>\n \n{\n\n  \npublic\n \n<\nR\n>\n \nStream\n<\nR\n>\n \nflatMap\n(\nFunction\n<\nT\n,\nStream\n<\nR\n>>\n \nmapper\n);\n\n\n}\n\n\n\n\n\n\nThis interface should look familiar to you\n3\n.  We have seen monads before!  A Stream is a monad.  In contrast, unless you implemented \nflatMap\n for \nInfiniteList\n or \nLambdaList\n, they are not monads.\n\n\nJust like functors, there are some laws that a monad have to follow:\n\n\n\n\n\n\nthere should be an \nof\n operation that takes an object (or multiple objects) and wrap it/them into a monad.  Further, \n\n\n\n\nMonad.of(x).flatMap(f)\n should be equal to \nf(x)\n  (called the \nleft identity\n law)\n\n\nmonad.flatMap(x -> Monad.of(x))\n should be equal to \nmonad\n (called the \nright identity\n law)\n\n\n\n\n\n\n\n\nthe \nflatMap\n operation should be associative (associative law):\n\nmonad.flatMap(f).flatMap(g)\n should be equal to \nmonad.flatMap(x -> f(x).flatMap(g))\n\n\n\n\n\n\n\n\nIn other languages\n\n\nThe \nflatMap\n and \nof\n operations are sometimes known as the \nbind\n and \nunit\n operations respectively (e.g., in Haskell).\n\n\n\n\nKnowing what is a monad is useful, since if I tell you something is a monad, you should recognize that it supports a given interface.  For instance, I tell you that \nOptional\n is a monad.  You should know that \nOptional\n supports the \nof\n and \nflatMap\n operation (maybe of a different name, but they exists and follows the monad laws).\n\n\nWe won't proof formally that \nOptional\n follows the laws of monad in this class, but let's explore a bit more to convince ourselves that it does.  Let's write the \nflatMap\n method for \nOptional\n, which is not that difficult:\n\n\n1\n2\n3\n4\n5\n6\n7\npublic\n<\nU\n>\n \nOptional\n<\nU\n>\n \nflatMap\n(\nFunction\n<?\n \nsuper\n \nT\n,\n \nOptional\n<\nU\n>>\n \nmapper\n)\n \n{\n\n  \nif\n \n(!\nisPresent\n())\n \n{\n\n    \nreturn\n \nempty\n();\n\n  \n}\n \nelse\n \n{\n\n    \nreturn\n \nmapper\n.\napply\n(\nvalue\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nLet check:\n\n\n\n\nLeft identity law: \nOptional.of(1).flatMap(f)\n will return \nf.apply(1)\n (i.e., \n\\(f(1)\\)\n).\n\n\nRight identity law: \nopt.flatMap(x -> Optional.of(x)\n will apply \nx -> Optional.of(x)\n on the value of \nopt\n, if it exists, resulting in \nOptional.of(value)\n, which is \nopt\n. If the value does not exist (\nOptional\n is empty), then \nflatMap\n will not apply the lambda, instead it will return \nempty()\n right away.  So it obeys the law.\n\n\nAssociative law: \nopt.flatMap(f).flatMap(g)\n is the same as \nf.apply(value).flatMap(g)\n; \nopt.flatMap(x -> f(x).flatMap(g))\n will apply the lambda to \nvalue\n, so we get \nf.apply(x).flatMap(g)\n.  They are the same.  If \nopt\n is empty, then \nflatMap\n returns \nempty\n for both cases.\n\n\n\n\nSo, despite the complicated-sounding laws, they are actually easy to obey!\n\n\nCollectors\n\n\nGoing back to streams now.  We previously have seen several terminal operations of streams which are useful and general, such as \nreduce\n and \nforEach\n.  Java 8, however, provide something more powerful called \ncollect\n, which you can think of as \nreduce\n on steroids!  You have seen this used to convert a stream into a \nList\n collection using \n.collect\n(\nCollectors.toList\n())\n.  Here are a few, self-explanatory examples using \ncollect\n and predefined \nCollector\n.\n\n\n1\nMap\n<\nServer\n,\n \nList\n<\nCustomer\n>>\n \nbyServer\n \n=\n \ncustomers\n.\nstream\n().\ncollect\n(\nCollectors\n.\ngroupingBy\n(\nc\n \n->\n \nc\n.\nservedBy\n());\n \n\n\n\n\n\n\nThe code above put the list of customers into a map collection, with server as the key. We can further find out all customers that ever been served by a given server.\n\n\n1\nMap\n<\nBoolean\n,\n \nList\n<\nCustomer\n>>\n \nbyServiceTime\n \n=\n \ncustomer\n.\nstream\n().\ncollection\n(\nCollectors\n.\npartitionBy\n(\nc\n \n->\n \nc\n.\ngetServiceTime\n()\n \n<\n \n1\n));\n\n\n\n\n\n\n\nThe code above partition the customer into two, those that require less than 1 unit time of service that those that require more.\n\n\nAnd how about this one that computes the average waiting time:\n\n\n1\ndouble\n \navgWaitingTime\n \n=\n \ncustomer\n.\nstream\n().\ncollection\n(\nCollectors\n.\naveragingDouble\n(\nc\n \n->\n \nc\n.\ngetWaitingTime\n()));\n\n\n\n\n\n\n\nYou can take a look at the list of predefined \nCollectors\n in Java documentation to see what is available.\n\n\nThe Collector Interface\n\n\nLet's delve deeper and try to understand what exactly is a \nCollector\n?  A \nCollector\n is defined as follows:\n\n\n1\n2\n3\n4\n5\n6\n7\ninterface\n \nCollector\n<\nT\n,\n \nA\n,\n \nR\n>\n \n{\n\n  \nBiConsumer\n<\nA\n,\n \nT\n>\n \naccumulator\n();\n\n  \nBinaryOperator\n<\nA\n>\n \ncombiner\n();\n\n  \nFunction\n<\nA\n,\n \nR\n>\n \nfinisher\n();\n\n  \nSupplier\n<\nA\n>\n \nsupplier\n();\n\n   \n:\n\n\n}\n\n\n\n\n\n\n\nIt is helpful to understand the type first:\n\n\n\n\nT\n is the type of the elements we are collecting\n\n\nR\n is the type of the result of the collection\n\n\nA\n is the type of the partial result from the accumulator (ala reduction)\n\n\n\n\nEach of these methods shown above in the \nCollector\n is returning a function that will be invoked by the \ncollect\n method.  Except combiner, the other three methods are rather straightforward: the \nsupplier\n supplies a \"container\" of type \nA\n for the \naccumulator\n to accumulate into, and finally the \nfinisher\n converts the container into the result of type \nR\n.\n\n\nLet's see the \nCollector\n in action by rewriting the \nCollectors.toList()\n constructor:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nListCollector\n \nimplement\n \nCollector\n<\nT\n,\n \nList\n<\nT\n>,\n \nList\n<\nT\n>>\n \n{\n\n  \nSupplier\n<\nList\n<\nT\n>>\n \nsupplier\n()\n \n{\n\n    \nreturn\n \n()\n \n->\n \nnew\n \nArrayList\n<\nT\n>();\n\n  \n}\n\n\n  \nBiConsumer\n<\nList\n<\nT\n>,\n \nT\n>\n \naccumulator\n()\n \n{\n\n    \nreturn\n \n(\nlist\n,\n \nitem\n)\n \n->\n \nlist\n.\nadd\n(\nitem\n);\n\n  \n}\n\n\n  \nFunction\n<\nList\n<\nT\n>,\nList\n<\nT\n>>\n \nfinisher\n()\n \n{\n\n    \nreturn\n \nFunction\n.\nidentity\n();\n\n  \n}\n\n\n   \n:\n\n\n}\n\n\n\n\n\n\n\nNow, let's discuss what \ncombiner\n does.  A \ncombiner\n is actually required by the \nStream\n \nreduce\n method as well:\n\n\n1\n<\nU\n>\n \nU\n \nreduce\n(\nU\n \nidentity\n,\n \nBiFunction\n<\nU\n,?\n \nsuper\n \nT\n,\nU\n>\n \naccumulator\n,\n \nBinaryOperator\n<\nU\n>\n \ncombiner\n)\n\n\n\n\n\n\n\nBut, in our \nLambdaList\n and \nInfiniteList\n, we have not been using a \ncombiner\n.\n\n\nA \ncombiner\n is useful in the context of parallel processing -- which we will cover more in the coming lectures.  The short version of it is that, a stream can be broken up into substreams and process independently (e.g., reduced or collected independently).  After these independent processing, we will need to combined their results back together.  This is where combiner comes in -- it specifies how to combined partial results back into first result.\n\n\nLet's see two examples: In the case of our \nListCollector\n, we will get one \nList<T>\n each from each substream after collection.  We just need to combine both into the first list:\n\n\n1\n2\n3\n4\n5\n6\n  \nBinaryOperator\n<\nList\n<\nT\n>>\n \ncombiner\n()\n \n{\n\n    \n(\nlist1\n,\n \nlist2\n)\n \n->\n \n{\n\n      \nlist1\n.\naddAll\n(\nlist2\n);\n\n      \nreturn\n \nlist1\n;\n\n    \n}\n\n  \n}\n\n\n\n\n\n\n\nIn the case of reducing a stream, suppose we want to find the product of all numbers:\n\n1\nStream\n.\nof\n(\n1\n,\n2\n,\n3\n,\n4\n).\nreduce\n(\n1\n,\n \n(\nx\n,\ny\n)->\nx\n*\ny\n,\n \n(\nx\n,\ny\n)->\nx\n*\ny\n);\n\n\n\n\n\n\nWe include the lambda \n(x,y)->x*y\n twice, the second one is a \ncombiner\n that combines two partial product into one, by multiplying them.  Here is one that count the number of elements:\n\n1\nStream\n.\nof\n(\n1\n,\n2\n,\n3\n,\n4\n).\nreduce\n(\n0\n,\n \n(\nx\n,\ny\n)->\nx\n+\n1\n,\n \n(\nx\n,\ny\n)->\nx\n+\ny\n);\n\n\n\n\n\n\nTo combine two partial counter, we add them with \n(x,y)->x+y\n.\n\n\nAnother way we can create a customized collector is to pass lambdas into \ncollect\n method of \nStream\n directly.\n\n\n1\n2\n3\ns\n.\ncollect\n(()->\nnew\n \nLinkedList\n<\nInteger\n>(),\n \n    \n(\nl\n,\ni\n)->\nl\n.\nadd\n(\ni\n),\n \n    \n(\nl1\n,\n \nl2\n)\n \n->\n \nl1\n.\naddAll\n(\nl2\n));\n\n\n\n\n\n\n\nThe \ncollect\n method takes in a \nSupplier<R>\n supplier, \nBiConsumer<R,T>\n accumulator, and a \nBiConsumer<R,R>\n combiner.  Note that \ncombiner\n here is a \nBiConsumer\n which expects the results to be combined into the first argument, and is different from the the combiner of \nCollector\n interface, which is a \nBiOperator\n.  Further, there is no finisher so we can't specify anything that requires a more complex finisher (example, an averaging collector).\n\n\n\n\n\n\n\n\n\n\nIn fact, no functors in Java 8 does, since this is the interface I created just to explain the pattern of a functor.\u00a0\n\u21a9\n\n\n\n\n\n\nTo be more precise, create a new \nOptional\n with the manipulated value.  \u00a0\n\u21a9\n\n\n\n\n\n\nJust a reminder again that these are not real interfaces in Java but just something to show you the types of input/output to a monad in a language that you are familiar with.\u00a0\n\u21a9",
            "title": "9. Functors, Monads, Collectors"
        },
        {
            "location": "/lec9/index.html#lecture-9-functors-monads-collectors",
            "text": "",
            "title": "Lecture 9: Functors, Monads, Collectors"
        },
        {
            "location": "/lec9/index.html#learning-objectives",
            "text": "After this lecture, students should:   Understand what is a functor and monad in the context of Java's  Stream ,  Optional  Understand the laws that a functor and monad must obey and be able to verify them.  Be familiar with the  collect  method of  Stream , the  Collector  interface, and the  Collectors  classes  Be able to write their own simple  Collectors .",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec9/index.html#functor",
            "text": "In this lecture, we are going to abstract out some useful patterns that we have seen so far in functional-style programming in Java, and relates it to concepts in functional programming. \nOnce you see and understand the patterns, hopefully you can reapply the patterns in other context!  Let's start with a simplest one, called  functor .  This funny name originated from a branch of mathematics, called category theory.  We can think of a functor as something that takes in a function and returns another functor.  If you like, you can think of it as something that implements an interface that looks like:  1\n2\n3 interface   Functor < T >   { \n   public   < R >   Functor < R >   f ( Function < T , R >   func );  }    Wait, that's a recursive definition, and doesn't really explain what is a functor?  In OO-speak, a functor can be any class that implements the interface above (or matches the pattern above).  So, is this a functor?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   A   { \n   private   int   x ; \n\n   public   A ( int   i )   { \n     this . x   =   i ; \n   } \n\n   public   A   f ( Function < Integer , Integer >   func )   { \n     if   ( this . x   >   0 )   { \n       return   new   A ( func . apply ( x )); \n     }   else   { \n       return   new   A ( 0 ); \n     } \n   } \n\n   public   boolean   isSameAs ( A   a )   { \n     return   this . x   ==   a . x ;  \n   }  }    The class  A  above takes in a function and returns another  A  with  func  applied on the content  x , if  x  is positive.  Otherwise, it returns another  A  with 0.    Despite that it does not implement the interface  Functor 1 , it does match the pattern of having a method that takes in a function and returns itself, it is a special case since both  R  and  T  are  Integer .  Matching the patterns syntactically, however, is not enough to be a functor.  A functor have to semantically obey the functor laws, which are:   if  func  is an identity function  x -> x , then it should not change the functor.  if  func  is a composition of two functions  \\(g \\cdot h\\) , then the resulting functor should be the same as calling  f  with  \\(h\\)  and then with  \\(g\\) .   Let's check:  1\n2\n3 A a = new A(-1);\na.isSameAs(a.f(x -> x));\na.f(x -> x + 1).g(x -> x * 2).isSameAs(a.f(x -> (x + 1) * 2);   Nope.  Our class  A  violates the first functor law and therefore does not qualify to be a functor.  A simpler version, without all the weird stuff going on in  f , is, however, a valid functor.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   B   { \n   private   int   x ; \n\n   public   B ( int   i )   { \n     this . x   =   i ; \n   } \n\n   public   B   f ( Function < Integer , Integer >   func )   { \n     return   new   B ( func . apply ( x )); \n   } \n\n   public   boolean   isSameAs ( B   a )   { \n     return   this . x   ==   a . x ;  \n   }  }    It is easy to see that if  func  is  x -> x , then  B(func.apply(x)  is just  B(x) .  Further, \nif  func  is  g.compose(h) , then calling  func.apply(x)  is the same as  g.apply(h.apply(x)) .  Another way to think of a functor, in the OO-way, is that that it is a variable wrapped within a class in some context.  Instead of manipulating the variable directly, we pass in a function to the class to manipulate the variable.  The variable must then interact with the function as if it is not be wrapped.  The class should not interfere with the function (as in the class  A ).  You have actually seen several functors before.  You might recognize by now that  func  is just our old friend  map !  A  LambdaList  is just a functor with a list of variables stored in an array list.  A  Stream  is another functor.  So is  InfiniteList .  Once you understand the laws of functor and recognize this pattern, it is easy to learn about new classes -- one just have to tell you that it is a functor, and you will know how the class should behave.   Functors in other languages  Haskell, Scala, Python, Javascript, and other functional languages have functors as well.  C++, unfortunately, uses the term functors to mean function object -- a function object is not a functor in the sense of the word in category theory.  So, do not get confused between the two.",
            "title": "Functor"
        },
        {
            "location": "/lec9/index.html#optional",
            "text": "Let's see another functor in Java 8: the  Optional  class.  Recall that you can wrapped a possibly  null  object in an  Optional  class.  It is unfortunate that Java 8 provides a  get()  method to allow retrieval of the object inside -- it is convenient but that defeats the point of  Optional  -- not to mentioned that Java Collections Framework does not support  Optional .  But, since Java's  Optional  is a functor, we can manipulate the value 2  wrapped in an  Optional  with the  map  function, without having to  get()  and put back again!  Let's consider the  Simulator  again.  In a better version of Java, we would have a  PriorityQueue<T>  with a  poll  method that returns  Optional<T> , instead of either an object of type  T  or  null .  Let's pretend that we have a different  poll , called  optionalPoll  that does that.  Now, we can process the event returned (maybe?) in the following way:  1\n2\n3\n4 events . optionalPoll () \n     . filter ( event   ->   event . happensBefore ( sim . expireTime ())) \n     . map ( event   ->   sim . handle ( event )) \n     . ifPresent ( eventStream   ->   this . schedule ( eventStream ));    This beats writing code that looks like this:  1\n2\n3\n4\n5\n6\n7\n8\n9 Event   event   =   events . poll ();  if   ( event   !=   null )   { \n   if   ( event . happensBefore ( sim . expireTire ()))   { \n     Stream < Event >   eventStream   =   sim . handle ( event );  \n     if   ( eventStream   !=   null )   { \n       this . schedule ( eventStream ); \n     } \n   }  }    Optional  helps us check for  null  and takes care of the \"maybe?\" for us.  In  map , if  event  is  null , it does nothing, otherwise it invokes  sim.handle  and returns \nan  Optional<Steam<Event>> .   In other languages  Scale has  Option ; Haskell has  Maybe . If you use Python, check out the  PyMonad  library that supplies various functors and monad, including  Maybe .",
            "title": "Optional"
        },
        {
            "location": "/lec9/index.html#monad",
            "text": "Monad  is another funny name originated from category theory.  A monad also takes in a function and returns a monad.  But, unlike functor, it takes in a function that returns a monad!  1\n2\n3 interface   Monad < T >   { \n   public   < R >   Monad < R >   f ( Function < T , Monad < R >>   func );  }    Looks complicated?  How about now: 1\n2\n3 interface   Stream < T >   { \n   public   < R >   Stream < R >   flatMap ( Function < T , Stream < R >>   mapper );  }    This interface should look familiar to you 3 .  We have seen monads before!  A Stream is a monad.  In contrast, unless you implemented  flatMap  for  InfiniteList  or  LambdaList , they are not monads.  Just like functors, there are some laws that a monad have to follow:    there should be an  of  operation that takes an object (or multiple objects) and wrap it/them into a monad.  Further,    Monad.of(x).flatMap(f)  should be equal to  f(x)   (called the  left identity  law)  monad.flatMap(x -> Monad.of(x))  should be equal to  monad  (called the  right identity  law)     the  flatMap  operation should be associative (associative law): monad.flatMap(f).flatMap(g)  should be equal to  monad.flatMap(x -> f(x).flatMap(g))     In other languages  The  flatMap  and  of  operations are sometimes known as the  bind  and  unit  operations respectively (e.g., in Haskell).   Knowing what is a monad is useful, since if I tell you something is a monad, you should recognize that it supports a given interface.  For instance, I tell you that  Optional  is a monad.  You should know that  Optional  supports the  of  and  flatMap  operation (maybe of a different name, but they exists and follows the monad laws).  We won't proof formally that  Optional  follows the laws of monad in this class, but let's explore a bit more to convince ourselves that it does.  Let's write the  flatMap  method for  Optional , which is not that difficult:  1\n2\n3\n4\n5\n6\n7 public < U >   Optional < U >   flatMap ( Function <?   super   T ,   Optional < U >>   mapper )   { \n   if   (! isPresent ())   { \n     return   empty (); \n   }   else   { \n     return   mapper . apply ( value ); \n   }  }    Let check:   Left identity law:  Optional.of(1).flatMap(f)  will return  f.apply(1)  (i.e.,  \\(f(1)\\) ).  Right identity law:  opt.flatMap(x -> Optional.of(x)  will apply  x -> Optional.of(x)  on the value of  opt , if it exists, resulting in  Optional.of(value) , which is  opt . If the value does not exist ( Optional  is empty), then  flatMap  will not apply the lambda, instead it will return  empty()  right away.  So it obeys the law.  Associative law:  opt.flatMap(f).flatMap(g)  is the same as  f.apply(value).flatMap(g) ;  opt.flatMap(x -> f(x).flatMap(g))  will apply the lambda to  value , so we get  f.apply(x).flatMap(g) .  They are the same.  If  opt  is empty, then  flatMap  returns  empty  for both cases.   So, despite the complicated-sounding laws, they are actually easy to obey!",
            "title": "Monad"
        },
        {
            "location": "/lec9/index.html#collectors",
            "text": "Going back to streams now.  We previously have seen several terminal operations of streams which are useful and general, such as  reduce  and  forEach .  Java 8, however, provide something more powerful called  collect , which you can think of as  reduce  on steroids!  You have seen this used to convert a stream into a  List  collection using  .collect ( Collectors.toList ()) .  Here are a few, self-explanatory examples using  collect  and predefined  Collector .  1 Map < Server ,   List < Customer >>   byServer   =   customers . stream (). collect ( Collectors . groupingBy ( c   ->   c . servedBy ());     The code above put the list of customers into a map collection, with server as the key. We can further find out all customers that ever been served by a given server.  1 Map < Boolean ,   List < Customer >>   byServiceTime   =   customer . stream (). collection ( Collectors . partitionBy ( c   ->   c . getServiceTime ()   <   1 ));    The code above partition the customer into two, those that require less than 1 unit time of service that those that require more.  And how about this one that computes the average waiting time:  1 double   avgWaitingTime   =   customer . stream (). collection ( Collectors . averagingDouble ( c   ->   c . getWaitingTime ()));    You can take a look at the list of predefined  Collectors  in Java documentation to see what is available.",
            "title": "Collectors"
        },
        {
            "location": "/lec9/index.html#the-collector-interface",
            "text": "Let's delve deeper and try to understand what exactly is a  Collector ?  A  Collector  is defined as follows:  1\n2\n3\n4\n5\n6\n7 interface   Collector < T ,   A ,   R >   { \n   BiConsumer < A ,   T >   accumulator (); \n   BinaryOperator < A >   combiner (); \n   Function < A ,   R >   finisher (); \n   Supplier < A >   supplier (); \n    :  }    It is helpful to understand the type first:   T  is the type of the elements we are collecting  R  is the type of the result of the collection  A  is the type of the partial result from the accumulator (ala reduction)   Each of these methods shown above in the  Collector  is returning a function that will be invoked by the  collect  method.  Except combiner, the other three methods are rather straightforward: the  supplier  supplies a \"container\" of type  A  for the  accumulator  to accumulate into, and finally the  finisher  converts the container into the result of type  R .  Let's see the  Collector  in action by rewriting the  Collectors.toList()  constructor:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   ListCollector   implement   Collector < T ,   List < T >,   List < T >>   { \n   Supplier < List < T >>   supplier ()   { \n     return   ()   ->   new   ArrayList < T >(); \n   } \n\n   BiConsumer < List < T >,   T >   accumulator ()   { \n     return   ( list ,   item )   ->   list . add ( item ); \n   } \n\n   Function < List < T >, List < T >>   finisher ()   { \n     return   Function . identity (); \n   } \n\n    :  }    Now, let's discuss what  combiner  does.  A  combiner  is actually required by the  Stream   reduce  method as well:  1 < U >   U   reduce ( U   identity ,   BiFunction < U ,?   super   T , U >   accumulator ,   BinaryOperator < U >   combiner )    But, in our  LambdaList  and  InfiniteList , we have not been using a  combiner .  A  combiner  is useful in the context of parallel processing -- which we will cover more in the coming lectures.  The short version of it is that, a stream can be broken up into substreams and process independently (e.g., reduced or collected independently).  After these independent processing, we will need to combined their results back together.  This is where combiner comes in -- it specifies how to combined partial results back into first result.  Let's see two examples: In the case of our  ListCollector , we will get one  List<T>  each from each substream after collection.  We just need to combine both into the first list:  1\n2\n3\n4\n5\n6    BinaryOperator < List < T >>   combiner ()   { \n     ( list1 ,   list2 )   ->   { \n       list1 . addAll ( list2 ); \n       return   list1 ; \n     } \n   }    In the case of reducing a stream, suppose we want to find the product of all numbers: 1 Stream . of ( 1 , 2 , 3 , 4 ). reduce ( 1 ,   ( x , y )-> x * y ,   ( x , y )-> x * y );    We include the lambda  (x,y)->x*y  twice, the second one is a  combiner  that combines two partial product into one, by multiplying them.  Here is one that count the number of elements: 1 Stream . of ( 1 , 2 , 3 , 4 ). reduce ( 0 ,   ( x , y )-> x + 1 ,   ( x , y )-> x + y );    To combine two partial counter, we add them with  (x,y)->x+y .  Another way we can create a customized collector is to pass lambdas into  collect  method of  Stream  directly.  1\n2\n3 s . collect (()-> new   LinkedList < Integer >(),  \n     ( l , i )-> l . add ( i ),  \n     ( l1 ,   l2 )   ->   l1 . addAll ( l2 ));    The  collect  method takes in a  Supplier<R>  supplier,  BiConsumer<R,T>  accumulator, and a  BiConsumer<R,R>  combiner.  Note that  combiner  here is a  BiConsumer  which expects the results to be combined into the first argument, and is different from the the combiner of  Collector  interface, which is a  BiOperator .  Further, there is no finisher so we can't specify anything that requires a more complex finisher (example, an averaging collector).      In fact, no functors in Java 8 does, since this is the interface I created just to explain the pattern of a functor.\u00a0 \u21a9    To be more precise, create a new  Optional  with the manipulated value.  \u00a0 \u21a9    Just a reminder again that these are not real interfaces in Java but just something to show you the types of input/output to a monad in a language that you are familiar with.\u00a0 \u21a9",
            "title": "The Collector Interface"
        },
        {
            "location": "/lec10/index.html",
            "text": "Lecture 10: Parallel Streams\n\n\nLearning Objectives\n\n\nAfter attending this lecture, students should:\n\n\n\n\nbe aware that a program can be broken into subtasks to run parallelly and/or concurrently \n\n\nbe aware of the issues caused by running the subtasks parallelly and concurrently.\n\n\nbe aware of that there exist tradeoffs in the number of subtasks and the processing overhead.\n\n\nbe familiar with how to process a stream parallelly and correctly.\n\n\nbe familiar with the Java's fork/join framework. \n\n\n\n\nParallel and Concurrent Programming\n\n\nSo far, the programs that we have written in CS2030 run \nsequentially\n.  What this means is that at any one time, there is only one instruction of the program running on a processor.  \n\n\nWhat is concurrency?\n\n\nA single core processor can only execute one instruction at one time -- this means that only one \nprocess\n  (or less precisely speaking, one application) can run at any one time.  Yet, when we use the computer, it \nfeels\n as if we are running multiple processes at the same time.  The operating system, behind the scene, is actually switching between the different processes, to give the user an illusion that they are running at the same time.\n\n\nWe can write a program so that it runs concurrently -- by dividing the computation into subtasks called \nthreads\n.  The operating system, behind the scene, can switch between the different threads, to give the user an illusion that the threads are running at the same time.  Such multi-threads programs are useful in two ways: (i) it allows us, the programmers, to separate the unrelated tasks into threads, and write each thread separately; (ii) it improves the utilization of the processor.  For instance, if I/O is in one thread, and UI rendering is in another, then when the processor is waiting for I/O to complete, it can switch to the rendering thread to make sure that the slow I/O does not affect the responsiveness of UI.\n\n\nWhat is parallelism?\n\n\nWhile concurrency gives the illusion of subtasks running at the same time, parallel computing refers to the scenario where multiple subtasks are truly running at the same time -- either we have a processor that is capable of running multiple instructions at the same time, or we have multiple cores / processors and dispatch the instructions to the cores / processors so that they are executed at the same time.\n\n\nAll parallel programs are concurrent, but not all concurrent programs are parallel.\n\n\nModern computers have more than one cores / processors\n1\n.\nAs such, the line between parallelism and concurrency is blurred.  \n\n\nParallel computing\n\n\nParallel computing is one of the major topics in computer science.  One can teach a whole module (or a focus area) on this topic alone.  The goal of this lecture is not to cover it in depth, but is to expose students in CS2030 to the concept of parallel computing in relation to the stream abstraction in Java 8.\n\n\nParallel Stream\n\n\nWe have seen that Java \nStream\n class is a powerful and useful class for processing data in declarative style.  But, we have not fully unleash the power of \nStream\n.  The neatest thing about \nStream\n is that it allows parallel operations on the elements of the stream in one single line of code.  \n\n\nLet's consider the following program that prints out all the prime numbers between 1 and 999,999.\n\n\n1\n2\n3\n    \nIntStream\n.\nrange\n(\n1\n,\n \n1_000_000\n)\n\n        \n.\nfilter\n(\nx\n \n->\n \nisPrime\n(\nx\n))\n\n        \n.\nforEach\n(\nSystem\n.\nout\n::\nprintln\n);\n\n\n\n\n\n\n\nWe can parallelize the code by adding the call \nparallel()\n into the stream.\n\n\n1\n2\n3\n4\n    \nIntStream\n.\nrange\n(\n1\n,\n \n1_000_000\n)\n\n        \n.\nfilter\n(\nx\n \n->\n \nisPrime\n(\nx\n))\n\n        \n.\nparallel\n()\n\n        \n.\nforEach\n(\nSystem\n.\nout\n::\nprintln\n);\n\n\n\n\n\n\n\nYou may observe that the output has been reordered, although the same set of numbers are still being produced.  This is because \nStream\n has broken down the numbers into subsequences, and run \nfilter\n and \nforEach\n for each subsequences in parallel.  Since there is no coordination among the parallel tasks on the order of the printing, whichever parallel tasks that complete first will output the result to screen first, causing the sequence of numbers to be reordered.\n\n\nIf you want to produce the output in the order of input, use \nforEachOrdered\n instead of \nforEach\n, we will loose some benefits of parallelization because of this.\n\n\nSuppose now that we want to compute the number of primes below 1,000,000.  We can run:\n\n\n1\n2\n3\n4\n    \nIntStream\n.\nrange\n(\n1\n,\n \n1_000_000\n)\n\n        \n.\nfilter\n(\nx\n \n->\n \nisPrime\n(\nx\n))\n\n        \n.\nparallel\n()\n\n        \n.\ncount\n()\n\n\n\n\n\n\n\nThe code above produce the same output regardless of it is being parallelized or not.  \n\n\nNote that the task above is stateless and does not produce any side effect.  Furthermore, each element is processed individually without depending on other elements.  Such computation is sometimes known as \nembarrassingly parallel\n.  The only communication needed for each of the parallel subtask is to combine the result of \ncount()\n from the subtasks into the final count (which has been implemented in \nStream\n for us.\n\n\nHow to parallelize a stream\n\n\nYou have seen that adding \nparallel()\n to the chain of calls in a stream enables parallel processing of the stream.  Note that \nparallel()\n is a lazy operation -- it merely marks the stream to be process in parallel.  As such, you can insert the call to \nparallel()\n anywhere in the chain.\n\n\n\n\nsequential()\n\n\nThere is a method \nsequential()\n which marks the stream to be process sequentially.  If you call both \nparallel()\n and \nsequential()\n in a stream,\nthe last call \"wins\".  The example below processes the stream \nsequentially:\n\n1\ns.parallel().filter(x -> x < 0).sequential().forEach(..); \n\n\n\n\n\n\n\nAnother way to create a parallel stream is to call the method \nparallelStream()\n instead of \nstream()\n of the \nCollector\n class.  Doing so would create a stream that will be processed in parallel from the collection.\n\n\nWhat can be parallelized?\n\n\nTo ensure that the output of the parallel execution is correct, the stream operations must not \ninterfere\n with the stream data, and most of time must be \nstateless\n.  Side-effects should be kept to minimum.\n\n\nInterference\n\n\nInterference means that one of the stream operation modifies the source of the stream during the execution of the terminal operation.  For instance:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nList\n<\nString\n>\n \nlist\n \n=\n \nnew\n \nArrayList\n<>(\nArrays\n.\nasList\n(\n\"Luke\"\n,\n \n\"Leia\"\n,\n \n\"Han\"\n));\n\n\nlist\n.\nstream\n()\n\n    \n.\npeek\n(\nname\n \n->\n \n{\n\n         \nif\n \n(\nname\n.\nequals\n(\n\"Han\"\n))\n \n{\n\n           \nlist\n.\nadd\n(\n\"Chewie\"\n);\n \n// they belong together\n\n         \n}\n\n      \n})\n\n    \n.\nforEach\n(\ni\n \n->\n \n{});\n\n\n\n\n\n\n\nWould cause \nConcurrentModificationException\n to be thrown.  Note that this non-interference rule applies even if we are using \nstream()\n instead of \nparallelStream()\n.\n\n\nStateless\n\n\nA stateful lambda is one where the result depends on any state that might change during the execution of stream.\n\n\nFor instance, the \ngenerate\n and \nmap\n operations below are stateful, since they depend on the events in the queue and the states of the shops.  Parallelizing this may lead to incorrect output.  To ensure that the output is correct, additional work needs to be done to ensure that state updates are visible to all parallel subtasks.\n\n\n1\n2\n3\n4\n5\n6\nStream\n.\ngenerate\n(\nthis\n.\nevents\n::\npoll\n)\n\n    \n.\ntakeWhile\n(\nevent\n \n->\n \nevent\n \n!=\n \nnull\n)\n\n    \n.\nfilter\n(\nevent\n \n->\n \nevent\n.\nhappensBefore\n(\nsim\n.\nexpireTime\n()))\n \n    \n.\npeek\n(\nevent\n \n->\n \nevent\n.\nlog\n())\n\n    \n.\nmap\n(\nevent\n \n->\n \nsim\n.\nhandle\n(\nevent\n))\n\n    \n.\nforEach\n(\neventStream\n \n->\n \nthis\n.\nschedule\n(\neventStream\n));\n\n\n\n\n\n\n\nSide Effects\n\n\nSide-effects can lead to incorrect results in parallel execution.  Consider the following code:\n\n\n1\n2\n3\n4\n5\n6\nList\n<\nInteger\n>\n \nlist\n \n=\n \nnew\n \nArrayList\n<>(\n\n    \nArrays\n.\nasList\n(\n1\n,\n3\n,\n5\n,\n7\n,\n9\n,\n11\n,\n13\n,\n15\n,\n17\n,\n19\n));\n\n\nList\n<\nInteger\n>\n \nresult\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nlist\n.\nparallelStream\n()\n\n    \n.\nfilter\n(\nx\n \n->\n \nisPrime\n(\nx\n))\n\n    \n.\nforEach\n(\nx\n \n->\n \nresult\n.\nadd\n(\nx\n));\n\n\n\n\n\n\n\nThe \nforEach\n lambda generates a side effect -- it modifies \nresult\n.  \nArrayList\n is what we call a non-thread-safe data structure.  If two threads manipulate it at the same time, incorrect result may result.\n\n\nIf we use \nCollectors.toList()\n instead, we can achieve the intended result without visible side effects.\n\n\nAssociativity\n\n\nThe \nreduce\n operation is inherently parallelizable, as we can easily reduce each sub-streams and then use the \ncombiner\n to combine the results together.  Recall this example from Lecture 9:\n\n\n1\nStream\n.\nof\n(\n1\n,\n2\n,\n3\n,\n4\n).\nreduce\n(\n1\n,\n \n(\nx\n,\ny\n)->\nx\n*\ny\n,\n \n(\nx\n,\ny\n)->\nx\n*\ny\n);\n\n\n\n\n\n\n\nThere are several rules that the \nidentity\n, the \naccumulator\n and the \ncombiner\n must follow:\n\n\n\n\ncombiner.apply(identity, i)\n must be equal to \ni\n.\n\n\nThe \ncombiner\n and the \naccumulator\n must be associative -- the order of applying must not matter.\n\n\nThe \ncombiner\n and the \naccumulator\n must be compatible -- \ncombiner.apply(u, accumulator.apply(identity, t))\n must equal to \naccumulator.apply(u, t)\n\n\n\n\nThe multiplication example above meetings the three rules:\n\n\n\n\ni * 1\n equals \ni\n\n\n(x * y) * z\n equals \nx * (y * z)\n\n\nu * (1 * t)\n equals \nu * t\n\n\n\n\nPerformance of Parallel Stream\n\n\nLet's go back to:\n\n\n1\n2\n3\n4\nIntStream\n.\nrange\n(\n1\n,\n \n1_000_000\n)\n\n    \n.\nfilter\n(\nx\n \n->\n \nisPrime\n(\nx\n))\n\n    \n.\nparallel\n()\n\n    \n.\ncount\n()\n\n\n\n\n\n\n\nHow much time can we save by parallelizing the code above?\n\n\nLet's use the \nInstant\n and \nDuration\n class from Java to help us:\n\n\n1\n2\n3\n4\n5\n6\n7\n    \nInstant\n \nstart\n \n=\n \nInstant\n.\nnow\n();\n\n    \nlong\n \nhowMany\n \n=\n \nIntStream\n.\nrange\n(\n1\n,\n1000000\n)\n\n        \n.\nfilter\n(\nx\n \n->\n \nisPrime\n(\nx\n))\n\n        \n.\nparallel\n()\n\n        \n.\ncount\n();\n\n    \nInstant\n \nstop\n \n=\n \nInstant\n.\nnow\n();\n\n    \nSystem\n.\nout\n.\nprintln\n(\nhowMany\n \n+\n \n\" \"\n \n+\n \nDuration\n.\nbetween\n(\nstart\n,\nstop\n).\ntoMillis\n()\n \n+\n \n\" ms\"\n);\n\n\n\n\n\n\n\nThe code above measures roughly the time it takes to count the number of primes below 1,000,000.  On my iMac, it takes about 300-320 ms.  If I remove \nparallel()\n, it takes about 500 ms.  So we gain about 36 - 40% performance.\n\n\nCan we parallelize some more?  Remember how we implement \nisPrime\n2\n\n\n1\n2\n3\n4\n  \nboolean\n \nisPrime\n(\nint\n \nn\n)\n \n{\n\n    \nreturn\n \nIntStream\n.\nrange\n(\n2\n,\n \n(\nint\n)\nMath\n.\nsqrt\n(\nn\n)\n \n+\n \n1\n)\n\n        \n.\nnoneMatch\n(\nx\n \n->\n \nn\n \n%\n \nx\n \n==\n \n0\n);\n\n  \n}\n\n\n\n\n\n\n\nLet's parallelize this to make this even faster!\n\n\n1\n2\n3\n4\n5\n  \nboolean\n \nisPrime\n(\nint\n \nn\n)\n \n{\n\n    \nreturn\n \nIntStream\n.\nrange\n(\n2\n,\n \n(\nint\n)\nMath\n.\nsqrt\n(\nn\n)\n \n+\n \n1\n)\n\n        \n.\nparallel\n()\n\n        \n.\nnoneMatch\n(\nx\n \n->\n \nn\n \n%\n \nx\n \n==\n \n0\n);\n\n  \n}\n\n\n\n\n\n\n\nIf you run the code above, however, you will find that the code is not as fast as we expect. On my iMac, it takes about 12.7s, about 25 times slower!\n\n\nParallelizing a stream does not always improve the performance\n.\n\n\nWhat is going on?  To understand this, we have to delve a bit deeper into how Java implements the parallel streams.  \n\n\nThread Pools and Fork/Join\n\n\nInternally, Java maintains pool of \nworker threads\n.  A worker thread is an abstraction for running a task.  We can submit a task to the pool for execution, the task will join queue.  The worker thread can pick a task from the queue to execute.  When it is done, it pick another task, if one exists in the queue, and so on -- not unlike our \nServer\n (worker thread) and \nCustomer\n (task).\n\n\nA \nForkJoinPool\n is a class the implements a thread pool with a particular semantic --- the task that the worker runs must specify \nfork\n -- how to create subtasks, and \njoin\n -- how to merge the results from the subtasks.\n\n\nIn the case of a parallel stream, \nfork\n will create subtasks running the same chain of operations on sub-streams, and when done, run \njoin\n to combine the results (e.g., \ncombiner\n for \nreduce\n is run in \njoin\n).  \nfork\n and \njoin\n can be recursive -- for instance, a \nfork\n operation can split the stream into two subtasks.  The subtasks can further split the sub-streams into four smaller sub-streams, and so on, until the size of the sub-stream is small enough that the task is actually invoked.\n\n\nTo define a task, we subclass from \nRecursiveTask<T>\n (if the task returns a value of type \nT\n) or \nRecursiveAction\n (if the task does not return a value).\n\n\nHere is an example task that we can submit to ForkJoinPool:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n  \nstatic\n \nclass\n \nBinSearch\n \nextends\n \nRecursiveTask\n<\nBoolean\n>\n \n{\n\n    \nfinal\n \nint\n \nFORK_THRESHOLD\n \n=\n \n2\n;\n\n    \nint\n \nlow\n;\n\n    \nint\n \nhigh\n;\n\n    \nint\n \ntoFind\n;\n\n    \nint\n[]\n \narray\n;\n\n\n    \nBinSearch\n(\nint\n \nlow\n,\n \nint\n \nhigh\n,\n \nint\n \ntoFind\n,\n \nint\n[]\n \narray\n)\n \n{\n\n      \nthis\n.\nlow\n \n=\n \nlow\n;\n\n      \nthis\n.\nhigh\n \n=\n \nhigh\n;\n\n      \nthis\n.\ntoFind\n \n=\n \ntoFind\n;\n\n      \nthis\n.\narray\n \n=\n \narray\n;\n\n    \n}\n\n\n    \n@Override\n\n    \nprotected\n \nBoolean\n \ncompute\n()\n \n{\n\n      \n// stop splitting into subtask if array is already small.\n\n      \nif\n \n(\nhigh\n \n-\n \nlow\n \n<\n \nFORK_THRESHOLD\n)\n \n{\n\n        \nfor\n \n(\nint\n \ni\n \n=\n \nlow\n;\n \ni\n \n<\n \nhigh\n;\n \ni\n++)\n \n{\n\n          \nif\n \n(\narray\n[\ni\n]\n \n==\n \ntoFind\n)\n \n{\n\n            \nreturn\n \ntrue\n;\n\n          \n}\n\n        \n}\n\n        \nreturn\n \nfalse\n;\n\n      \n}\n \n\n      \nint\n \nmiddle\n \n=\n \n(\nlow\n \n+\n \nhigh\n)/\n2\n;\n\n      \nBinSearch\n \nleft\n \n=\n \nnew\n \nBinSearch\n(\nlow\n,\n \nmiddle\n,\n \ntoFind\n,\n \narray\n);\n\n      \nBinSearch\n \nright\n \n=\n \nnew\n \nBinSearch\n(\nmiddle\n,\n \nhigh\n,\n \ntoFind\n,\n \narray\n);\n\n      \nleft\n.\nfork\n();\n\n      \nreturn\n \nright\n.\ncompute\n()\n \n||\n \nleft\n.\njoin\n();\n\n    \n}\n\n  \n}\n\n\n\n\n\n\n\nTo run the task, we call the \ninvoke\n method of \nForkJoinPool\n, which executes the given task immediately and return the result.\n\n\n1\n2\n    \nBinSearch\n \nsearchTask\n \n=\n \nnew\n \nBinSearch\n(\n0\n,\n \narray\n.\nlength\n,\n \n12\n,\n \narray\n);\n\n    \nboolean\n \nfound\n \n=\n \nForkJoinPool\n.\ncommonPool\n().\ninvoke\n(\nsearchTask\n)\n\n\n\n\n\n\n\nThe task above recursively search for an element in the left half and right half of the array.  Note that this is similar to, but is NOT binary search.  Binary search of course just search in either the left or the right side, depending on the middle value, and is not parallel.\n\n\nForkJoinPool overhead\n\n\nIn the example above, you can see that creating subtasks incur some overhead (new task objects, copying of parameters into objects, etc).  In the \nisPrime\n example above, the task is trivial (checking \nn % x == 0\n), and so, by parallelizing it, we are actually creating more work for Java to do!  It is much more efficient if we simply check for \nn % x == 0\n sequentially.\n\n\nThe moral of the story is, parallelization is worthwhile if the task is complex enough that the benefit of parallelization outweighs the overhead.  While we discuss this in the context of parallel streams, this principle holds for all parallel and concurrent programs.\n\n\nOrdered vs. Unordered Source\n\n\nWhether or not the stream elements are \nordered\n or \nunordered\n also plays a role in the performance of parallel stream operations.  A stream may define an \nencounter order\n.  Streams created from \niterate\n, ordered collections (e.g., \nList\n or arrays), from \nof\n, are ordered.  Stream created from \ngenerate\n or unordered collections (e.g., \nSet\n) are unordered.\n\n\nSome stream operations respect the encounter order.  For instance, both \ndistinct\n and \nsorted\n preserve the original order of elements (if ordering is preserved, we say that an operation is \nstable\n).\n\n\nThe parallel version of \nfindFirst\n, \nlimit\n, and \nskip\n can be expensive on ordered stream.  \n\n\nIf we have an ordered stream and respecting the original order is not important, we can call \nunordered()\n as part of the chain command to make the parallel operations much more efficient.\n\n\nThe following, for example, takes about 700 ms on my iMac:\n\n\n1\n2\n3\n4\n5\n    \nStream\n.\niterate\n(\n0\n,\n \ni\n \n->\n \ni\n \n+\n \n7\n)\n\n        \n.\nparallel\n()\n\n        \n.\nlimit\n(\n10_000_000\n)\n\n        \n.\nfilter\n(\ni\n \n->\n \ni\n \n%\n \n64\n \n==\n \n0\n)\n\n        \n.\nforEachOrdered\n(\ni\n \n->\n \n{\n \n});\n\n\n\n\n\n\n\nBut, with \nunordered()\n inserted, it takes about 350ms, a 2x speed up!\n\n\n1\n2\n3\n4\n5\n6\n    \nStream\n.\niterate\n(\n0\n,\n \ni\n \n->\n \ni\n \n+\n \n7\n)\n\n        \n.\nparallel\n()\n\n        \n.\nunordered\n()\n\n        \n.\nlimit\n(\n10_000_000\n)\n\n        \n.\nfilter\n(\ni\n \n->\n \ni\n \n%\n \n64\n \n==\n \n0\n)\n\n        \n.\nforEachOrdered\n(\ni\n \n->\n \n{\n \n});\n\n\n\n\n\n\n\nCollectors\n\n\nTo wrap up, we will revisit the \nCollector\n class.  Recall that \ncollect\n is a mutable version of \nreduce\n on \nStream\n.  Being mutable, parallelizing it is tricky.  Luckily, we only need to provide hints to the Collector class, which will optimize the implementation for us.  The hint is given as part of the \ncharacteristics()\n method (the last method that we did not cover last week).\n\n\nThe \ncharacteristics()\n method returns a \nSet\n that contains a combination of three enums:\n\n\n\n\nCONCURRENT\n to indicate that the container that the supplier created can support accumulator function being called concurrently from multiple threads,\n\n\nIDENTITY_FINISH\n to indicate the the finisher function is the identity function, and can be skipped.\n\n\nUNORDERED\n to indicate that the collection operation does not necessary preserve the encounter order of the elements.\n\n\n\n\nThe operation \ncollect\n will only be parallelized if the following three conditions hold:\n\n\n\n\nThe stream is parallel\n\n\nThe collector has characteristic \nCONCURRENT\n \n\n\nThe stream is unordered or has characteristic \nUNORDERED\n\n\n\n\nOf course, if we tell the collector has the characteristic \nCONCURRENT\n, the container that we use must actually supports that!  Luckily for us, Java \njava.util.concurrent\n package provides many collections that support concurrency, including \nCopyOnWriteArrayList\n, \nConcurrentHashMap\n, etc.  Obviously these are more expensive.  For instance, \nCopyOnWriteArrayList\n creates a fresh copy of the underlying array whenever there is a mutative operation (e.g., \nadd\n, \nset\n, etc), not unlike your \nLambdaList\n.  \n\n\nAgain, this is the overhead cost of parallelization -- the cost that might not outweigh the benefit of parallelization, and should be considered carefully.\n\n\n\n\n\n\n\n\n\n\niPhone X comes with A11 Bionic chip with six cores.  The fastest supercomputer in the world as of this writing, the Sunway TaihuLight (\u795e\u5a01 \u592a\u6e56\u4e4b\u5149), has 40,960 processors, each with 256 cores, giving a total of 10,485,760 cores.  \u00a0\n\u21a9\n\n\n\n\n\n\nThis is a more efficient version of the code you have seen, since it stops testing after the square root of the \n\\(n\\)\n.\u00a0\n\u21a9",
            "title": "10. Parallel Streams"
        },
        {
            "location": "/lec10/index.html#lecture-10-parallel-streams",
            "text": "",
            "title": "Lecture 10: Parallel Streams"
        },
        {
            "location": "/lec10/index.html#learning-objectives",
            "text": "After attending this lecture, students should:   be aware that a program can be broken into subtasks to run parallelly and/or concurrently   be aware of the issues caused by running the subtasks parallelly and concurrently.  be aware of that there exist tradeoffs in the number of subtasks and the processing overhead.  be familiar with how to process a stream parallelly and correctly.  be familiar with the Java's fork/join framework.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec10/index.html#parallel-and-concurrent-programming",
            "text": "So far, the programs that we have written in CS2030 run  sequentially .  What this means is that at any one time, there is only one instruction of the program running on a processor.",
            "title": "Parallel and Concurrent Programming"
        },
        {
            "location": "/lec10/index.html#what-is-concurrency",
            "text": "A single core processor can only execute one instruction at one time -- this means that only one  process   (or less precisely speaking, one application) can run at any one time.  Yet, when we use the computer, it  feels  as if we are running multiple processes at the same time.  The operating system, behind the scene, is actually switching between the different processes, to give the user an illusion that they are running at the same time.  We can write a program so that it runs concurrently -- by dividing the computation into subtasks called  threads .  The operating system, behind the scene, can switch between the different threads, to give the user an illusion that the threads are running at the same time.  Such multi-threads programs are useful in two ways: (i) it allows us, the programmers, to separate the unrelated tasks into threads, and write each thread separately; (ii) it improves the utilization of the processor.  For instance, if I/O is in one thread, and UI rendering is in another, then when the processor is waiting for I/O to complete, it can switch to the rendering thread to make sure that the slow I/O does not affect the responsiveness of UI.",
            "title": "What is concurrency?"
        },
        {
            "location": "/lec10/index.html#what-is-parallelism",
            "text": "While concurrency gives the illusion of subtasks running at the same time, parallel computing refers to the scenario where multiple subtasks are truly running at the same time -- either we have a processor that is capable of running multiple instructions at the same time, or we have multiple cores / processors and dispatch the instructions to the cores / processors so that they are executed at the same time.  All parallel programs are concurrent, but not all concurrent programs are parallel.  Modern computers have more than one cores / processors 1 .\nAs such, the line between parallelism and concurrency is blurred.",
            "title": "What is parallelism?"
        },
        {
            "location": "/lec10/index.html#parallel-computing",
            "text": "Parallel computing is one of the major topics in computer science.  One can teach a whole module (or a focus area) on this topic alone.  The goal of this lecture is not to cover it in depth, but is to expose students in CS2030 to the concept of parallel computing in relation to the stream abstraction in Java 8.",
            "title": "Parallel computing"
        },
        {
            "location": "/lec10/index.html#parallel-stream",
            "text": "We have seen that Java  Stream  class is a powerful and useful class for processing data in declarative style.  But, we have not fully unleash the power of  Stream .  The neatest thing about  Stream  is that it allows parallel operations on the elements of the stream in one single line of code.    Let's consider the following program that prints out all the prime numbers between 1 and 999,999.  1\n2\n3      IntStream . range ( 1 ,   1_000_000 ) \n         . filter ( x   ->   isPrime ( x )) \n         . forEach ( System . out :: println );    We can parallelize the code by adding the call  parallel()  into the stream.  1\n2\n3\n4      IntStream . range ( 1 ,   1_000_000 ) \n         . filter ( x   ->   isPrime ( x )) \n         . parallel () \n         . forEach ( System . out :: println );    You may observe that the output has been reordered, although the same set of numbers are still being produced.  This is because  Stream  has broken down the numbers into subsequences, and run  filter  and  forEach  for each subsequences in parallel.  Since there is no coordination among the parallel tasks on the order of the printing, whichever parallel tasks that complete first will output the result to screen first, causing the sequence of numbers to be reordered.  If you want to produce the output in the order of input, use  forEachOrdered  instead of  forEach , we will loose some benefits of parallelization because of this.  Suppose now that we want to compute the number of primes below 1,000,000.  We can run:  1\n2\n3\n4      IntStream . range ( 1 ,   1_000_000 ) \n         . filter ( x   ->   isPrime ( x )) \n         . parallel () \n         . count ()    The code above produce the same output regardless of it is being parallelized or not.    Note that the task above is stateless and does not produce any side effect.  Furthermore, each element is processed individually without depending on other elements.  Such computation is sometimes known as  embarrassingly parallel .  The only communication needed for each of the parallel subtask is to combine the result of  count()  from the subtasks into the final count (which has been implemented in  Stream  for us.",
            "title": "Parallel Stream"
        },
        {
            "location": "/lec10/index.html#how-to-parallelize-a-stream",
            "text": "You have seen that adding  parallel()  to the chain of calls in a stream enables parallel processing of the stream.  Note that  parallel()  is a lazy operation -- it merely marks the stream to be process in parallel.  As such, you can insert the call to  parallel()  anywhere in the chain.   sequential()  There is a method  sequential()  which marks the stream to be process sequentially.  If you call both  parallel()  and  sequential()  in a stream,\nthe last call \"wins\".  The example below processes the stream \nsequentially: 1 s.parallel().filter(x -> x < 0).sequential().forEach(..);     Another way to create a parallel stream is to call the method  parallelStream()  instead of  stream()  of the  Collector  class.  Doing so would create a stream that will be processed in parallel from the collection.",
            "title": "How to parallelize a stream"
        },
        {
            "location": "/lec10/index.html#what-can-be-parallelized",
            "text": "To ensure that the output of the parallel execution is correct, the stream operations must not  interfere  with the stream data, and most of time must be  stateless .  Side-effects should be kept to minimum.",
            "title": "What can be parallelized?"
        },
        {
            "location": "/lec10/index.html#interference",
            "text": "Interference means that one of the stream operation modifies the source of the stream during the execution of the terminal operation.  For instance:  1\n2\n3\n4\n5\n6\n7\n8 List < String >   list   =   new   ArrayList <>( Arrays . asList ( \"Luke\" ,   \"Leia\" ,   \"Han\" ));  list . stream () \n     . peek ( name   ->   { \n          if   ( name . equals ( \"Han\" ))   { \n            list . add ( \"Chewie\" );   // they belong together \n          } \n       }) \n     . forEach ( i   ->   {});    Would cause  ConcurrentModificationException  to be thrown.  Note that this non-interference rule applies even if we are using  stream()  instead of  parallelStream() .",
            "title": "Interference"
        },
        {
            "location": "/lec10/index.html#stateless",
            "text": "A stateful lambda is one where the result depends on any state that might change during the execution of stream.  For instance, the  generate  and  map  operations below are stateful, since they depend on the events in the queue and the states of the shops.  Parallelizing this may lead to incorrect output.  To ensure that the output is correct, additional work needs to be done to ensure that state updates are visible to all parallel subtasks.  1\n2\n3\n4\n5\n6 Stream . generate ( this . events :: poll ) \n     . takeWhile ( event   ->   event   !=   null ) \n     . filter ( event   ->   event . happensBefore ( sim . expireTime ()))  \n     . peek ( event   ->   event . log ()) \n     . map ( event   ->   sim . handle ( event )) \n     . forEach ( eventStream   ->   this . schedule ( eventStream ));",
            "title": "Stateless"
        },
        {
            "location": "/lec10/index.html#side-effects",
            "text": "Side-effects can lead to incorrect results in parallel execution.  Consider the following code:  1\n2\n3\n4\n5\n6 List < Integer >   list   =   new   ArrayList <>( \n     Arrays . asList ( 1 , 3 , 5 , 7 , 9 , 11 , 13 , 15 , 17 , 19 ));  List < Integer >   result   =   new   ArrayList <>();  list . parallelStream () \n     . filter ( x   ->   isPrime ( x )) \n     . forEach ( x   ->   result . add ( x ));    The  forEach  lambda generates a side effect -- it modifies  result .   ArrayList  is what we call a non-thread-safe data structure.  If two threads manipulate it at the same time, incorrect result may result.  If we use  Collectors.toList()  instead, we can achieve the intended result without visible side effects.",
            "title": "Side Effects"
        },
        {
            "location": "/lec10/index.html#associativity",
            "text": "The  reduce  operation is inherently parallelizable, as we can easily reduce each sub-streams and then use the  combiner  to combine the results together.  Recall this example from Lecture 9:  1 Stream . of ( 1 , 2 , 3 , 4 ). reduce ( 1 ,   ( x , y )-> x * y ,   ( x , y )-> x * y );    There are several rules that the  identity , the  accumulator  and the  combiner  must follow:   combiner.apply(identity, i)  must be equal to  i .  The  combiner  and the  accumulator  must be associative -- the order of applying must not matter.  The  combiner  and the  accumulator  must be compatible --  combiner.apply(u, accumulator.apply(identity, t))  must equal to  accumulator.apply(u, t)   The multiplication example above meetings the three rules:   i * 1  equals  i  (x * y) * z  equals  x * (y * z)  u * (1 * t)  equals  u * t",
            "title": "Associativity"
        },
        {
            "location": "/lec10/index.html#performance-of-parallel-stream",
            "text": "Let's go back to:  1\n2\n3\n4 IntStream . range ( 1 ,   1_000_000 ) \n     . filter ( x   ->   isPrime ( x )) \n     . parallel () \n     . count ()    How much time can we save by parallelizing the code above?  Let's use the  Instant  and  Duration  class from Java to help us:  1\n2\n3\n4\n5\n6\n7      Instant   start   =   Instant . now (); \n     long   howMany   =   IntStream . range ( 1 , 1000000 ) \n         . filter ( x   ->   isPrime ( x )) \n         . parallel () \n         . count (); \n     Instant   stop   =   Instant . now (); \n     System . out . println ( howMany   +   \" \"   +   Duration . between ( start , stop ). toMillis ()   +   \" ms\" );    The code above measures roughly the time it takes to count the number of primes below 1,000,000.  On my iMac, it takes about 300-320 ms.  If I remove  parallel() , it takes about 500 ms.  So we gain about 36 - 40% performance.  Can we parallelize some more?  Remember how we implement  isPrime 2  1\n2\n3\n4    boolean   isPrime ( int   n )   { \n     return   IntStream . range ( 2 ,   ( int ) Math . sqrt ( n )   +   1 ) \n         . noneMatch ( x   ->   n   %   x   ==   0 ); \n   }    Let's parallelize this to make this even faster!  1\n2\n3\n4\n5    boolean   isPrime ( int   n )   { \n     return   IntStream . range ( 2 ,   ( int ) Math . sqrt ( n )   +   1 ) \n         . parallel () \n         . noneMatch ( x   ->   n   %   x   ==   0 ); \n   }    If you run the code above, however, you will find that the code is not as fast as we expect. On my iMac, it takes about 12.7s, about 25 times slower!  Parallelizing a stream does not always improve the performance .  What is going on?  To understand this, we have to delve a bit deeper into how Java implements the parallel streams.",
            "title": "Performance of Parallel Stream"
        },
        {
            "location": "/lec10/index.html#thread-pools-and-forkjoin",
            "text": "Internally, Java maintains pool of  worker threads .  A worker thread is an abstraction for running a task.  We can submit a task to the pool for execution, the task will join queue.  The worker thread can pick a task from the queue to execute.  When it is done, it pick another task, if one exists in the queue, and so on -- not unlike our  Server  (worker thread) and  Customer  (task).  A  ForkJoinPool  is a class the implements a thread pool with a particular semantic --- the task that the worker runs must specify  fork  -- how to create subtasks, and  join  -- how to merge the results from the subtasks.  In the case of a parallel stream,  fork  will create subtasks running the same chain of operations on sub-streams, and when done, run  join  to combine the results (e.g.,  combiner  for  reduce  is run in  join ).   fork  and  join  can be recursive -- for instance, a  fork  operation can split the stream into two subtasks.  The subtasks can further split the sub-streams into four smaller sub-streams, and so on, until the size of the sub-stream is small enough that the task is actually invoked.  To define a task, we subclass from  RecursiveTask<T>  (if the task returns a value of type  T ) or  RecursiveAction  (if the task does not return a value).  Here is an example task that we can submit to ForkJoinPool:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33    static   class   BinSearch   extends   RecursiveTask < Boolean >   { \n     final   int   FORK_THRESHOLD   =   2 ; \n     int   low ; \n     int   high ; \n     int   toFind ; \n     int []   array ; \n\n     BinSearch ( int   low ,   int   high ,   int   toFind ,   int []   array )   { \n       this . low   =   low ; \n       this . high   =   high ; \n       this . toFind   =   toFind ; \n       this . array   =   array ; \n     } \n\n     @Override \n     protected   Boolean   compute ()   { \n       // stop splitting into subtask if array is already small. \n       if   ( high   -   low   <   FORK_THRESHOLD )   { \n         for   ( int   i   =   low ;   i   <   high ;   i ++)   { \n           if   ( array [ i ]   ==   toFind )   { \n             return   true ; \n           } \n         } \n         return   false ; \n       }  \n\n       int   middle   =   ( low   +   high )/ 2 ; \n       BinSearch   left   =   new   BinSearch ( low ,   middle ,   toFind ,   array ); \n       BinSearch   right   =   new   BinSearch ( middle ,   high ,   toFind ,   array ); \n       left . fork (); \n       return   right . compute ()   ||   left . join (); \n     } \n   }    To run the task, we call the  invoke  method of  ForkJoinPool , which executes the given task immediately and return the result.  1\n2      BinSearch   searchTask   =   new   BinSearch ( 0 ,   array . length ,   12 ,   array ); \n     boolean   found   =   ForkJoinPool . commonPool (). invoke ( searchTask )    The task above recursively search for an element in the left half and right half of the array.  Note that this is similar to, but is NOT binary search.  Binary search of course just search in either the left or the right side, depending on the middle value, and is not parallel.",
            "title": "Thread Pools and Fork/Join"
        },
        {
            "location": "/lec10/index.html#forkjoinpool-overhead",
            "text": "In the example above, you can see that creating subtasks incur some overhead (new task objects, copying of parameters into objects, etc).  In the  isPrime  example above, the task is trivial (checking  n % x == 0 ), and so, by parallelizing it, we are actually creating more work for Java to do!  It is much more efficient if we simply check for  n % x == 0  sequentially.  The moral of the story is, parallelization is worthwhile if the task is complex enough that the benefit of parallelization outweighs the overhead.  While we discuss this in the context of parallel streams, this principle holds for all parallel and concurrent programs.",
            "title": "ForkJoinPool overhead"
        },
        {
            "location": "/lec10/index.html#ordered-vs-unordered-source",
            "text": "Whether or not the stream elements are  ordered  or  unordered  also plays a role in the performance of parallel stream operations.  A stream may define an  encounter order .  Streams created from  iterate , ordered collections (e.g.,  List  or arrays), from  of , are ordered.  Stream created from  generate  or unordered collections (e.g.,  Set ) are unordered.  Some stream operations respect the encounter order.  For instance, both  distinct  and  sorted  preserve the original order of elements (if ordering is preserved, we say that an operation is  stable ).  The parallel version of  findFirst ,  limit , and  skip  can be expensive on ordered stream.    If we have an ordered stream and respecting the original order is not important, we can call  unordered()  as part of the chain command to make the parallel operations much more efficient.  The following, for example, takes about 700 ms on my iMac:  1\n2\n3\n4\n5      Stream . iterate ( 0 ,   i   ->   i   +   7 ) \n         . parallel () \n         . limit ( 10_000_000 ) \n         . filter ( i   ->   i   %   64   ==   0 ) \n         . forEachOrdered ( i   ->   {   });    But, with  unordered()  inserted, it takes about 350ms, a 2x speed up!  1\n2\n3\n4\n5\n6      Stream . iterate ( 0 ,   i   ->   i   +   7 ) \n         . parallel () \n         . unordered () \n         . limit ( 10_000_000 ) \n         . filter ( i   ->   i   %   64   ==   0 ) \n         . forEachOrdered ( i   ->   {   });",
            "title": "Ordered vs. Unordered Source"
        },
        {
            "location": "/lec10/index.html#collectors",
            "text": "To wrap up, we will revisit the  Collector  class.  Recall that  collect  is a mutable version of  reduce  on  Stream .  Being mutable, parallelizing it is tricky.  Luckily, we only need to provide hints to the Collector class, which will optimize the implementation for us.  The hint is given as part of the  characteristics()  method (the last method that we did not cover last week).  The  characteristics()  method returns a  Set  that contains a combination of three enums:   CONCURRENT  to indicate that the container that the supplier created can support accumulator function being called concurrently from multiple threads,  IDENTITY_FINISH  to indicate the the finisher function is the identity function, and can be skipped.  UNORDERED  to indicate that the collection operation does not necessary preserve the encounter order of the elements.   The operation  collect  will only be parallelized if the following three conditions hold:   The stream is parallel  The collector has characteristic  CONCURRENT    The stream is unordered or has characteristic  UNORDERED   Of course, if we tell the collector has the characteristic  CONCURRENT , the container that we use must actually supports that!  Luckily for us, Java  java.util.concurrent  package provides many collections that support concurrency, including  CopyOnWriteArrayList ,  ConcurrentHashMap , etc.  Obviously these are more expensive.  For instance,  CopyOnWriteArrayList  creates a fresh copy of the underlying array whenever there is a mutative operation (e.g.,  add ,  set , etc), not unlike your  LambdaList .    Again, this is the overhead cost of parallelization -- the cost that might not outweigh the benefit of parallelization, and should be considered carefully.      iPhone X comes with A11 Bionic chip with six cores.  The fastest supercomputer in the world as of this writing, the Sunway TaihuLight (\u795e\u5a01 \u592a\u6e56\u4e4b\u5149), has 40,960 processors, each with 256 cores, giving a total of 10,485,760 cores.  \u00a0 \u21a9    This is a more efficient version of the code you have seen, since it stops testing after the square root of the  \\(n\\) .\u00a0 \u21a9",
            "title": "Collectors"
        },
        {
            "location": "/lec11/index.html",
            "text": "Learning Objectives\n\n\nAfter this lecture, students should:\n\n\n\n\nfamiliar with the concept of asynchronous method calls and be able to use it effectively\n\n\nfamiliar with the concept of promise through Java 8 \nCompletableFuture\n class\n\n\n\n\nSynchronous vs. Asynchronous\n\n\nIn synchronous programming, when we call a method, we expect the method to be executed, and when the method returns, the result of the method is available.\n\n\n1\n2\n3\n4\n5\nint\n \nmultiple\n(\nint\n \nx\n,\n \nint\n \ny\n)\n \n{\n\n    \nreturn\n \nx\n \n*\n \ny\n;\n\n\n}\n\n\n\nint\n \nz\n \n=\n \nmultiple\n(\n3\n,\n \n4\n);\n\n\n\n\n\n\n\nIn the simple example above, our code continues executing after, and only after \nadd()\n completes.\n\n\nIf a method takes a long time to run, however, the execution will delay the execution of subsequent methods, and maybe undesirable.\n\n\nAsynchronous call to a method allows execution to continue immediately after calling the method, so that we can continue executing the rest of our code, while the long-running method is off doing its job.\n\n\nYou have seen examples of asynchronous calls: \n\n\n1\n2\n    \ntask\n \n=\n \nnew\n \nMatrixMultiplyerTask\n(\nm1\n,\n \nm2\n);\n\n    \ntask\n.\nfork\n();\n\n\n\n\n\n\n\nThe call above returns immediately even before the matrix multiplication is complete.  We can later return to this task, and call \ntask.join()\n to get the result (waiting for it if necessary).  \n\n\nA \nRecursiveTask\n also has a \nisDone()\n method that it implements as part of the \nFuture\n interface.  Now, we can do something like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n    \ntask\n \n=\n \nnew\n \nMatrixMultiplyerTask\n(\nm1\n,\n \nm2\n);\n\n    \ntask\n.\nfork\n();\n\n    \nwhile\n \n(!\ntask\n.\nisDone\n())\n \n{\n\n        \nSystem\n.\nout\n.\nprint\n(\n\".\"\n);\n\n        \nThread\n.\nsleep\n(\n1000\n);\n\n    \n}\n\n    \nSystem\n.\nout\n.\nprint\n(\n\"done\"\n);\n\n\n\n\n\n\n\nSo, while the task is running, we can print out a series of \".\"s to feedback to the users to indicate that it is running.\n\n\nThread.sleep(1000)\n cause the current running thread to sleep for 1s.  It might throw an \nInterruptedException\n, if the user interrupts the program (by Control-C).  To complete the snippet, we should catch the exception and cancel the task. \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n    \ntask\n \n=\n \nnew\n \nMatrixMultiplyerTask\n(\nm1\n,\n \nm2\n);\n\n    \ntask\n.\nfork\n();\n\n    \ntry\n \n{\n\n        \nwhile\n \n(!\ntask\n.\nisDone\n())\n \n{\n\n            \nSystem\n.\nout\n.\nprint\n(\n\".\"\n);\n\n            \nThread\n.\nsleep\n(\n1000\n);\n\n        \n}\n\n        \nSystem\n.\nout\n.\nprintln\n(\n\"done\"\n);\n\n    \n}\n \ncatch\n \n(\nInterruptedException\n \ne\n)\n \n{\n\n        \ntask\n.\ncancel\n();\n\n        \nSystem\n.\nout\n.\nprintln\n(\n\"cancelled\"\n);\n\n    \n}\n\n\n\n\n\n\n\nFuture\n\n\nLet's look at the \nFuture\n interface a bit more.  \nFuture<T>\n represents the result (of type \nT\n) of an asynchronous task that may not be available yet.  It has five simple operations:\n\n\n\n\nget()\n returns the result of the computation (waiting for it if needed).\n\n\nget(timeout, unit)\n returns the result of the computation (waiting for up to the timeout period if needed).\n\n\ncancel(interrupt)\n tries to cancel the task -- if \ninterrupt\n is true, cancel even if the task has started.  Otherwise, cancel only if the task is still waiting to get started.\n\n\nisCancelled()\n returns \ntrue\n of the task has been cancelled.\n\n\nisDone()\n returns \ntrue\n if the task has been completed.\n\n\n\n\nBoth \nRecursiveTask\n and \nRecursiveAction\n implements the \nFuture\n interface, so you can use the above methods on your tasks.\n\n\n\n\nIn Other Languages\n\n\nScala's \nFuture\n is more powerful -- it allows us to specify what to do when the task completes, and it hands abnormal completions (e.g., exceptions). \n    Python 3.2 supports \nFuture\n through \nconcurrent.futures\n module.  C++11 supports \nstd::future\n](\nhttp://en.cppreference.com/w/cpp/thread/future\n) as well.\n\n\n\n\nCompletableFuture\n\n\nThe example code above tries every second to see if task is done.  For some applications, the response time is critical, and we would like to know as soon as a task is done.  For instance, response time is important in stock trading applications and web services.  \n\n\nOne way to do so, is to sleep for a shorter duration.  Or even not sleeping all together:\n\n\n1\n2\n3\n4\n5\n    \ntask\n.\nfork\n();\n\n    \nwhile\n \n(!\ntask\n.\nisDone\n())\n \n{\n\n        \nSystem\n.\nout\n.\nprint\n(\n\".\"\n);\n\n    \n}\n\n    \nSystem\n.\nout\n.\nprint\n(\n\"done\"\n);\n\n\n\n\n\n\n\nThis is problematic in many ways, besides printing out too many dots:\n\n\n\n\nthis is known as \nbusy waiting\n -- and it occupies the CPU while doing nothing.  Such code should be avoided at all cost. \n\n\nwe may want to continue doing other things besides printing out \".\"s, so the code won't be a simple for loop anymore.  We can do something like this instead:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n    \ntask\n.\nfork\n();\n\n    \nif\n \n(!\ntask\n.\nisDone\n())\n \n{\n\n        \n// do something\n\n    \n}\n \nelse\n \n{\n\n        \ntask\n.\njoin\n();\n\n    \n}\n\n    \nif\n \n(!\ntask\n.\nisDone\n())\n \n{\n\n        \n// do something else\n\n    \n}\n \nelse\n \n{\n\n        \ntask\n.\njoin\n();\n\n    \n}\n\n    \nif\n \n(!\ntask\n.\nisDone\n())\n \n{\n\n        \n// do yet something else\n\n    \n}\n \nelse\n \n{\n\n        \ntask\n.\njoin\n();\n\n    \n}\n\n\n\n\n\n\n\nYou can see that the code gets out of hand quickly, and this is only if we have one asynchronous call!\n\n\nWhat we need is have a way to specify a \ncallback\n.  A callback is basically a method that will be executed when a certain event happens.  In this case, we need to specify a callback when an asynchronous task is complete.  This way, we can just call an asynchronous task, specify what to do when the task is completed, and forget about it.  We do not need to check again and again if the task is done.\n\n\nJava 8 introduces the class \nCompletableFuture\n, which implements the \nFuture\n interface, and allows us to specify an asynchronous task, and an action to perform when the task completes.\n\n\nTo create a \nCompletableFuture\n object, we can call one of its static method.  For instance, \nsupplyAsync\n takes in a \nSupplier\n:\n\n\n1\nCompletableFuture\n<\nMatrix\n>\n \nfuture\n \n=\n \nCompletableFuture\n.\nsupplyAsync\n(()\n \n->\n \nm1\n.\nmultiply\n(\nm2\n));\n\n\n\n\n\n\n\nTo specify the callback, we can use the \nthenAccept\n method, which takes in a consumer:\n\n\n1\nfuture\n.\nthenAccept\n(\nSystem\n.\nout\n::\nprintln\n);\n\n\n\n\n\n\n\nOr, you can use the oneliner:\n\n\n1\n2\n3\nCompletableFuture\n\n    \n.\nsupplyAsync\n(()\n \n->\n \nm1\n.\nmultiply\n(\nm2\n))\n\n    \n.\nthenAccept\n(\nSystem\n.\nout\n::\nprintln\n);\n\n\n\n\n\n\n\nCompletableFuture is a Functor / Monad\n\n\nCompletableFuture\n is a functor.  Recall that a functor, in OO-speak, is a class that implements a (hypothetical) interface that looks like the following:\n\n\n1\n2\n3\ninterface\n \nFunctor\n<\nT\n>\n \n{\n\n  \npublic\n \n<\nR\n>\n \nFunctor\n<\nR\n>\n \nf\n(\nFunction\n<\nT\n,\nR\n>\n \nfunc\n);\n\n\n}\n\n\n\n\n\n\n\nIn \nCompletableFuture\n, the method that makes \nCompletableFuture\n a functor is the \nthenApply\n method:\n\n\n1\n<\nU\n>\n \nCompletableFuture\n<\nU\n>\n \nthenApply\n(\nFunction\n<?\n \nsuper\n \nT\n,\n?\n \nextends\n \nU\n>\n \nfunc\n)\n\n\n\n\n\n\n\nThe method \nthenApply\n is similar to \nthenAccept\n, except that instead of a \nConsumer\n, the callback that gets invoked when the asynchronous task completes is a `Function.  \n\n\nThere are other variations: \n\n\n\n\nthenRun\n, which takes a \nRunnable\n, \n\n\nthenAcceptBoth\n, which takes a \nBiConsumer\n and another \nCompletableFuture\n\n\nthenCombine\n, which takes a \nBiFunction\n and another \nCompletableFuture\n \n\n\nthenCompose\n, which takes in a \nFunction\n \nfn\n, which instead of returning a \"plain\" type, \nfn\n returns a \nCompletableFuture\n. \n\n\n\n\nAll the methods above return a \nCompletableFuture\n.\n\n\nBTW, \nCompletableFuture\n is a monad too!  The \nthenCompose\n method is analougous to the \nflatMap\n method of \nStream\n and \nOptional\n. \n\n\nThis also means that \nCompletableFuture\n satisfies the monad laws, one of which is that there is a method to wrap a value around with a \nCompletableFuture\n.  We call this the \nof\n method in the context of \nStream\n and \nOptional\n, but in \nCompletableFuture\n, it is called \ncompletedFuture\n.\n\n\nBeing a functor and a monad, \nCompletableFuture\n objects can be chained together, just like \nStream\n and \nOptional\n.  We can write code like this:\n\n\n1\n2\n3\n4\n5\n6\nCompletableFuture\n\n    \n.\ncompletedFuture\n(\nMatrix\n.\ngenerate\n(\nnRows\n,\n \nnCols\n,\n \nrng\n::\nnextDouble\n))\n\n    \n.\nthenApply\n(\nm\n \n->\n \nm\n.\nmultiply\n(\nm1\n))\n\n    \n.\nthenApply\n(\nm\n \n->\n \nm\n.\nadd\n(\nm2\n))\n\n    \n.\nthenApply\n(\nm\n \n->\n \nm\n.\ntranspose\n)\n\n    \n.\nthenAccept\n(\nSystem\n.\nout\n::\nprintln\n);\n\n\n\n\n\n\n\nAnother example:\n\n\n1\n2\n3\n4\n5\n6\nCompletableFuture\n \nleft\n \n=\n \nCompletableFuture\n\n    \n.\nsupplyAsync\n(()\n \n->\n \na1\n.\nmultiply\n(\nb1\n));\n\n\nCompletableFuture\n \nright\n \n=\n \nCompletableFuture\n\n    \n.\nsupplyAsync\n(()\n \n->\n \na2\n.\nmultiply\n(\nb2\n))\n\n    \n.\nthenCombine\n(\nleft\n,\n \n(\nm1\n,\n \nm2\n)\n \n->\n \nm1\n.\nadd\n(\nm2\n));\n\n    \n.\nthenAccept\n(\nSystem\n.\nout\n::\nprintln\n);\n\n\n\n\n\n\n\nSimilar to \nStream\n, some of the methods are terminal (e.g., \nthenRun\n, \nthenAccept\n), and some are intermediate (\nthenApply\n).\n\n\nVariations\n\n\n\n\n\n\nThere are variations of methods with name containing the word \nEither\n or \nBoth\n, taking in another \nCompletableFuture\n.  These methods invoke the given \nFunction\n/\nRunnable\n/\nConsumer\n when either one (for \nEither\n) or both (for \nBoth\n) of the \nCompletableFuture\n completes.\n\n\n\n\n\n\nThere are variations of methods with name ending with the word \nAsync\n.  These methods are called asynchronously in another thread\n\n\n\n\n\n\nFor example, \nrunAfterBothAsync(future, task)\n would run \ntask\n only after \nthis\n and given \nfuture\n is completed.\n\n\nOther features of \nCompletableFuture\n include:\n\n\n\n\n\n\nSome methods take in additional \nExecutor\n parameter, for cases where running in the default \nForkJoinPool\n is not good enough.\n\n\n\n\n\n\nSome methods takes in additional \nThrowable\n parameter, for cases where earlier calls might throw an exception.\n\n\n\n\n\n\nThe \ntable\n by Nicolas Hofstetter neatly summarizes all the methods available.  As you can see, the API is quite extensive (bloated?).\n\n\nHandling Exceptions\n\n\nHandling exceptions is non-trivial for asynchronous methods.  Remember that, in synchronous method calls, the exceptions are repeatedly thrown to the caller up the call stack, until someone catches the exception.  For asynchronous calls, it is not so obvious.  For instance, should we put a catch around \nfork()\n or around \njoin()\n?  A \nForkJoinTask\n doesn't handle exception with catch, but instead requires us to check for \nisCompletedAbnormally\n and then call \ngetException\n to get the exception thrown.\n\n\nAs \nCompletableFuture\n allows chaining, it provides a cleaner way to pass exceptions from one call to the next.  The terminal operation \nwhenComplete\n takes in a \nBiConsumer\n as parameter -- the first argument to the \nBiConsumer\n is the result from previous chain (or \nnull\n if exception thrown); the second argument is an exception (null if completes normally).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nCompletableFuture\n\n    \n.\ncompletedFuture\n(\nMatrix\n.\ngenerate\n(\nnRows\n,\n \nnCols\n,\n \nrng\n::\nnextDouble\n))\n\n    \n.\nthenApply\n(\nm\n \n->\n \nm\n.\nmultiply\n(\nm\n))\n\n    \n.\nwhenComplete\n((\nresult\n,\n \nexception\n)\n \n->\n \n{\n\n        \nif\n \n(\nexception\n)\n \n{\n \n            \nSystem\n.\nerr\n.\nprintln\n(\nexception\n);\n\n        \n}\n \nelse\n \n{\n\n            \nSystem\n.\nout\n.\nprint\n(\nresult\n);\n\n        \n}\n\n    \n}\n\n\n\n\n\n\nwhenComplete\n returns a CompletableFuture, surprisingly, despite it taking in a \nBiConsumer\n -- in a sense, \nwhenComplete\n is more similar to \npeek\n rather than \nforEach\n.\n\n\nhandle\n is similar to \nwhenComplete\n, but takes in a \nBiFunction\n instead of a \nBiConsumer\n, thus allowing the result or exception to be transformed. \n\n\nFinally, \nexceptionally\n handles exception by replacing a thrown exception with a value, similar to \norElse\n in \nOptional\n.\n\n\n1\n2\n3\n4\nCompletableFuture\n\n    \n.\ncompletedFuture\n(\nMatrix\n.\ngenerate\n(\nnRows\n,\n \nnCols\n,\n \nrng\n::\nnextDouble\n))\n\n    \n.\nthenApply\n(\nm\n \n->\n \nm\n.\nmultiply\n(\nm\n))\n\n    \n.\nexceptionally\n(\nMatrix\n.\ngenerate\n(\nnRows\n,\n \nnCols\n,\n \n()->\n0\n);\n\n\n\n\n\n\n\n\n\nPromise\n\n\nCompletableFuture\n is similar to \nPromise\n in other languages, notably JavaScript and C++ (\nstd::promise\n).\n\n\n\n\n\n\nCompletionStage\n\n\nIn Java, \nCompletableFuture\n also implements a \nCompletionStage\n interface.  Thus, you will find references to this interface in many places in the Java documentation.  I find this name unintuitive and makes an already-confusing java documentation even harder to read.",
            "title": "11. Asynchronous Programming"
        },
        {
            "location": "/lec11/index.html#learning-objectives",
            "text": "After this lecture, students should:   familiar with the concept of asynchronous method calls and be able to use it effectively  familiar with the concept of promise through Java 8  CompletableFuture  class",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec11/index.html#synchronous-vs-asynchronous",
            "text": "In synchronous programming, when we call a method, we expect the method to be executed, and when the method returns, the result of the method is available.  1\n2\n3\n4\n5 int   multiple ( int   x ,   int   y )   { \n     return   x   *   y ;  }  int   z   =   multiple ( 3 ,   4 );    In the simple example above, our code continues executing after, and only after  add()  completes.  If a method takes a long time to run, however, the execution will delay the execution of subsequent methods, and maybe undesirable.  Asynchronous call to a method allows execution to continue immediately after calling the method, so that we can continue executing the rest of our code, while the long-running method is off doing its job.  You have seen examples of asynchronous calls:   1\n2      task   =   new   MatrixMultiplyerTask ( m1 ,   m2 ); \n     task . fork ();    The call above returns immediately even before the matrix multiplication is complete.  We can later return to this task, and call  task.join()  to get the result (waiting for it if necessary).    A  RecursiveTask  also has a  isDone()  method that it implements as part of the  Future  interface.  Now, we can do something like this:  1\n2\n3\n4\n5\n6\n7      task   =   new   MatrixMultiplyerTask ( m1 ,   m2 ); \n     task . fork (); \n     while   (! task . isDone ())   { \n         System . out . print ( \".\" ); \n         Thread . sleep ( 1000 ); \n     } \n     System . out . print ( \"done\" );    So, while the task is running, we can print out a series of \".\"s to feedback to the users to indicate that it is running.  Thread.sleep(1000)  cause the current running thread to sleep for 1s.  It might throw an  InterruptedException , if the user interrupts the program (by Control-C).  To complete the snippet, we should catch the exception and cancel the task.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12      task   =   new   MatrixMultiplyerTask ( m1 ,   m2 ); \n     task . fork (); \n     try   { \n         while   (! task . isDone ())   { \n             System . out . print ( \".\" ); \n             Thread . sleep ( 1000 ); \n         } \n         System . out . println ( \"done\" ); \n     }   catch   ( InterruptedException   e )   { \n         task . cancel (); \n         System . out . println ( \"cancelled\" ); \n     }",
            "title": "Synchronous vs. Asynchronous"
        },
        {
            "location": "/lec11/index.html#future",
            "text": "Let's look at the  Future  interface a bit more.   Future<T>  represents the result (of type  T ) of an asynchronous task that may not be available yet.  It has five simple operations:   get()  returns the result of the computation (waiting for it if needed).  get(timeout, unit)  returns the result of the computation (waiting for up to the timeout period if needed).  cancel(interrupt)  tries to cancel the task -- if  interrupt  is true, cancel even if the task has started.  Otherwise, cancel only if the task is still waiting to get started.  isCancelled()  returns  true  of the task has been cancelled.  isDone()  returns  true  if the task has been completed.   Both  RecursiveTask  and  RecursiveAction  implements the  Future  interface, so you can use the above methods on your tasks.   In Other Languages  Scala's  Future  is more powerful -- it allows us to specify what to do when the task completes, and it hands abnormal completions (e.g., exceptions). \n    Python 3.2 supports  Future  through  concurrent.futures  module.  C++11 supports  std::future ]( http://en.cppreference.com/w/cpp/thread/future ) as well.",
            "title": "Future"
        },
        {
            "location": "/lec11/index.html#completablefuture",
            "text": "The example code above tries every second to see if task is done.  For some applications, the response time is critical, and we would like to know as soon as a task is done.  For instance, response time is important in stock trading applications and web services.    One way to do so, is to sleep for a shorter duration.  Or even not sleeping all together:  1\n2\n3\n4\n5      task . fork (); \n     while   (! task . isDone ())   { \n         System . out . print ( \".\" ); \n     } \n     System . out . print ( \"done\" );    This is problematic in many ways, besides printing out too many dots:   this is known as  busy waiting  -- and it occupies the CPU while doing nothing.  Such code should be avoided at all cost.   we may want to continue doing other things besides printing out \".\"s, so the code won't be a simple for loop anymore.  We can do something like this instead:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16      task . fork (); \n     if   (! task . isDone ())   { \n         // do something \n     }   else   { \n         task . join (); \n     } \n     if   (! task . isDone ())   { \n         // do something else \n     }   else   { \n         task . join (); \n     } \n     if   (! task . isDone ())   { \n         // do yet something else \n     }   else   { \n         task . join (); \n     }    You can see that the code gets out of hand quickly, and this is only if we have one asynchronous call!  What we need is have a way to specify a  callback .  A callback is basically a method that will be executed when a certain event happens.  In this case, we need to specify a callback when an asynchronous task is complete.  This way, we can just call an asynchronous task, specify what to do when the task is completed, and forget about it.  We do not need to check again and again if the task is done.  Java 8 introduces the class  CompletableFuture , which implements the  Future  interface, and allows us to specify an asynchronous task, and an action to perform when the task completes.  To create a  CompletableFuture  object, we can call one of its static method.  For instance,  supplyAsync  takes in a  Supplier :  1 CompletableFuture < Matrix >   future   =   CompletableFuture . supplyAsync (()   ->   m1 . multiply ( m2 ));    To specify the callback, we can use the  thenAccept  method, which takes in a consumer:  1 future . thenAccept ( System . out :: println );    Or, you can use the oneliner:  1\n2\n3 CompletableFuture \n     . supplyAsync (()   ->   m1 . multiply ( m2 )) \n     . thenAccept ( System . out :: println );",
            "title": "CompletableFuture"
        },
        {
            "location": "/lec11/index.html#completablefuture-is-a-functor-monad",
            "text": "CompletableFuture  is a functor.  Recall that a functor, in OO-speak, is a class that implements a (hypothetical) interface that looks like the following:  1\n2\n3 interface   Functor < T >   { \n   public   < R >   Functor < R >   f ( Function < T , R >   func );  }    In  CompletableFuture , the method that makes  CompletableFuture  a functor is the  thenApply  method:  1 < U >   CompletableFuture < U >   thenApply ( Function <?   super   T , ?   extends   U >   func )    The method  thenApply  is similar to  thenAccept , except that instead of a  Consumer , the callback that gets invoked when the asynchronous task completes is a `Function.    There are other variations:    thenRun , which takes a  Runnable ,   thenAcceptBoth , which takes a  BiConsumer  and another  CompletableFuture  thenCombine , which takes a  BiFunction  and another  CompletableFuture    thenCompose , which takes in a  Function   fn , which instead of returning a \"plain\" type,  fn  returns a  CompletableFuture .    All the methods above return a  CompletableFuture .  BTW,  CompletableFuture  is a monad too!  The  thenCompose  method is analougous to the  flatMap  method of  Stream  and  Optional .   This also means that  CompletableFuture  satisfies the monad laws, one of which is that there is a method to wrap a value around with a  CompletableFuture .  We call this the  of  method in the context of  Stream  and  Optional , but in  CompletableFuture , it is called  completedFuture .  Being a functor and a monad,  CompletableFuture  objects can be chained together, just like  Stream  and  Optional .  We can write code like this:  1\n2\n3\n4\n5\n6 CompletableFuture \n     . completedFuture ( Matrix . generate ( nRows ,   nCols ,   rng :: nextDouble )) \n     . thenApply ( m   ->   m . multiply ( m1 )) \n     . thenApply ( m   ->   m . add ( m2 )) \n     . thenApply ( m   ->   m . transpose ) \n     . thenAccept ( System . out :: println );    Another example:  1\n2\n3\n4\n5\n6 CompletableFuture   left   =   CompletableFuture \n     . supplyAsync (()   ->   a1 . multiply ( b1 ));  CompletableFuture   right   =   CompletableFuture \n     . supplyAsync (()   ->   a2 . multiply ( b2 )) \n     . thenCombine ( left ,   ( m1 ,   m2 )   ->   m1 . add ( m2 )); \n     . thenAccept ( System . out :: println );    Similar to  Stream , some of the methods are terminal (e.g.,  thenRun ,  thenAccept ), and some are intermediate ( thenApply ).",
            "title": "CompletableFuture is a Functor / Monad"
        },
        {
            "location": "/lec11/index.html#variations",
            "text": "There are variations of methods with name containing the word  Either  or  Both , taking in another  CompletableFuture .  These methods invoke the given  Function / Runnable / Consumer  when either one (for  Either ) or both (for  Both ) of the  CompletableFuture  completes.    There are variations of methods with name ending with the word  Async .  These methods are called asynchronously in another thread    For example,  runAfterBothAsync(future, task)  would run  task  only after  this  and given  future  is completed.  Other features of  CompletableFuture  include:    Some methods take in additional  Executor  parameter, for cases where running in the default  ForkJoinPool  is not good enough.    Some methods takes in additional  Throwable  parameter, for cases where earlier calls might throw an exception.    The  table  by Nicolas Hofstetter neatly summarizes all the methods available.  As you can see, the API is quite extensive (bloated?).",
            "title": "Variations"
        },
        {
            "location": "/lec11/index.html#handling-exceptions",
            "text": "Handling exceptions is non-trivial for asynchronous methods.  Remember that, in synchronous method calls, the exceptions are repeatedly thrown to the caller up the call stack, until someone catches the exception.  For asynchronous calls, it is not so obvious.  For instance, should we put a catch around  fork()  or around  join() ?  A  ForkJoinTask  doesn't handle exception with catch, but instead requires us to check for  isCompletedAbnormally  and then call  getException  to get the exception thrown.  As  CompletableFuture  allows chaining, it provides a cleaner way to pass exceptions from one call to the next.  The terminal operation  whenComplete  takes in a  BiConsumer  as parameter -- the first argument to the  BiConsumer  is the result from previous chain (or  null  if exception thrown); the second argument is an exception (null if completes normally).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 CompletableFuture \n     . completedFuture ( Matrix . generate ( nRows ,   nCols ,   rng :: nextDouble )) \n     . thenApply ( m   ->   m . multiply ( m )) \n     . whenComplete (( result ,   exception )   ->   { \n         if   ( exception )   {  \n             System . err . println ( exception ); \n         }   else   { \n             System . out . print ( result ); \n         } \n     }    whenComplete  returns a CompletableFuture, surprisingly, despite it taking in a  BiConsumer  -- in a sense,  whenComplete  is more similar to  peek  rather than  forEach .  handle  is similar to  whenComplete , but takes in a  BiFunction  instead of a  BiConsumer , thus allowing the result or exception to be transformed.   Finally,  exceptionally  handles exception by replacing a thrown exception with a value, similar to  orElse  in  Optional .  1\n2\n3\n4 CompletableFuture \n     . completedFuture ( Matrix . generate ( nRows ,   nCols ,   rng :: nextDouble )) \n     . thenApply ( m   ->   m . multiply ( m )) \n     . exceptionally ( Matrix . generate ( nRows ,   nCols ,   ()-> 0 );     Promise  CompletableFuture  is similar to  Promise  in other languages, notably JavaScript and C++ ( std::promise ).    CompletionStage  In Java,  CompletableFuture  also implements a  CompletionStage  interface.  Thus, you will find references to this interface in many places in the Java documentation.  I find this name unintuitive and makes an already-confusing java documentation even harder to read.",
            "title": "Handling Exceptions"
        },
        {
            "location": "/exercise1/index.html",
            "text": "Exercise 1\n\n\nThis is an ungraded, optional exercise.\n\n\nIn the example from Lecture 1, we implemented a class \nCircle\n.  There, we store and pass around two \ndouble\n variables that corresponds to the x-coordinate and y-coordinate of a point.  The code would be neater if we create a second class \nPoint\n that encapsulates the concept of a point on 2D plane and the operations on points.\n\n\nImplement a new class \nPoint\n and modify the class \nCircle\n to use the class \nPoint\n.  Pay attention to what methods and fields (if any) you expose as \npublic\n outside of the abstraction barrier of a \nPoint\n object.\n\n\nYou will need to use \njshell\n from Java 1.9 (or JDK 9) to interact with your new classes.",
            "title": "1. Circles & Points"
        },
        {
            "location": "/exercise1/index.html#exercise-1",
            "text": "This is an ungraded, optional exercise.  In the example from Lecture 1, we implemented a class  Circle .  There, we store and pass around two  double  variables that corresponds to the x-coordinate and y-coordinate of a point.  The code would be neater if we create a second class  Point  that encapsulates the concept of a point on 2D plane and the operations on points.  Implement a new class  Point  and modify the class  Circle  to use the class  Point .  Pay attention to what methods and fields (if any) you expose as  public  outside of the abstraction barrier of a  Point  object.  You will need to use  jshell  from Java 1.9 (or JDK 9) to interact with your new classes.",
            "title": "Exercise 1"
        },
        {
            "location": "/exercise2/index.html",
            "text": "Exercise 2\n\n\nThis is an ungraded, optional exercise.\n\n\nIn the example from Lecture 2, we implemented a class \nCircle\n that implements two interfaces \nGeometricShape\n and \nPrintable\n.  For this exercise,\n\n\n\n\n\n\nImplement another class \nSquare\n that implements the two interfaces.  You may have to extend the class \nPoint\n you wrote for Exercise 1 to implement the methods in Square.\n\n\n\n\n\n\nImplement another class \nPaintedSquare\n that implements the two interfaces and inherits from \nPaintedShape\n.\n\n\n\n\n\n\nImplement the methods \nequals()\n in \nSquare\n, overriding the two methods in the \nObject\n class, so that \nequals()\n semantically compare two \nSquare\n objects.",
            "title": "2. Square & PaintedSquare"
        },
        {
            "location": "/exercise2/index.html#exercise-2",
            "text": "This is an ungraded, optional exercise.  In the example from Lecture 2, we implemented a class  Circle  that implements two interfaces  GeometricShape  and  Printable .  For this exercise,    Implement another class  Square  that implements the two interfaces.  You may have to extend the class  Point  you wrote for Exercise 1 to implement the methods in Square.    Implement another class  PaintedSquare  that implements the two interfaces and inherits from  PaintedShape .    Implement the methods  equals()  in  Square , overriding the two methods in the  Object  class, so that  equals()  semantically compare two  Square  objects.",
            "title": "Exercise 2"
        },
        {
            "location": "/exercise3/index.html",
            "text": "Exercise 3\n\n\nThis is an ungraded, optional exercise.\n\n\nIn Exercise 2, you used inheritance to implement \nPaintedSquare\n.   Redo this implementation using composition instead of inheritance.\n\n\n.\n\n\n.\n\n\n.\n\n\n.\n\n\n.\n\n\n.",
            "title": "3. PaintedSquare Revisited"
        },
        {
            "location": "/exercise3/index.html#exercise-3",
            "text": "This is an ungraded, optional exercise.  In Exercise 2, you used inheritance to implement  PaintedSquare .   Redo this implementation using composition instead of inheritance.  .  .  .  .  .  .",
            "title": "Exercise 3"
        },
        {
            "location": "/exercise4/index.html",
            "text": "Exercise 4\n\n\nIn your lab 1, we assume that the input file is always in the correct format.\n\n\nNow, change \nMaxDiscCover\n so that the \nreadPoints()\n method no longer assume this.  You should use exceptions to handles the possible errors when reading the points from \nSystem.in\n.",
            "title": "4. Exceptions"
        },
        {
            "location": "/exercise4/index.html#exercise-4",
            "text": "In your lab 1, we assume that the input file is always in the correct format.  Now, change  MaxDiscCover  so that the  readPoints()  method no longer assume this.  You should use exceptions to handles the possible errors when reading the points from  System.in .",
            "title": "Exercise 4"
        },
        {
            "location": "/exercise5/index.html",
            "text": "Exercise 5\n\n\nSolve each of this problem using Java 9 streams.  We will discuss the solutions at the beginning of Lab 7.\n\n\n\n\n\n\n\n\n\n\nWrite a method \nfactors\n with signature \nLongStream factors(long x)\n that takes in an \nlong x\n and return an \nLongStream\n consisting of the factors of \nx\n.  For instance, factors(6) should return the stream 1, 2, 3, 6.\n\n\n\n\n\n\nWrite a method \nprimeFactors\n with signature \nLongStream primeFactors(long x)\n that takes in an \nlong x\n and return an \nLongStream\n consisting of the prime factors of \nx\n (a prime factor is a factor that is a prime number, excluding 1).  For instance, prime factors of 6 is 2 and 3.\n\n\n\n\n\n\nWrite a method \nomega\n with signature \nLongStream omega(int n)\n that takes in an \nint n\n and return a \nLongStream\n containing the first \n\\(n\\)\n \nomega numbers\n.  The \n\\(i\\)\n-th omega number is the number of distinct prime factors for the number \n\\(i\\)\n.  The first 10 omega numbers are 0, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1.\n\n\n\n\n\n\n\n\n\n\nWrite a method \nproduct\n that takes in two \nList\n objects \nlist1\n and \nlist2\n, and produce a \nStream\n containing elements combining each element from \nlist1\n with every element from \nlist2\n using a given \nBiFunction\n.  This operation is similar to a Cartesian product.\n\n\nFor instance,\n\n\n1\n2\n3\n4\n5\n6\nArrayList\n<\nInteger\n>\n \nlist1\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nArrayList\n<\nInteger\n>\n \nlist2\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nCollections\n.\naddAll\n(\nlist1\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n);\n\n\nCollections\n.\naddAll\n(\nlist2\n,\n \n10\n,\n \n20\n);\n\n\nproduct\n(\nlist1\n,\n \nlist2\n,\n \n(\nstr1\n,\n \nstr2\n)\n \n->\n \nstr1\n \n+\n \nstr2\n)\n\n    \n.\nforEach\n(\nSystem\n.\nout\n::\nprintln\n);\n\n\n\n\n\n\n\ngives the output:\n\n1\n2\n3\n4\n5\n6\n7\n8\n11\n21\n12\n22\n13\n23\n14\n24\n\n\n\n\n\nThe signature for \nproduct\n is\n\n1\n2\n  \npublic\n \nstatic\n \n<\nT\n,\nU\n,\nR\n>\n \nStream\n<\nR\n>\n \nproduct\n(\nList\n<\nT\n>\n \nlist1\n,\n \nList\n<\nU\n>\n \nlist2\n,\n \n      \nBiFunction\n<?\n \nsuper\n \nT\n,\n \n?\n \nsuper\n \nU\n,\n \nR\n>\n \nf\n)\n\n\n\n\n\n\n\n\n\n\nWrite a method that returns the first \n\\(n\\)\n Fibonacci numbers as a \nStream<BigInteger>\n.  For instance, the first 10 Fibonacci numbers are 1, 1, 2, 3, 5, 8, 13, 21, 34, 55.  It would be useful to write a new \nPair<T, U>\n class that keeps two items around in the stream.  We use the \nBigInteger\n class to avoid overflow.",
            "title": "5. Streams"
        },
        {
            "location": "/exercise5/index.html#exercise-5",
            "text": "Solve each of this problem using Java 9 streams.  We will discuss the solutions at the beginning of Lab 7.      Write a method  factors  with signature  LongStream factors(long x)  that takes in an  long x  and return an  LongStream  consisting of the factors of  x .  For instance, factors(6) should return the stream 1, 2, 3, 6.    Write a method  primeFactors  with signature  LongStream primeFactors(long x)  that takes in an  long x  and return an  LongStream  consisting of the prime factors of  x  (a prime factor is a factor that is a prime number, excluding 1).  For instance, prime factors of 6 is 2 and 3.    Write a method  omega  with signature  LongStream omega(int n)  that takes in an  int n  and return a  LongStream  containing the first  \\(n\\)   omega numbers .  The  \\(i\\) -th omega number is the number of distinct prime factors for the number  \\(i\\) .  The first 10 omega numbers are 0, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1.      Write a method  product  that takes in two  List  objects  list1  and  list2 , and produce a  Stream  containing elements combining each element from  list1  with every element from  list2  using a given  BiFunction .  This operation is similar to a Cartesian product.  For instance,  1\n2\n3\n4\n5\n6 ArrayList < Integer >   list1   =   new   ArrayList <>();  ArrayList < Integer >   list2   =   new   ArrayList <>();  Collections . addAll ( list1 ,   1 ,   2 ,   3 ,   4 );  Collections . addAll ( list2 ,   10 ,   20 );  product ( list1 ,   list2 ,   ( str1 ,   str2 )   ->   str1   +   str2 ) \n     . forEach ( System . out :: println );    gives the output: 1\n2\n3\n4\n5\n6\n7\n8 11\n21\n12\n22\n13\n23\n14\n24   The signature for  product  is 1\n2    public   static   < T , U , R >   Stream < R >   product ( List < T >   list1 ,   List < U >   list2 ,  \n       BiFunction <?   super   T ,   ?   super   U ,   R >   f )      Write a method that returns the first  \\(n\\)  Fibonacci numbers as a  Stream<BigInteger> .  For instance, the first 10 Fibonacci numbers are 1, 1, 2, 3, 5, 8, 13, 21, 34, 55.  It would be useful to write a new  Pair<T, U>  class that keeps two items around in the stream.  We use the  BigInteger  class to avoid overflow.",
            "title": "Exercise 5"
        },
        {
            "location": "/exercise6/index.html",
            "text": "Exercise 6\n\n\nThis is an ungraded exercise.\n\n\n\n\n\n\nImplement the \nmap\n method of \nOptional\n:\n\n\n1\n2\n3\npublic\n<\nU\n>\n \nOptional\n<\nU\n>\n \nmap\n(\nFunction\n<?\n \nsuper\n \nT\n,\n \n?\n \nextends\n \nU\n>\n \nmapper\n)\n \n{\n\n     \n:\n\n\n}\n\n\n\n\n\n\n\nConvince yourself it is a functor.\n\n\n\n\n\n\nImplement a collector that takes in a stream of doubles and return the average value. \n\n\nShow the supplier, accumulator, combiner, and finisher methods.",
            "title": "6. Functors, Collectors"
        },
        {
            "location": "/exercise6/index.html#exercise-6",
            "text": "This is an ungraded exercise.    Implement the  map  method of  Optional :  1\n2\n3 public < U >   Optional < U >   map ( Function <?   super   T ,   ?   extends   U >   mapper )   { \n      :  }    Convince yourself it is a functor.    Implement a collector that takes in a stream of doubles and return the average value.   Show the supplier, accumulator, combiner, and finisher methods.",
            "title": "Exercise 6"
        },
        {
            "location": "/exercise7/index.html",
            "text": "Exercise 7\n\n\nHere are some exercises to get ready for the final exam.  They are rejected ideas for final exam questions :)\n\n\nQuestion 1: Infinite lists\n\n\nImplement a method called \ninterleave\n that takes in two \nInfiniteList<T>\n objects, and produce another \nInfiniteList<T>\n with elements in the two lists interleave.\n\n\nFor instance,\n\n\n1\n2\n3\nlist1 = InfiniteList.generate(() -> 1);\nlist2 = InfiniteList.generate(() -> 2);\ninterleave(list1, list2).limit(6).toArray(); // returns [1, 2, 1, 2, 1, 2]\n\n\n\n\n\n\nThe method \ninterleave\n must be lazily evaluated.  You can assume that the constructor\n\n\n1\nInfiniteList<T>(Supplier<T> headSupplier, Supplier<InfiniteList<T>> tailSupplier)\n\n\n\n\n\n\nis available.\n\n\nQuestion 2: Completable future\n\n\na()\n, \nb()\n, and \nc()\n are three methods that takes in no arguments and returns nothing (void).  We want to run them asynchronously, such that \na()\n and \nb()\n run first, in any order, concurrently.  But \nc()\n can only run after either one of \na()\n or \nb()\n completes.\n\n\nUsing the class \nCompletableFuture\n, write snippets of code to show how this can be done.  The \nAPIs for \nCompletableFuture\n is provided\n\n\nQuestion 3: Lambdas\n\n\nJava implements lambda expressions as anonymous classes.  Suppose we have the following lambda expression \nFunction<String,Integer>\n:\n\n\n1\nstr -> str.indexOf(' ')\n\n\n\n\n\n\nWrite the equivalent anonymous class for the expression above.\n\n\nQuestion 4: Currying\n\n\nConsider the lambda expression:\n\n\n1\nx -> y -> z -> f(x,y,z)\n\n\n\n\n\n\nwhere \nx\n, \ny\n, \nz\n are of some type \nT\n and \nf\n returns a value of type \nR\n.\n\n\n(a) What is the type of the lambda expression above?\n\n\n(b) Suppose that the lambda expression above is assigned to a variable \nexp\n.  Given three variables \nx\n, \ny\n, and \nz\n, show how you can evaluate the lambda expression with \nx\n, \ny\n, \nz\n to obtain \nf(x,y,z)\n.\n\n\nQuestion 5: Functor/Monad Laws\n\n\nSuppose we have a snippet of code as follows, \n\n\n1\n2\n  Double d = foo(i);\n  String s = bar(d);\n\n\n\n\n\n\nWe can write it either as:\n\n\n1\nstream.map(i -> foo(i)).map(d -> bar(d));\n\n\n\n\n\n\nor \n\n\n1\nstream.map(i -> bar(foo(i)))\n\n\n\n\n\n\nWe can be assured that the expressions above are the same because stream is a functor.  Why?  Explain by indicating which law ensures the behavior above is true.\n\n\nQuestion 6: Bad Practices\n\n\nEach of the following code illusrates a very bad programming practice.  For each, comments on why it is bad.\n\n\n(a) \"Pokemon Catch\" \n\n\n1\n2\n3\n4\n5\n    \ntry\n \n{\n\n        \ndoSomething\n();\n\n    \n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n\n    \n}\n\n\n\n\n\n\n\n(b) Switching between strings\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n   \nswitch\n(\ncustomer\n.\ngetType\n())\n \n{\n\n     \ncase\n \n\"Kiasu\"\n:\n \n       \njoinQueueKiasu\n();\n\n     \ncase\n \n\"Pioneer\"\n:\n \n       \njoinQueuePioneer\n();\n\n     \ndefault\n:\n\n       \njoinQueueRegular\n();\n\n   \n}\n \n\n\n\n\n\n\n\u00a9 \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nvoid\n \ngetCustomerType\n()\n \n{\n\n  \nif\n \n(\ncustomer\n.\nisPioneer\n())\n \n{\n\n    \nthrow\n \nnew\n \nPioneerCustomerException\n();\n\n  \n}\n \nelse\n \nif\n \n(\ncustomer\n.\nisKiasu\n())\n \n{\n\n    \nthrow\n \nnew\n \nKiasuCustomerException\n();\n\n  \n}\n\n\n}\n\n\n  \n:\n\n  \n:\n\n\n\ntry\n \n{\n\n  \ngetCustomerType\n();\n\n  \njoinQueueRegular\n();\n\n\n}\n \ncatch\n \n(\nPioneerCustomerException\n \ne\n)\n \n{\n\n  \njoinQueuePioneer\n();\n\n\n}\n \ncatch\n \n(\nKiasuCustomerException\n \ne\n)\n \n{\n\n  \njoinQueueKiasu\n();\n\n\n}\n\n\n\n\n\n\n\n(d)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n// customers, servers, queues are arrays of Customer, \n\n\n// Server, and Queue respectively.\n\n\nCustomer\n[]\n \ncustomers\n;\n\n\nServer\n[]\n \nservers\n;\n\n\nQueue\n[]\n \nqueues\n;\n\n  \n:\n\n  \n:\n\n\n\nvoid\n \nhandleCustomer\n(\nint\n \nq\n,\n \nint\n \ns\n,\n \nint\n \nc\n)\n \n{\n\n  \n// if servers[s] is busy, add customers[c] into queues[q]\n\n  \n// otherwise servers[s] serves customers[c]\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nQuestion 7: Ask, Don't Tell\n\n\nSuggest how we can improve the design of the classes below.  Only relevant part of the code are shown for brevity.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\nclass\n \nLabSubmission\n \n{\n\n  \nprivate\n \nStudent\n \ns\n;\n\n  \nprivate\n \nint\n \nmarks\n;\n\n\n  \npublic\n \nStudent\n \ngetStudent\n()\n \n{\n\n    \nreturn\n \ns\n;\n\n  \n}\n\n\n  \npublic\n \nint\n \ngetMarks\n()\n \n{\n\n    \nreturn\n \nmarks\n;\n\n  \n}\n\n\n    \n:\n\n    \n:\n\n\n}\n\n\n\nclass\n \nGradebook\n \n{\n\n  \nList\n<\nLabSubmission\n>\n \nsubmissions\n;\n\n\n  \nvoid\n \nprint\n()\n \n{\n\n    \nfor\n \n(\nLabSubmission\n \ns\n \n:\n \nsubmissions\n)\n \n{\n\n      \nif\n \n(\ns\n.\ngetMarks\n()\n \n>\n \n3\n)\n \n{\n\n        \nSystem\n.\nout\n.\nprintf\n(\ns\n.\ngetStudent\n()\n \n+\n \n\" A\"\n);\n\n      \n}\n \nelse\n \nif\n \n(\ns\n.\ngetMarks\n()\n \n>\n \n2\n)\n \n{\n\n        \nSystem\n.\nout\n.\nprintf\n(\ns\n.\ngetStudent\n()\n \n+\n \n\" B\"\n);\n\n      \n}\n \nelse\n \nif\n \n(\ns\n.\ngetMarks\n()\n \n>\n \n1\n)\n \n{\n\n        \nSystem\n.\nout\n.\nprintf\n(\ns\n.\ngetStudent\n()\n \n+\n \n\" C\"\n);\n\n      \n}\n \nelse\n \n{\n\n        \nSystem\n.\nout\n.\nprintf\n(\ns\n.\ngetStudent\n()\n \n+\n \n\" D\"\n);\n\n      \n}\n\n    \n}\n\n  \n}\n\n\n}",
            "title": "7. Mock Exam"
        },
        {
            "location": "/exercise7/index.html#exercise-7",
            "text": "Here are some exercises to get ready for the final exam.  They are rejected ideas for final exam questions :)",
            "title": "Exercise 7"
        },
        {
            "location": "/exercise7/index.html#question-1-infinite-lists",
            "text": "Implement a method called  interleave  that takes in two  InfiniteList<T>  objects, and produce another  InfiniteList<T>  with elements in the two lists interleave.  For instance,  1\n2\n3 list1 = InfiniteList.generate(() -> 1);\nlist2 = InfiniteList.generate(() -> 2);\ninterleave(list1, list2).limit(6).toArray(); // returns [1, 2, 1, 2, 1, 2]   The method  interleave  must be lazily evaluated.  You can assume that the constructor  1 InfiniteList<T>(Supplier<T> headSupplier, Supplier<InfiniteList<T>> tailSupplier)   is available.",
            "title": "Question 1: Infinite lists"
        },
        {
            "location": "/exercise7/index.html#question-2-completable-future",
            "text": "a() ,  b() , and  c()  are three methods that takes in no arguments and returns nothing (void).  We want to run them asynchronously, such that  a()  and  b()  run first, in any order, concurrently.  But  c()  can only run after either one of  a()  or  b()  completes.  Using the class  CompletableFuture , write snippets of code to show how this can be done.  The  APIs for  CompletableFuture  is provided",
            "title": "Question 2: Completable future"
        },
        {
            "location": "/exercise7/index.html#question-3-lambdas",
            "text": "Java implements lambda expressions as anonymous classes.  Suppose we have the following lambda expression  Function<String,Integer> :  1 str -> str.indexOf(' ')   Write the equivalent anonymous class for the expression above.",
            "title": "Question 3: Lambdas"
        },
        {
            "location": "/exercise7/index.html#question-4-currying",
            "text": "Consider the lambda expression:  1 x -> y -> z -> f(x,y,z)   where  x ,  y ,  z  are of some type  T  and  f  returns a value of type  R .  (a) What is the type of the lambda expression above?  (b) Suppose that the lambda expression above is assigned to a variable  exp .  Given three variables  x ,  y , and  z , show how you can evaluate the lambda expression with  x ,  y ,  z  to obtain  f(x,y,z) .",
            "title": "Question 4: Currying"
        },
        {
            "location": "/exercise7/index.html#question-5-functormonad-laws",
            "text": "Suppose we have a snippet of code as follows,   1\n2   Double d = foo(i);\n  String s = bar(d);   We can write it either as:  1 stream.map(i -> foo(i)).map(d -> bar(d));   or   1 stream.map(i -> bar(foo(i)))   We can be assured that the expressions above are the same because stream is a functor.  Why?  Explain by indicating which law ensures the behavior above is true.",
            "title": "Question 5: Functor/Monad Laws"
        },
        {
            "location": "/exercise7/index.html#question-6-bad-practices",
            "text": "Each of the following code illusrates a very bad programming practice.  For each, comments on why it is bad.  (a) \"Pokemon Catch\"   1\n2\n3\n4\n5      try   { \n         doSomething (); \n     }   catch   ( Exception   e )   { \n\n     }    (b) Switching between strings  1\n2\n3\n4\n5\n6\n7\n8     switch ( customer . getType ())   { \n      case   \"Kiasu\" :  \n        joinQueueKiasu (); \n      case   \"Pioneer\" :  \n        joinQueuePioneer (); \n      default : \n        joinQueueRegular (); \n    }     \u00a9    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 void   getCustomerType ()   { \n   if   ( customer . isPioneer ())   { \n     throw   new   PioneerCustomerException (); \n   }   else   if   ( customer . isKiasu ())   { \n     throw   new   KiasuCustomerException (); \n   }  } \n\n   : \n   :  try   { \n   getCustomerType (); \n   joinQueueRegular ();  }   catch   ( PioneerCustomerException   e )   { \n   joinQueuePioneer ();  }   catch   ( KiasuCustomerException   e )   { \n   joinQueueKiasu ();  }    (d)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 // customers, servers, queues are arrays of Customer,   // Server, and Queue respectively.  Customer []   customers ;  Server []   servers ;  Queue []   queues ; \n   : \n   :  void   handleCustomer ( int   q ,   int   s ,   int   c )   { \n   // if servers[s] is busy, add customers[c] into queues[q] \n   // otherwise servers[s] serves customers[c] \n     :  }",
            "title": "Question 6: Bad Practices"
        },
        {
            "location": "/exercise7/index.html#question-7-ask-dont-tell",
            "text": "Suggest how we can improve the design of the classes below.  Only relevant part of the code are shown for brevity.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33 class   LabSubmission   { \n   private   Student   s ; \n   private   int   marks ; \n\n   public   Student   getStudent ()   { \n     return   s ; \n   } \n\n   public   int   getMarks ()   { \n     return   marks ; \n   } \n\n     : \n     :  }  class   Gradebook   { \n   List < LabSubmission >   submissions ; \n\n   void   print ()   { \n     for   ( LabSubmission   s   :   submissions )   { \n       if   ( s . getMarks ()   >   3 )   { \n         System . out . printf ( s . getStudent ()   +   \" A\" ); \n       }   else   if   ( s . getMarks ()   >   2 )   { \n         System . out . printf ( s . getStudent ()   +   \" B\" ); \n       }   else   if   ( s . getMarks ()   >   1 )   { \n         System . out . printf ( s . getStudent ()   +   \" C\" ); \n       }   else   { \n         System . out . printf ( s . getStudent ()   +   \" D\" ); \n       } \n     } \n   }  }",
            "title": "Question 7: Ask, Don't Tell"
        },
        {
            "location": "/lab1/index.html",
            "text": "Lab 1\n\n\nThis is a warm up, ungraded, lab.  \n\n\nSubmission deadline: 2359, Sunday, September 3, 2017.\n\n\nLearning Objectives\n\n\nAfter completing this lab, students should:\n\n\n\n\nbe more comfortable with the CS2030 laboratory environment, including knowing how to remotely access \ncs2030-i\n, create directory, copy files, edit files, transfer files between \ncs2030-i\n and local computers, run a script, and other \nUNIX commands\n\n\nbe familiar with compiling and running Java programs from the command line\n\n\nbe familiar with the concept of standard input and standard output, how to redirect the content of a file to standard input, and how to print to standard output\n\n\nbe more comfortable with basic Java syntax and semantics, specifically with\n\n\nadding methods into existing classes\n\n\ninvoking the methods of the classes to solve problems\n\n\ndeclaring and using arrays, primitive types, and objects\n\n\nusing if/else and for statements\n\n\nprinting to standard output\n\n\nthe \nthis\n keyword\n\n\n\n\n\n\n\n\n\n\nexperience reading Java API documentation and find out what are the methods available, and what are the arguments and returned types.\n\n\nsee an example of how class \nScanner\n is used\n\n\nappreciate how encapsulation of class \nPoint\n and class \nCircle\n allows one to reason about higher-level tasks without worrying about lower level representation\n\n\nappreciate how encapsulation of the class \nPoints\n allow one to change the internal representation without affecting how the class \nPoint\n is used.\n\n\n\n\nSetup\n\n\nLogin to \ncs2030-i\n, copy the files from \n~cs2030/lab01\n to your local directory under your home \n~/lab01\n.  You should see three java files (\nPoint.java\n, \nCircle.java\n, and \nMaxDiscCover.java\n), and a few data files (\nTESTDATA1.txt\n, \nTESTDATA2.txt\n, ..., \nTESTDATA5.txt\n)\n\n\nRead through the files above.  Although we have seen \nCircles\n and \nPoints\n as examples in class, these classes are slightly different.\n\n\n1. Augment the class Point\n\n\nAugment the class \nPoint\n with the following public methods and constructors.\nYou may find the static methods provided by \njava.lang.Math\n useful.\n\n\n1.1. Constructor for midpoint\n\n\n1\npublic\n \nPoint\n(\nPoint\n \np\n,\n \nPoint\n \nq\n)\n\n\n\n\n\n\n\nGiven two points \np\n and \nq\n, create and return the midpoint of \np\n and \nq\n.\n\n\n1.2 Distance between points\n\n\n1\npublic\n \ndouble\n \ndistanceTo\n(\nPoint\n \nq\n)\n \n\n\n\n\n\n\nYou should have written something like this from your Exercise 1.  This method returns the Euclidean distance of \nthis\n point to the point \nq\n.\n\n\n1.3 Angle between points\n\n\n1\npublic\n \ndouble\n \nangleTo\n(\nPoint\n \nq\n)\n \n\n\n\n\n\n\nThis method returns the angle between the current point and point \nq\n.  In the figure below, it returns the angle \n\\(\\theta\\)\n.  You can compute this using the \natan2()\n function.  For instance, \n\n1\n2\nPoint\n \np\n \n=\n \nnew\n \nPoint\n(\n0\n,\n \n0\n);\n\n\np\n.\nangleTo\n(\nnew\n \nPoint\n(\n1\n,\n \n1\n));\n\n\n\n\n\nshould return\n\n1\n0.7853981633974483\n\n\n\n\nwhich is \n\\(\\pi/4\\)\n.\n\n1\np.angleTo(new Point(1, 0));\n\n\n\n\nshould return \n\n1\n0.0\n\n\n\n\n\n\n\n1.4. Move a point\n\n\n1\npublic\n \nvoid\n \nmove\n(\ndouble\n \ntheta\n,\n \ndouble\n \nd\n)\n\n\n\n\n\n\n\nMove the point by a given distance at direction theta (in radian).  See Figure:\n\n\n\n\nThe new point should have the coordinate (\n\\(x + d\\cos\\theta, y + d\\sin\\theta\\)\n).\n\n\nAfter\n\n1\np.move(p.angleTo(q), p.distanceTo(q));\n\n\n\n\n\np\n should coincide with \nq\n.\n\n\n2. Augment the class Circle\n\n\nAugment the class \nCircle\n with the following methods and constructors:\n\n\n2.1 Constructor\n\n\n1\npublic\n \nCircle\n(\nPoint\n \np\n,\n \nPoint\n \nq\n,\n \ndouble\n \nradius\n,\n \nboolean\n \ncenterOnLeft\n)\n\n\n\n\n\n\n\nThe constructor above takes in two points \np\n and \nq\n, and returns a circle  that passes through both \np\n and \nq\n, with radius \nradius\n.  \n\n\nThere are two such possible circles (see figures below) if distance between \np\n and \nq\n is no greater than 2x\nradius\n1\n.  Imagine if you walk from \np\n to \nq\n, one of the circle will have the center on your left, the other will have the center on your right.  If the parameter \ncenterOnLeft\n is \ntrue\n, then the constructor will return the circle on the left, otherwise it will return the circle on the right.  See figure below.\n\n\n\n\nHint: To find the center \n\\(c\\)\n of the new circle, you can first find the midpoint \n\\(m\\)\n of line \n\\(pq\\)\n, the length of line \n\\(mc\\)\n, and the angle between \n\\(m\\)\n and \n\\(c\\)\n, using the \nPoint\n methods you have written.  We also know that length of \n\\(cq\\)\n is \nradius\n.  See figure below.\n\n\n\n\nThe constructor should return a \nCircle\n with \nDouble.NaN\n as the radius and (0,0) as center if the distance between \np\n and \nq\n is larger than 2x\nradius\n or is zero\n2\n.  Such \nCircle\n objects are invalid, and you may want to add a method in the \nCircle\n class to check for validity.  You can use \nDouble.isNaN\n for check if a double variable is NaN.\n\n\n3. Maximum Disc Coverage\n\n\nWe are now going to use the \nCircle\n class and \nPoint\n class to solve the maximum disc coverage problem.  In this problem, we are given a set of points on a 2D plane, and a unit disc (i.e., a circle of radius 1).  We want to place the disc so that it covers as many points as possible.  What is the maximum number of points that we can cover with the disc at any one time?   \n\n\nWe will use the following simple (non-optimal)  algorithm\n3\n.  First, some observations:\n\n\n\n\nA disc that covers the maximum number of points must pass through at least two points.\n\n\nFor every pair of points that is of no more than distance 2 away from each other, there is at most two unit discs that have their perimeter passing through the two points (you have written a constructor that helps you to find such circles).\n\n\n\n\nSo, the algorithm simply goes through every pair of points, and for each circle that passes through them, count how many points are covered by each circle.\n\n\nThe skeleton of the main class, called \nMaxDiscCover.java\n has been given to you.  This file is placed in the same directory as \nCircle.java\n and \nPoint.java\n.  \n\n\nThe skeleton code reads a set of points from the standard input, in the following format:\n\n\n\n\nThe first line is an integer, indicating the number of points \n\\(n\\)\n (\n\\(n\\)\n > 2) in the file.\n\n\nThe next \n\\(n\\)\n lines contains the \n\\(x\\)\n and \n\\(y\\)\n coordinates of \n\\(n\\)\n points, one point per line.  Each line has two doubles, separated by space.  The first double is the \n\\(x\\)\n coordinate; the second double is the \n\\(y\\)\n coordinate.\n\n\n\n\nYou can assume that the format of the input is always correct and there is always at least two points with distance less than 2 between them.\n\n\nComplete the program by implementing the maximum disc coverage algorithm above, and print the maximum number of points covered to standard output.  You can add additional methods and fields for \nPoint\n and \nCircle\n if needed.\n\n\n1\n2\nooiwt@cs2030-i:~/lab01[xxx]$ java MaxDiscCover < TESTDATA1.txt\n4\n\n\n\n\n(The output \n4\n above is a sample only -- it might not be the correct answer)\n\n\n4. What If\n\n\nSuppose now, hypothetically, we replace Point's implementation with one that represents a point with polar coordinates internally, but has exactly the same public methods and constructors.  How many lines of code in \nMaxDiscCover.java\n and \nCircle.java\n do you need to change?\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit01\n\n\n\n\n\nwhich will copy your the three java files \nMaxDiscCover.java\n, \nPoint.java\n, and \nCircle.java\n (and nothing else) from your \n~/lab01\n directory on \ncs2030-i\n to an internal grading directory.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\n\n\n\n\n\n\n\n\nIf the distance between \np\n and \nq\n is exactly 2x\nradius\n, then the two circles are one and the same.\u00a0\n\u21a9\n\n\n\n\n\n\nA cleaner solution is to throw an exception, but you won't learn this until later in class.\u00a0\n\u21a9\n\n\n\n\n\n\nThis is a \n\\(O(n^3)\\)\n algorithm.  Faster algorithm exists.\u00a0\n\u21a9",
            "title": "1. Question"
        },
        {
            "location": "/lab1/index.html#lab-1",
            "text": "This is a warm up, ungraded, lab.    Submission deadline: 2359, Sunday, September 3, 2017.",
            "title": "Lab 1"
        },
        {
            "location": "/lab1/index.html#learning-objectives",
            "text": "After completing this lab, students should:   be more comfortable with the CS2030 laboratory environment, including knowing how to remotely access  cs2030-i , create directory, copy files, edit files, transfer files between  cs2030-i  and local computers, run a script, and other  UNIX commands  be familiar with compiling and running Java programs from the command line  be familiar with the concept of standard input and standard output, how to redirect the content of a file to standard input, and how to print to standard output  be more comfortable with basic Java syntax and semantics, specifically with  adding methods into existing classes  invoking the methods of the classes to solve problems  declaring and using arrays, primitive types, and objects  using if/else and for statements  printing to standard output  the  this  keyword      experience reading Java API documentation and find out what are the methods available, and what are the arguments and returned types.  see an example of how class  Scanner  is used  appreciate how encapsulation of class  Point  and class  Circle  allows one to reason about higher-level tasks without worrying about lower level representation  appreciate how encapsulation of the class  Points  allow one to change the internal representation without affecting how the class  Point  is used.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lab1/index.html#setup",
            "text": "Login to  cs2030-i , copy the files from  ~cs2030/lab01  to your local directory under your home  ~/lab01 .  You should see three java files ( Point.java ,  Circle.java , and  MaxDiscCover.java ), and a few data files ( TESTDATA1.txt ,  TESTDATA2.txt , ...,  TESTDATA5.txt )  Read through the files above.  Although we have seen  Circles  and  Points  as examples in class, these classes are slightly different.",
            "title": "Setup"
        },
        {
            "location": "/lab1/index.html#1-augment-the-class-point",
            "text": "Augment the class  Point  with the following public methods and constructors.\nYou may find the static methods provided by  java.lang.Math  useful.",
            "title": "1. Augment the class Point"
        },
        {
            "location": "/lab1/index.html#11-constructor-for-midpoint",
            "text": "1 public   Point ( Point   p ,   Point   q )    Given two points  p  and  q , create and return the midpoint of  p  and  q .",
            "title": "1.1. Constructor for midpoint"
        },
        {
            "location": "/lab1/index.html#12-distance-between-points",
            "text": "1 public   double   distanceTo ( Point   q )     You should have written something like this from your Exercise 1.  This method returns the Euclidean distance of  this  point to the point  q .",
            "title": "1.2 Distance between points"
        },
        {
            "location": "/lab1/index.html#13-angle-between-points",
            "text": "1 public   double   angleTo ( Point   q )     This method returns the angle between the current point and point  q .  In the figure below, it returns the angle  \\(\\theta\\) .  You can compute this using the  atan2()  function.  For instance,  1\n2 Point   p   =   new   Point ( 0 ,   0 );  p . angleTo ( new   Point ( 1 ,   1 ));   \nshould return 1 0.7853981633974483  \nwhich is  \\(\\pi/4\\) . 1 p.angleTo(new Point(1, 0));  \nshould return  1 0.0",
            "title": "1.3 Angle between points"
        },
        {
            "location": "/lab1/index.html#14-move-a-point",
            "text": "1 public   void   move ( double   theta ,   double   d )    Move the point by a given distance at direction theta (in radian).  See Figure:   The new point should have the coordinate ( \\(x + d\\cos\\theta, y + d\\sin\\theta\\) ).  After 1 p.move(p.angleTo(q), p.distanceTo(q));   p  should coincide with  q .",
            "title": "1.4. Move a point"
        },
        {
            "location": "/lab1/index.html#2-augment-the-class-circle",
            "text": "Augment the class  Circle  with the following methods and constructors:",
            "title": "2. Augment the class Circle"
        },
        {
            "location": "/lab1/index.html#21-constructor",
            "text": "1 public   Circle ( Point   p ,   Point   q ,   double   radius ,   boolean   centerOnLeft )    The constructor above takes in two points  p  and  q , and returns a circle  that passes through both  p  and  q , with radius  radius .    There are two such possible circles (see figures below) if distance between  p  and  q  is no greater than 2x radius 1 .  Imagine if you walk from  p  to  q , one of the circle will have the center on your left, the other will have the center on your right.  If the parameter  centerOnLeft  is  true , then the constructor will return the circle on the left, otherwise it will return the circle on the right.  See figure below.   Hint: To find the center  \\(c\\)  of the new circle, you can first find the midpoint  \\(m\\)  of line  \\(pq\\) , the length of line  \\(mc\\) , and the angle between  \\(m\\)  and  \\(c\\) , using the  Point  methods you have written.  We also know that length of  \\(cq\\)  is  radius .  See figure below.   The constructor should return a  Circle  with  Double.NaN  as the radius and (0,0) as center if the distance between  p  and  q  is larger than 2x radius  or is zero 2 .  Such  Circle  objects are invalid, and you may want to add a method in the  Circle  class to check for validity.  You can use  Double.isNaN  for check if a double variable is NaN.",
            "title": "2.1 Constructor"
        },
        {
            "location": "/lab1/index.html#3-maximum-disc-coverage",
            "text": "We are now going to use the  Circle  class and  Point  class to solve the maximum disc coverage problem.  In this problem, we are given a set of points on a 2D plane, and a unit disc (i.e., a circle of radius 1).  We want to place the disc so that it covers as many points as possible.  What is the maximum number of points that we can cover with the disc at any one time?     We will use the following simple (non-optimal)  algorithm 3 .  First, some observations:   A disc that covers the maximum number of points must pass through at least two points.  For every pair of points that is of no more than distance 2 away from each other, there is at most two unit discs that have their perimeter passing through the two points (you have written a constructor that helps you to find such circles).   So, the algorithm simply goes through every pair of points, and for each circle that passes through them, count how many points are covered by each circle.  The skeleton of the main class, called  MaxDiscCover.java  has been given to you.  This file is placed in the same directory as  Circle.java  and  Point.java .    The skeleton code reads a set of points from the standard input, in the following format:   The first line is an integer, indicating the number of points  \\(n\\)  ( \\(n\\)  > 2) in the file.  The next  \\(n\\)  lines contains the  \\(x\\)  and  \\(y\\)  coordinates of  \\(n\\)  points, one point per line.  Each line has two doubles, separated by space.  The first double is the  \\(x\\)  coordinate; the second double is the  \\(y\\)  coordinate.   You can assume that the format of the input is always correct and there is always at least two points with distance less than 2 between them.  Complete the program by implementing the maximum disc coverage algorithm above, and print the maximum number of points covered to standard output.  You can add additional methods and fields for  Point  and  Circle  if needed.  1\n2 ooiwt@cs2030-i:~/lab01[xxx]$ java MaxDiscCover < TESTDATA1.txt\n4  \n(The output  4  above is a sample only -- it might not be the correct answer)",
            "title": "3. Maximum Disc Coverage"
        },
        {
            "location": "/lab1/index.html#4-what-if",
            "text": "Suppose now, hypothetically, we replace Point's implementation with one that represents a point with polar coordinates internally, but has exactly the same public methods and constructors.  How many lines of code in  MaxDiscCover.java  and  Circle.java  do you need to change?",
            "title": "4. What If"
        },
        {
            "location": "/lab1/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit01   which will copy your the three java files  MaxDiscCover.java ,  Point.java , and  Circle.java  (and nothing else) from your  ~/lab01  directory on  cs2030-i  to an internal grading directory.  You can submit multiple times, but only the most recent submission will be graded.      If the distance between  p  and  q  is exactly 2x radius , then the two circles are one and the same.\u00a0 \u21a9    A cleaner solution is to throw an exception, but you won't learn this until later in class.\u00a0 \u21a9    This is a  \\(O(n^3)\\)  algorithm.  Faster algorithm exists.\u00a0 \u21a9",
            "title": "Submission"
        },
        {
            "location": "/lab01-comments/index.html",
            "text": "Lab 1: Comments\n\n\nHere are some common mistakes made, in decreasing order of seriousness.\n\n\nMost Serious Offences\n\n\nDesign: Breaking abstraction barrier\n\n\nSome students took the liberty to change the access modifier of instance fields from \nprivate\n to \npublic\n.\n\n\nIn doing so, you are violating the fundamental principles of object oriented programming and demonstrating that you do not understand the concept and importance of abstraction barriers and encapsulation.\n\n\nDesign: Getter / Setter\n\n\nIf you use getter or setter in your code when you could have easily move the associated tasks to within the encapsulation, you score a major minus in your lab.  Again, using getter and setter to expose the internals is only slightly better than just changing the members to \npublic\n.\n\n\nThere are cases where the use of getters and setters are justified.  For instance, a couple of you use complex equations to determine the center and it involves x and y, instead of using \nmove\n, \nangleTo\n, and \ndistanceTo\n.  One could argue that these solutions heavily rely on the knowledge of x and y.\n\n\nFor all other uses of x and y in the \nCircle\n constructor, such as to calculate gradient, to copy a point, etc, they can all be delegated to the \nPoint\n class.  Remember, we want the \nPoint\n class to be the only one who knows the internal representation of a point: whether Euclidean coords or polar coords are used.\n\n\nE.g.,\n\n1\nPoint\n \np\n \n=\n \nnew\n \nPoint\n(\nq\n.\ngetX\n(),\n \nq\n.\ngetY\n());\n\n\n\n\n\ncan be\n\n1\nPoint\n \np\n \n=\n \nq\n.\ncopy\n();\n\n\n\n\n\nor\n\n1\ndouble\n \ngradient\n \n=\n \n(\np\n.\ngetY\n()-\nq\n.\ngetY\n())/(\np\n.\ngetX\n()-\nq\n.\ngetX\n())\n\n\n\n\n\ncan be\n\n1\ndouble\n \ngradient\n \n=\n \np\n.\ngradientTo\n(\nq\n);\n\n\n\n\n\n\nDesign: Checking for Circle validity\n\n\nAlong the same line of mistakes, some of you do this in \nMaxDiscCover.java\n:\n\n\n1\n    \nif\n \n(\nDouble\n.\nisNaN\n(\ncircle\n.\ngetRadius\n())\n \n{\n \n..\n \n}\n\n\n\n\n\nor\n\n1\n    \nif\n \n(\ncircle\n.\nradiusIsNaN\n())\n \n{\n \n..\n \n}\n\n\n\n\n\n\nSuppose now we change an invalid circle to one that has \n-1\n radius, or one that has a boolean \nisValid\n flag, then this code wouldn't work or has to be renamed.\n\n\nA better way is for \nCircle\n to decide itself whether it is valid or not, by providing a method \nisValid()\n.  Then, \nMaxDiscCover.java\n can just call\n\n1\n    \nif\n \n(\ncircle\n.\nisValid\n())\n \n{\n \n..\n \n}\n\n\n\n\n\nIf Circle decides to change its implementation later, it is none of \nMaxDiscCover\n's business.\n\n\nCorrectness: Object References\n\n\nA few students did the following in \nCircle\n constructor:\n\n\n1\n2\n3\n4\n5\n6\npublic\n \nCircle\n(\nPoint\n \np\n,\n \nPoint\n \nq\n,\n \ndouble\n \nr\n,\n \nboolean\n \ncenterOnLeft\n)\n \n{\n\n    \nPoint\n \nm\n \n=\n \np\n;\n\n    \n:\n\n    \nm\n.\nmove\n(..)\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nRemember from the figures drawn in class that \nm\n and \np\n are just references to objects.  Now, you are pointing \nm\n and \np\n to the same object.  When you move \nm\n, \np\n is moved as well, and as a result, one input point from the \npoints[]\n array gets moved.\n\n\nPerformance: Double Loops\n\n\nSome of you did this in \nsolve()\n:\n\n\n1\n2\n3\n4\n5\nfor\n \n(\nPoint\n \np\n:\n \npoints\n)\n \n{\n\n    \nfor\n \n(\nPoint\n \nq\n:\n \npoints\n)\n \n{\n\n        \n:\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nWhat happened is that, now, you loop through each pair of points twice, (first with, say, \np\n as \npoints[0]\n, \nq\n as \npoints[1]\n, and later \np\n as \npoints[1]\n, \nq\n as \npoints[0]\n).\n\n\nThis also meant that for each point, you tried to construct a circle through two copies of itself, a wasted effort since the resulting circle is invalid.\n\n\nHere's a better way to iterate through all possible pairs of points:\n\n\n1\n2\n3\n4\n5\n6\n7\nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n<\n \npoints\n.\nlength\n;\n \ni\n++)\n \n{\n\n    \nfor\n \n(\nint\n \nj\n \n=\n \ni\n \n+\n \n1\n;\n \nj\n \n<\n \npoints\n.\nlength\n;\n \nj\n++)\n \n{\n\n        \nPoint\n \np\n \n=\n \npoints\n[\ni\n];\n\n        \nPoint\n \nq\n \n=\n \npoints\n[\nj\n];\n\n        \n:\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nStyle: Indentation\n\n\nIt is important to keep your code properly and consistently indented.  If you use a source code editor like \nvim\n (with \nautoindent\n on and \nsmartindent\n on), then there is no reason for you to have crooked indentation.\n\n\nMy favourite example of bad indentation bug: \nApple \ngoto fail\n bug\n\n\nStyle: Naming Convention\n\n\nJava has a certain naming convention for class names, variable names, method names, constant variables, etc.  Please follow them.  At the beginning of the lab, we ask all of those who attended to follow, but there are still some who does not.\n\n\nFrom Lab 3 onwards, we will enforce indentation and naming style.\n\n\nLess Serious Mistakes\n\n\nStyle: \nthis\n\n\nWhen referring to the fields of the current object, I prefer to use \nthis\n reference.  It is redundant, but makes your program much less bug prone and make it more explicit which variable you are referring to.\n\n\nLet's suppose I give you a method of about 100 lines and 10 parameters and variables to read, one of the lines said:\n\n\n1\n    \ncenter\n \n=\n \np\n;\n\n\n\n\n\n\n\nHow can you be absolutely sure that this line is updating a member called \ncenter\n of the object?\n\n\nTo be sure, you have to scan through 100 lines to double check that there is no local variable declared with the same name, and there is no method argument with the same name.\n\n\nNow, let's suppose I give you a method of about 100 lines and 10 parameters and variables to read, one of the lines said:\n\n\n1\n    \nthis\n.\ncenter\n \n=\n \np\n;\n\n\n\n\n\n\n\nHow can you be absolutely sure that this line is updating a member called \ncenter\n of the object?\n\n\nI rest my case :)\n\n\nStyle: Too Many Nested Blocks\n\n\nIn the \nsolve\n method, some of you have FIVE levels of nested blocks: two double loops to go through each pair of points, one to check for circle validity, another loop to go through all points, one to check for containment.\n\n\nThese nested blocks make the code long and hard to read.  One of you have to label the \n{\n and \n}\n to help with bracket matching.\n\n\nAs a guideline, if you have more than two nested blocks, it is time to think about breaking down the method into smaller / shorter methods.  For instance, for every pair of points, find out how many points are in the two circles that pass throught this pair.\n\n\nShorter methods are easier to read, understand, and debug.  So do your future self a favour.\n\n\nStyle: \nif (x == true)\n\n\nx\n can be a variable or a function. Some of you wrote as \nif (x == true)\n in the condition, some wrote it as \nif (x)\n.\n\n\nif (x)\n is more succinct, and if you name \nx\n properly, it is more readable and understandable than \nif (x == true)\n.\n\n\nFor instance,\n\n\n1\nif\n \n(\ncircle\n.\nisValid\n())\n \n{..}\n\n\n\n\n\n\n\nis perfectly clear that we are checking if the circle is valid.\n\n\n1\nif\n \n(\ncircle\n.\nisValid\n()\n \n==\n \ntrue\n))\n \n{..}\n\n\n\n\n\nis redundant.\n\n\nWhat if we call the function \nx\n as something else, say, \ncheckValidity()\n?  First of all, DON'T.  Second, yes, it is then OK to write:\n\n\n1\nif\n \n(\ncircle\n.\ncheckValidity\n()\n \n==\n \ntrue\n))\n \n{..}\n\n\n\n\n\nbut can you tell by reading this line of code, whether \ntrue\n means the circle is valid or not?  So, DON'T.  Keep your code short, english-like, and choose a proper name for your variables and methods.",
            "title": "1. Comments"
        },
        {
            "location": "/lab01-comments/index.html#lab-1-comments",
            "text": "Here are some common mistakes made, in decreasing order of seriousness.",
            "title": "Lab 1: Comments"
        },
        {
            "location": "/lab01-comments/index.html#most-serious-offences",
            "text": "",
            "title": "Most Serious Offences"
        },
        {
            "location": "/lab01-comments/index.html#design-breaking-abstraction-barrier",
            "text": "Some students took the liberty to change the access modifier of instance fields from  private  to  public .  In doing so, you are violating the fundamental principles of object oriented programming and demonstrating that you do not understand the concept and importance of abstraction barriers and encapsulation.",
            "title": "Design: Breaking abstraction barrier"
        },
        {
            "location": "/lab01-comments/index.html#design-getter-setter",
            "text": "If you use getter or setter in your code when you could have easily move the associated tasks to within the encapsulation, you score a major minus in your lab.  Again, using getter and setter to expose the internals is only slightly better than just changing the members to  public .  There are cases where the use of getters and setters are justified.  For instance, a couple of you use complex equations to determine the center and it involves x and y, instead of using  move ,  angleTo , and  distanceTo .  One could argue that these solutions heavily rely on the knowledge of x and y.  For all other uses of x and y in the  Circle  constructor, such as to calculate gradient, to copy a point, etc, they can all be delegated to the  Point  class.  Remember, we want the  Point  class to be the only one who knows the internal representation of a point: whether Euclidean coords or polar coords are used.  E.g., 1 Point   p   =   new   Point ( q . getX (),   q . getY ());   \ncan be 1 Point   p   =   q . copy ();   \nor 1 double   gradient   =   ( p . getY ()- q . getY ())/( p . getX ()- q . getX ())   \ncan be 1 double   gradient   =   p . gradientTo ( q );",
            "title": "Design: Getter / Setter"
        },
        {
            "location": "/lab01-comments/index.html#design-checking-for-circle-validity",
            "text": "Along the same line of mistakes, some of you do this in  MaxDiscCover.java :  1      if   ( Double . isNaN ( circle . getRadius ())   {   ..   }   \nor 1      if   ( circle . radiusIsNaN ())   {   ..   }    Suppose now we change an invalid circle to one that has  -1  radius, or one that has a boolean  isValid  flag, then this code wouldn't work or has to be renamed.  A better way is for  Circle  to decide itself whether it is valid or not, by providing a method  isValid() .  Then,  MaxDiscCover.java  can just call 1      if   ( circle . isValid ())   {   ..   }   \nIf Circle decides to change its implementation later, it is none of  MaxDiscCover 's business.",
            "title": "Design: Checking for Circle validity"
        },
        {
            "location": "/lab01-comments/index.html#correctness-object-references",
            "text": "A few students did the following in  Circle  constructor:  1\n2\n3\n4\n5\n6 public   Circle ( Point   p ,   Point   q ,   double   r ,   boolean   centerOnLeft )   { \n     Point   m   =   p ; \n     : \n     m . move (..) \n     :  }    Remember from the figures drawn in class that  m  and  p  are just references to objects.  Now, you are pointing  m  and  p  to the same object.  When you move  m ,  p  is moved as well, and as a result, one input point from the  points[]  array gets moved.",
            "title": "Correctness: Object References"
        },
        {
            "location": "/lab01-comments/index.html#performance-double-loops",
            "text": "Some of you did this in  solve() :  1\n2\n3\n4\n5 for   ( Point   p :   points )   { \n     for   ( Point   q :   points )   { \n         : \n     }  }    What happened is that, now, you loop through each pair of points twice, (first with, say,  p  as  points[0] ,  q  as  points[1] , and later  p  as  points[1] ,  q  as  points[0] ).  This also meant that for each point, you tried to construct a circle through two copies of itself, a wasted effort since the resulting circle is invalid.  Here's a better way to iterate through all possible pairs of points:  1\n2\n3\n4\n5\n6\n7 for   ( int   i   =   0 ;   i   <   points . length ;   i ++)   { \n     for   ( int   j   =   i   +   1 ;   j   <   points . length ;   j ++)   { \n         Point   p   =   points [ i ]; \n         Point   q   =   points [ j ]; \n         : \n     }  }",
            "title": "Performance: Double Loops"
        },
        {
            "location": "/lab01-comments/index.html#style-indentation",
            "text": "It is important to keep your code properly and consistently indented.  If you use a source code editor like  vim  (with  autoindent  on and  smartindent  on), then there is no reason for you to have crooked indentation.  My favourite example of bad indentation bug:  Apple  goto fail  bug",
            "title": "Style: Indentation"
        },
        {
            "location": "/lab01-comments/index.html#style-naming-convention",
            "text": "Java has a certain naming convention for class names, variable names, method names, constant variables, etc.  Please follow them.  At the beginning of the lab, we ask all of those who attended to follow, but there are still some who does not.  From Lab 3 onwards, we will enforce indentation and naming style.",
            "title": "Style: Naming Convention"
        },
        {
            "location": "/lab01-comments/index.html#less-serious-mistakes",
            "text": "",
            "title": "Less Serious Mistakes"
        },
        {
            "location": "/lab01-comments/index.html#style-this",
            "text": "When referring to the fields of the current object, I prefer to use  this  reference.  It is redundant, but makes your program much less bug prone and make it more explicit which variable you are referring to.  Let's suppose I give you a method of about 100 lines and 10 parameters and variables to read, one of the lines said:  1      center   =   p ;    How can you be absolutely sure that this line is updating a member called  center  of the object?  To be sure, you have to scan through 100 lines to double check that there is no local variable declared with the same name, and there is no method argument with the same name.  Now, let's suppose I give you a method of about 100 lines and 10 parameters and variables to read, one of the lines said:  1      this . center   =   p ;    How can you be absolutely sure that this line is updating a member called  center  of the object?  I rest my case :)",
            "title": "Style: this"
        },
        {
            "location": "/lab01-comments/index.html#style-too-many-nested-blocks",
            "text": "In the  solve  method, some of you have FIVE levels of nested blocks: two double loops to go through each pair of points, one to check for circle validity, another loop to go through all points, one to check for containment.  These nested blocks make the code long and hard to read.  One of you have to label the  {  and  }  to help with bracket matching.  As a guideline, if you have more than two nested blocks, it is time to think about breaking down the method into smaller / shorter methods.  For instance, for every pair of points, find out how many points are in the two circles that pass throught this pair.  Shorter methods are easier to read, understand, and debug.  So do your future self a favour.",
            "title": "Style: Too Many Nested Blocks"
        },
        {
            "location": "/lab01-comments/index.html#style-if-x-true",
            "text": "x  can be a variable or a function. Some of you wrote as  if (x == true)  in the condition, some wrote it as  if (x) .  if (x)  is more succinct, and if you name  x  properly, it is more readable and understandable than  if (x == true) .  For instance,  1 if   ( circle . isValid ())   {..}    is perfectly clear that we are checking if the circle is valid.  1 if   ( circle . isValid ()   ==   true ))   {..}   \nis redundant.  What if we call the function  x  as something else, say,  checkValidity() ?  First of all, DON'T.  Second, yes, it is then OK to write:  1 if   ( circle . checkValidity ()   ==   true ))   {..}   \nbut can you tell by reading this line of code, whether  true  means the circle is valid or not?  So, DON'T.  Keep your code short, english-like, and choose a proper name for your variables and methods.",
            "title": "Style: if (x == true)"
        },
        {
            "location": "/lab2/index.html",
            "text": "Lab 2\n\n\nSubmission deadline: 2359, Sunday, September 10, 2017.\n\n\nPrerequisites\n\n\nAssume that students are already familiar with:\n\n\n\n\nthe \nCS2030 laboratory environment\n\n\nhow to compile and run Java programs\n\n\nfamiliar with standard I/O and I/O redirection\n\n\ncomfortable with Java syntax\n\n\nlooking up Java API documentation\n\n\nunderstand the concepts of encapsulation and using encapsulated objects\n\n\n\n\nLearning Objectives\n\n\nAfter completing this lab, students should:\n\n\n\n\nbe more comfortable with looking at a complex problem and identify data and procedures that should be kept within an abstraction barrier.  In other words, be more comfortable with creating own encapsulated class.\n\n\nbe more comfortable with basic Java syntax and semantics, particularly when creating classes from scratch.\n\n\n\n\nSetup\n\n\nLogin to \ncs2030-i\n, copy the files from \n~cs2030/lab02\n to your local directory under your home \n~/lab02\n.  You should see one java file (\nLabTwo.java\n) and a few data files (\nTESTDATA1.txt\n, \nTESTDATA2.txt\n, ..., \nTESTDATA5.txt\n)\n\n\nTask\n\n\nLabTwo.java\n implements a working discrete event simulator that simulates customers being served by a server.  It is written in procedural style with no encapsulation.  Your task, in this lab, is to rewrite this simulator with OO style, by properly using encapsulation to create abstraction barriers to the various variables and methods.\n\n\nGrading\n\n\nThis lab contributes 4 marks to your final grade (100 marks).\nYou will get 0-3 marks for your design and encapsulation of the classes.\nYou will get 1 mark if you code works correctly (but only if you score at least 1 mark for your design and use of encapsulation\n1\n)\n\n\nDiscrete Event Simulator\n\n\nA discrete event simulator is a software that simulates a system (often modeled after the real world) with events and states.  An event occurs at a particular time, and each event alter the states of the system, and may generate more events.  A discrete event simulator can be used to study many complex real world systems.  The term \ndiscrete\n refers to the fact that, the states remain unchanged between two events, and therefore, the simulator can \njump\n from the time of one event to another, instead of following the clock in real time.  The simulator typically keeps track of some statistics to measure the performance of the system.\n\n\nIn this lab, we start with simulating a specific situation:\n\n\n\n\nWe have a shop with a \nserver\n (a person providing service to customer).\n\n\nThe server can serve one customer at a time.\n\n\nWe assume for now that the server takes constant time to serve a customer.\n  The time taken to serve is called \nservice time\n.\n\n\nWhen a customer arrives:\n\n\nif the server is idle (not serving any customer), then the server serves the customer immediately (no waiting).\n\n\nif the server is serving another customer, then the customer that just arrives waits.\n\n\nif the server is serving one customer, and another customer is waiting, then the customer that just arrives just leave (no waiting) and go elsewhere.  In other words, there is at most one waiting customer.\n\n\n\n\n\n\nWhen the server is done serving a customer:\n\n\nthe served customer leaves.\n\n\nif there is another customer waiting, the server starts serving the waiting customer immediately.\n\n\nif there is no waiting customer, then server becomes idle again.\n\n\n\n\n\n\n\n\nWe are interested in the following.  Given a sequence of customer arrivals (time of each arrival is given):\n\n\n\n\nWhat is the average waiting time for customers that has been served?\n\n\nHow many customers are served?\n\n\nHow many customers left without being served?\n\n\n\n\nIn your Lab 2, you are given a simple discrete event simulator to answer the questions above.  There are two classes: \nSimulator\n and \nEvent\n.\n\n\nClass \nEvent\n\n\nThe event class is written in procedural style, not unlike a \nstruct\n in C.  All members are public, and there is no method.  Each \nEvent\n keeps track of two information: the \ntime\n the event occurs, and \neventType\n, which signifies what type of events is this.  Instead of using time like 9:45pm, we simply and represent time as a double value.\n\n\n1\n2\n3\n4\n  \nstatic\n \nclass\n \nEvent\n \n{\n\n    \npublic\n \ndouble\n \ntime\n;\n \n// The time this event will occur\n\n    \npublic\n \nint\n \neventType\n;\n \n// The type of event, indicates what should happen when an event occurs.\n\n  \n}\n\n\n\n\n\n\n\nWe handle two types of events for this particular scenario: an event of type \nCUSTOMER_ARRIVE\n means that a customer arrives during this event; while an event of type \nCUSTOMER_DONE\n means that the customer is done being served.  \nCUSTOMER_ARRIVE\n events are created based on the given input.  \nCUSTOMER_DONE\n events are created and scheduled to occur sometime into the future when a customer is being served.\n\n\n1\n2\n  \npublic\n \nstatic\n \nfinal\n \nint\n \nCUSTOMER_ARRIVE\n \n=\n \n1\n;\n\n  \npublic\n \nstatic\n \nfinal\n \nint\n \nCUSTOMER_DONE\n \n=\n \n2\n;\n\n\n\n\n\n\n\nClass \nSimulator\n\n\nThe simulator class is again written in procedural style.  All members are public, and there is no method.\n\n\nThe \nSimulator\n class contains two configuration parameters, \nMAX_NUMBER_OF_EVENTS\n indicates the maximum number of events that the simulator can store at one time; \nSERVICE_TIME\n indicates the time the server takes to serve a customer.\n\n1\n2\n    \npublic\n \nint\n \nMAX_NUMBER_OF_EVENTS\n \n=\n \n100\n;\n \n// Maximum number of events\n\n    \npublic\n \ndouble\n \nSERVICE_TIME\n \n=\n \n1.0\n;\n \n// Time spent serving a customer\n\n\n\n\n\n\nThe \nevents\n is an array of \nEvent\n that store all events scheduled for the future in the simulator.\n\n1\n2\n    \npublic\n \nEvent\n[]\n \nevents\n;\n \n// Array of events, order of events not guaranteed.\n\n    \npublic\n \nint\n \nnumOfEvents\n;\n \n// The number of events in the event array.\n\n\n\n\n\n\nThe simulator needs to keep track of three states:\n\n\n\n\nis a customer being served?\n\n\nis a customer waiting?\n\n\nif a customer is waiting, when did he start waiting?\n\n\n\n\nThese states are represented as:\n\n\n1\n2\n3\n    \npublic\n \nboolean\n \ncustomerBeingServed\n;\n \n// is a customer currently being served?\n\n    \npublic\n \nboolean\n \ncustomerWaiting\n;\n \n// is a customer currently waiting?\n\n    \npublic\n \ndouble\n \ntimeStartedWaiting\n;\n \n// the time the current waiting customer started waiting\n\n\n\n\n\n\n\nRemember we are interested in the following statistics:\n\n\n\n\nWhat is the average waiting time for customers that has been served?\n\n\nHow many customers are served?\n\n\nHow many customers left without being served?\n\n\n\n\nwhich can be computing from the following members:\n\n\n1\n2\n3\n    \npublic\n \ndouble\n \ntotalWaitingTime\n;\n \n// total time everyone spent waiting\n\n    \npublic\n \nint\n \ntotalNumOfServedCustomer\n;\n \n// how many customer has waited\n\n    \npublic\n \nint\n \ntotalNumOfLostCustomer\n;\n \n// how many customer has been lost\n\n\n\n\n\n\n\nFinally, for debugging purposes, the simulator assigns unique IDs 1, 2, 3, ... to the customers, in the order of their arrivals.  It then keeps track of the ID of the customer being served (if any) and the customer waiting to be served.\n\n\n1\n2\n3\n    \npublic\n \nint\n \nlastCustomerId\n;\n \n// starts from 0 and increases as customer arrives.\n\n    \npublic\n \nint\n \nservedCustomerId\n;\n \n// id of the customer being served, if any\n\n    \npublic\n \nint\n \nwaitingCustomerId\n;\n \n// id of the customer currently waiting, if any\n\n\n\n\n\n\n\nInteraction between \nSimulator\n and \nEvent\n\n\nWe create a \nSimulator\n by calling the method:\n\n1\n  \nstatic\n \nSimulator\n \ncreateSimulator\n()\n \n{..}\n\n\n\n\n\nand an \nEvent\n by calling the method, specifying \nwhen\n the event will occur, and the \ntype\n of the event.\n\n1\n  \nstatic\n \nEvent\n \ncreateEvent\n(\ndouble\n \nwhen\n,\n \nint\n \ntype\n)\n  \n{..}\n\n\n\n\n\n\nWe can schedule the event \ne\n to be executed by simulator \nsim\n by calling:\n\n1\n  \nstatic\n \nboolean\n \nscheduleEventInSimulator\n(\nEvent\n \ne\n,\n \nSimulator\n \nsim\n)\n \n{..}\n\n\n\n\n\nThis method will return \ntrue\n if the event is scheduled succesfully, \nfalse\n if the simulator run out of space to store the event (i.e., \nMAX_NUMBER_OF_EVENTS\n is reached).\n\n\nWe always execute the events in increasing sequence of their time.  Once the simulator starts running, it repeatedly find the next event with the smallest timestamp (i.e., earliest event), remove it from the list of events, and execute the event.  The simulator stops when there is no more event to run.\n\n\n1\n2\n3\n4\n5\n6\n  \nstatic\n \nvoid\n \nrunSimulator\n(\nSimulator\n \nsim\n)\n \n{\n\n    \nwhile\n \n(\nsim\n.\nnumOfEvents\n \n>\n \n0\n)\n \n{\n\n      \nEvent\n \ne\n \n=\n \ngetNextEarliestEvent\n(\nsim\n);\n\n      \nsimulateEvent\n(\nsim\n,\n \ne\n);\n\n    \n}\n\n  \n}\n\n\n\n\n\n\n\nHere, \ne = getNextEarliestEvent(sim)\n removes and returns the earliest event in the simulator, and \nsimulateEvent(sim, e)\n update the states of the simulator according to the type of the event \ne\n.\n\n\nSimulated System\n\n\nThe logic of the system being simulator (i.e., behavior of customers and server) is implemented in \nsimulateEvent\n.  There are four methods being called from here:\n\n\n\n\nserveCustomer(sim, time, id)\n: called to start serving a customer with ID \nid\n\n\nmakeCustomerWait(sim, time, id)\n: called to make the customer with ID \nid\n wait\n\n\ncustomerLeaves(sim, time, id)\n: called when the customer with ID \nid\n who just arrived leaves immediately (as someone else is waiting)\n\n\nservedWaitingCustomer(sim, time)\n: called to start serving the customer that is currently waiting.\n\n\n\n\nYou should read through \nLabTwo.java\n and clarify if you are not sure about any part of the given code.\n\n\nInput: Arrival Time\n\n\nThe input consists of a sequence of double values, each is the arrival time of a customer (in any order).  We can read from standard input (if no command line argument is given)\n\n1\n2\njava LabTwo\njava LabTwo  < TESTDATA1.txt\n\n\n\n\nor read from a given filename\n\n1\njava LabTwo TESTDATA1\n\n\n\n\n\nGiven an input, the output might not be deterministric, since if two events occur at exactly the same time, we break the ties arbitarily.  For this reason, we will only test your code with input where no two events occur at exactly the same time.\n\n\nYour Task\n\n\nThe given \nLabTwo.java\n is written in C style, no minimal encapsulation.  As you read through the code, you should appreciate how messy and difficult to understand the code is.\n\n\nYour mission, in Lab 2, is to rewrite the code using encapsulation, applying OO paradigm, properly maintain the abstraction barrier when the objects interact.  Here are some rules:\n\n\n\n\nYou can add as many classes as you like.  Each class must be in its own \n.java\n file\n\n\nThe \nmain\n method should remain in a class named \nLabTwo\n.  We must be able to run your code with:\n\n1\n2\njavac *.java\njava LabTwo < TESTDATA1.txt\n\n\n\n\n\nYou must not change the formatting of the \nlast line\n of output (\nSystem.out.printf(\"%.3f %d %d\", ..\")\n).  We rely on it to check for correctness of your logic.\n\n\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit02\n\n\n\n\n\nwhich will copy all files matching \n*.java\n (and nothing else) from your \n~/lab02\n directory on \ncs2030-i\n to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\nExtra Java Stuff\n\n\nYou are exposed to three new Java syntax/class in this Lab:\n\n\n\n\nNested classes: In the code given to you, we define \nSimulator\n and \nEvent\n within the class \nLabTwo\n.  This is called \nnested class\n in Java.  Usually, this is useful if we need to create a class that is only useful to another class.  We can group logically relevant classes together.\n\n\nassert\n keyword: \nassert\n works like in C and Python.  You use \nassert\n to check for conditions that has to be true in your code.  If an assertion fails, the program will bail, informing you what went wrong.  This is useful to catch bugs quickly.  Use this by passing a \n-ea\n (enable assertions) flag when running a Java program e.g. \njava -ea LabTwo TESTDATA1.txt\n\n\nFileReader\n: a useful class for reading a stream of characters from a file.\n\n\n\n\n\n\n\n\n\n\n\n\nThis is so that, if you just take the code we give you and submit as is, you cannot claim that it works so we must have you 1 mark.\u00a0\n\u21a9",
            "title": "2. Question"
        },
        {
            "location": "/lab2/index.html#lab-2",
            "text": "Submission deadline: 2359, Sunday, September 10, 2017.",
            "title": "Lab 2"
        },
        {
            "location": "/lab2/index.html#prerequisites",
            "text": "Assume that students are already familiar with:   the  CS2030 laboratory environment  how to compile and run Java programs  familiar with standard I/O and I/O redirection  comfortable with Java syntax  looking up Java API documentation  understand the concepts of encapsulation and using encapsulated objects",
            "title": "Prerequisites"
        },
        {
            "location": "/lab2/index.html#learning-objectives",
            "text": "After completing this lab, students should:   be more comfortable with looking at a complex problem and identify data and procedures that should be kept within an abstraction barrier.  In other words, be more comfortable with creating own encapsulated class.  be more comfortable with basic Java syntax and semantics, particularly when creating classes from scratch.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lab2/index.html#setup",
            "text": "Login to  cs2030-i , copy the files from  ~cs2030/lab02  to your local directory under your home  ~/lab02 .  You should see one java file ( LabTwo.java ) and a few data files ( TESTDATA1.txt ,  TESTDATA2.txt , ...,  TESTDATA5.txt )",
            "title": "Setup"
        },
        {
            "location": "/lab2/index.html#task",
            "text": "LabTwo.java  implements a working discrete event simulator that simulates customers being served by a server.  It is written in procedural style with no encapsulation.  Your task, in this lab, is to rewrite this simulator with OO style, by properly using encapsulation to create abstraction barriers to the various variables and methods.",
            "title": "Task"
        },
        {
            "location": "/lab2/index.html#grading",
            "text": "This lab contributes 4 marks to your final grade (100 marks).\nYou will get 0-3 marks for your design and encapsulation of the classes.\nYou will get 1 mark if you code works correctly (but only if you score at least 1 mark for your design and use of encapsulation 1 )",
            "title": "Grading"
        },
        {
            "location": "/lab2/index.html#discrete-event-simulator",
            "text": "A discrete event simulator is a software that simulates a system (often modeled after the real world) with events and states.  An event occurs at a particular time, and each event alter the states of the system, and may generate more events.  A discrete event simulator can be used to study many complex real world systems.  The term  discrete  refers to the fact that, the states remain unchanged between two events, and therefore, the simulator can  jump  from the time of one event to another, instead of following the clock in real time.  The simulator typically keeps track of some statistics to measure the performance of the system.  In this lab, we start with simulating a specific situation:   We have a shop with a  server  (a person providing service to customer).  The server can serve one customer at a time.  We assume for now that the server takes constant time to serve a customer.\n  The time taken to serve is called  service time .  When a customer arrives:  if the server is idle (not serving any customer), then the server serves the customer immediately (no waiting).  if the server is serving another customer, then the customer that just arrives waits.  if the server is serving one customer, and another customer is waiting, then the customer that just arrives just leave (no waiting) and go elsewhere.  In other words, there is at most one waiting customer.    When the server is done serving a customer:  the served customer leaves.  if there is another customer waiting, the server starts serving the waiting customer immediately.  if there is no waiting customer, then server becomes idle again.     We are interested in the following.  Given a sequence of customer arrivals (time of each arrival is given):   What is the average waiting time for customers that has been served?  How many customers are served?  How many customers left without being served?   In your Lab 2, you are given a simple discrete event simulator to answer the questions above.  There are two classes:  Simulator  and  Event .",
            "title": "Discrete Event Simulator"
        },
        {
            "location": "/lab2/index.html#class-event",
            "text": "The event class is written in procedural style, not unlike a  struct  in C.  All members are public, and there is no method.  Each  Event  keeps track of two information: the  time  the event occurs, and  eventType , which signifies what type of events is this.  Instead of using time like 9:45pm, we simply and represent time as a double value.  1\n2\n3\n4    static   class   Event   { \n     public   double   time ;   // The time this event will occur \n     public   int   eventType ;   // The type of event, indicates what should happen when an event occurs. \n   }    We handle two types of events for this particular scenario: an event of type  CUSTOMER_ARRIVE  means that a customer arrives during this event; while an event of type  CUSTOMER_DONE  means that the customer is done being served.   CUSTOMER_ARRIVE  events are created based on the given input.   CUSTOMER_DONE  events are created and scheduled to occur sometime into the future when a customer is being served.  1\n2    public   static   final   int   CUSTOMER_ARRIVE   =   1 ; \n   public   static   final   int   CUSTOMER_DONE   =   2 ;",
            "title": "Class Event"
        },
        {
            "location": "/lab2/index.html#class-simulator",
            "text": "The simulator class is again written in procedural style.  All members are public, and there is no method.  The  Simulator  class contains two configuration parameters,  MAX_NUMBER_OF_EVENTS  indicates the maximum number of events that the simulator can store at one time;  SERVICE_TIME  indicates the time the server takes to serve a customer. 1\n2      public   int   MAX_NUMBER_OF_EVENTS   =   100 ;   // Maximum number of events \n     public   double   SERVICE_TIME   =   1.0 ;   // Time spent serving a customer    The  events  is an array of  Event  that store all events scheduled for the future in the simulator. 1\n2      public   Event []   events ;   // Array of events, order of events not guaranteed. \n     public   int   numOfEvents ;   // The number of events in the event array.    The simulator needs to keep track of three states:   is a customer being served?  is a customer waiting?  if a customer is waiting, when did he start waiting?   These states are represented as:  1\n2\n3      public   boolean   customerBeingServed ;   // is a customer currently being served? \n     public   boolean   customerWaiting ;   // is a customer currently waiting? \n     public   double   timeStartedWaiting ;   // the time the current waiting customer started waiting    Remember we are interested in the following statistics:   What is the average waiting time for customers that has been served?  How many customers are served?  How many customers left without being served?   which can be computing from the following members:  1\n2\n3      public   double   totalWaitingTime ;   // total time everyone spent waiting \n     public   int   totalNumOfServedCustomer ;   // how many customer has waited \n     public   int   totalNumOfLostCustomer ;   // how many customer has been lost    Finally, for debugging purposes, the simulator assigns unique IDs 1, 2, 3, ... to the customers, in the order of their arrivals.  It then keeps track of the ID of the customer being served (if any) and the customer waiting to be served.  1\n2\n3      public   int   lastCustomerId ;   // starts from 0 and increases as customer arrives. \n     public   int   servedCustomerId ;   // id of the customer being served, if any \n     public   int   waitingCustomerId ;   // id of the customer currently waiting, if any",
            "title": "Class Simulator"
        },
        {
            "location": "/lab2/index.html#interaction-between-simulator-and-event",
            "text": "We create a  Simulator  by calling the method: 1    static   Simulator   createSimulator ()   {..}   \nand an  Event  by calling the method, specifying  when  the event will occur, and the  type  of the event. 1    static   Event   createEvent ( double   when ,   int   type )    {..}    We can schedule the event  e  to be executed by simulator  sim  by calling: 1    static   boolean   scheduleEventInSimulator ( Event   e ,   Simulator   sim )   {..}   \nThis method will return  true  if the event is scheduled succesfully,  false  if the simulator run out of space to store the event (i.e.,  MAX_NUMBER_OF_EVENTS  is reached).  We always execute the events in increasing sequence of their time.  Once the simulator starts running, it repeatedly find the next event with the smallest timestamp (i.e., earliest event), remove it from the list of events, and execute the event.  The simulator stops when there is no more event to run.  1\n2\n3\n4\n5\n6    static   void   runSimulator ( Simulator   sim )   { \n     while   ( sim . numOfEvents   >   0 )   { \n       Event   e   =   getNextEarliestEvent ( sim ); \n       simulateEvent ( sim ,   e ); \n     } \n   }    Here,  e = getNextEarliestEvent(sim)  removes and returns the earliest event in the simulator, and  simulateEvent(sim, e)  update the states of the simulator according to the type of the event  e .",
            "title": "Interaction between Simulator and Event"
        },
        {
            "location": "/lab2/index.html#simulated-system",
            "text": "The logic of the system being simulator (i.e., behavior of customers and server) is implemented in  simulateEvent .  There are four methods being called from here:   serveCustomer(sim, time, id) : called to start serving a customer with ID  id  makeCustomerWait(sim, time, id) : called to make the customer with ID  id  wait  customerLeaves(sim, time, id) : called when the customer with ID  id  who just arrived leaves immediately (as someone else is waiting)  servedWaitingCustomer(sim, time) : called to start serving the customer that is currently waiting.   You should read through  LabTwo.java  and clarify if you are not sure about any part of the given code.",
            "title": "Simulated System"
        },
        {
            "location": "/lab2/index.html#input-arrival-time",
            "text": "The input consists of a sequence of double values, each is the arrival time of a customer (in any order).  We can read from standard input (if no command line argument is given) 1\n2 java LabTwo\njava LabTwo  < TESTDATA1.txt  \nor read from a given filename 1 java LabTwo TESTDATA1   Given an input, the output might not be deterministric, since if two events occur at exactly the same time, we break the ties arbitarily.  For this reason, we will only test your code with input where no two events occur at exactly the same time.",
            "title": "Input: Arrival Time"
        },
        {
            "location": "/lab2/index.html#your-task",
            "text": "The given  LabTwo.java  is written in C style, no minimal encapsulation.  As you read through the code, you should appreciate how messy and difficult to understand the code is.  Your mission, in Lab 2, is to rewrite the code using encapsulation, applying OO paradigm, properly maintain the abstraction barrier when the objects interact.  Here are some rules:   You can add as many classes as you like.  Each class must be in its own  .java  file  The  main  method should remain in a class named  LabTwo .  We must be able to run your code with: 1\n2 javac *.java\njava LabTwo < TESTDATA1.txt   You must not change the formatting of the  last line  of output ( System.out.printf(\"%.3f %d %d\", ..\") ).  We rely on it to check for correctness of your logic.",
            "title": "Your Task"
        },
        {
            "location": "/lab2/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit02   which will copy all files matching  *.java  (and nothing else) from your  ~/lab02  directory on  cs2030-i  to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.  You can submit multiple times, but only the most recent submission will be graded.",
            "title": "Submission"
        },
        {
            "location": "/lab2/index.html#extra-java-stuff",
            "text": "You are exposed to three new Java syntax/class in this Lab:   Nested classes: In the code given to you, we define  Simulator  and  Event  within the class  LabTwo .  This is called  nested class  in Java.  Usually, this is useful if we need to create a class that is only useful to another class.  We can group logically relevant classes together.  assert  keyword:  assert  works like in C and Python.  You use  assert  to check for conditions that has to be true in your code.  If an assertion fails, the program will bail, informing you what went wrong.  This is useful to catch bugs quickly.  Use this by passing a  -ea  (enable assertions) flag when running a Java program e.g.  java -ea LabTwo TESTDATA1.txt  FileReader : a useful class for reading a stream of characters from a file.       This is so that, if you just take the code we give you and submit as is, you cannot claim that it works so we must have you 1 mark.\u00a0 \u21a9",
            "title": "Extra Java Stuff"
        },
        {
            "location": "/lab02-comments/index.html",
            "text": "Lab 2: Comments\n\n\nCorrectness (1 mark)\n\n\nYou get the 1 mark for correctness if your program prints these same outputs as the provided skeleton code:\n\n\n1\n2\n3\n4\n5\nTest Case #1: 0.000 1 0\nTest Case #2: 0.000 4 0\nTest Case #3: 0.450 2 8\nTest Case #4: 0.614 7 0\nTest Case #5: 0.405 76 24\n\n\n\n\n\n\nDesign (3 marks)\n\n\n\n\n\n\n0 marks: No effort made at encapsulation. You also do not get the 1 mark for correctness.\n\n\n\n\n\n\n1 mark: Code is shifted wholesale into different classes and files. Classes are used to house static methods instead of being treated as objects. \nSimulator\n is still being passed around as an argument in all the methods.\n\n\n\n\n\n\n2 marks: All fields (except constants) are not exposed to external modification (via setting to private) and overall no major mistakes made. This is achievable with just the \nLabTwo\n, \nSimulator\n, and \nEvent\n classes.\n\n\n\n\n\n\n3 marks: Customer-handling logic is abstracted away from \nSimulator\n. To achieve this, naturally more classes are needed so that there is a better separation of concerns, and every class only has one single responsibility. Adding a \nCustomer\n and a \nServer\n class (and implementing them well of course) will score 3 marks very stably.\n\n\n\n\n\n\nThese are the rubrics for the different scores for design. We were generally lenient, so as long as your submission is roughly at a certain level, we will give you the marks even if you missed out a few things. Take note that many of the submissions that scored 3 marks still have lots of room for improvement - and we \ndon't\n mean by doing more advanced things like inheritance or interfaces.\n\n\nGeneral Comments on Design\n\n\nOne of the learning objectives of this lab is to identify \ndata (i.e. state / fields)\n and \nprocedures (i.e. methods)\n that should be kept within an abstraction barrier, so that classes do not directly manipulate the state of other classes.\n\n\nProper encapsulation will allow the specific implementation details of each class to be abstracted away from external classes, by only exposing a carefully selected set of public methods. This will make the relationships between all your classes much simpler, because they only interact with each other via those public methods.\n\n\nLet's say we have two classes: \nA\n and \nB\n. \nA\n shouldn't know too much about \nB\n, otherwise it becomes highly-dependant on the internals of \nB\n. It's even worse if \nB\n is also highly-dependant on \nA\n. In software engineering terminology, we say that classes \nA\n and \nB\n are \ntighly-coupled\n (not tested, FYI only). Some of you will realize that your submissions are very \"messy\" because of this.\n\n\nFor Lab 2, we do not penalize having getters and setters. In the real world, they may be absolutely necessary in some situations. But getters and setters are a blunt tool, and having too many of them (we've seen submissions with >10) is probably a symptom that your design can be improved. You are also most likely violating the \"Tell, Don't Ask\" principle.\n\n\nTell, Don't Ask\n\n\na.k.a. Writing code declaratively instead of procedurally\n\n\nHere are two articles that talk about this principle:\n\n\nhttps://pragprog.com/articles/tell-dont-ask\n\n\n\n\nProcedural code gets information then makes decisions. Object-oriented code tells objects to do things.\n\n\n\n\nhttps://robots.thoughtbot.com/tell-dont-ask\n\n\n\n\nGood OOP is about telling objects what you want done, not querying an object and acting on its behalf. Data and operations that depend on that data belong in the same object.\n\n\n\n\nMany students used getter methods to \"ask\" an object for information, handled some logic, and then used setter methods to update the fields of that object. While this is better than making those fields \npublic\n altogether, this often leads to a poorly-defined abstraction barrier. It is almost all the time better to \"tell\" your object to do something instead.\n\n\n\n\nThe Ruby programming language\n\n\nThe code in the second link is written in Ruby, another object-oriented language like Java, except that it is dynamically-typed. Even though it's a different language, it should be easy enough to understand for you to appreciate the examples in the article.\n\n\n\n\n\"I still don't understand!\"\n\n\nHere's a code snippet from the \nSimulator\n class of a 3 mark submission. Compare this with the original method we provided. This is a very good example of what a well-abstracted program looks like, and hopefully it helps to illustrate the concepts mentioned above.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nprivate\n \nvoid\n \nsimulateEvent\n(\nEvent\n \ne\n)\n \n{\n\n  \nswitch\n \n(\ne\n.\ngetType\n())\n \n{\n\n    \ncase\n \nEvent\n.\nCUSTOMER_ARRIVE\n:\n\n      \nCustomer\n \nc\n \n=\n \nnew\n \nCustomer\n(\ne\n.\ngetTime\n());\n\n      \nthis\n.\nserver\n.\nhandleNewCustomer\n(\nc\n);\n\n      \nbreak\n;\n\n\n    \ncase\n \nEvent\n.\nCUSTOMER_DONE\n:\n\n      \nthis\n.\nserver\n.\nfinishServingCurrentCustomer\n(\ne\n.\ngetTime\n());\n\n      \nbreak\n;\n\n\n\n    default:\n\n      \n// ...\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nThis is a reasonable way to use getters like \ngetTime()\n and \ngetType()\n. But you are highly encouraged to think about how you can avoid them for the subsequent labs.\n\n\nCommon Issues\n\n\n\n\n\n\nUse constructors to directly instantiate Event and Simulator objects.\n You need to tell the class what to do when someone does \nnew ClassName()\n.\n\n\n\n\n\n\nThe expected initial state of an object should always be defined in the constructor. Don't pass in those initial values as arguments.\n Otherwise, someone can possibly instantiate an object that has a wrong starting state. Some students had a \nSimulator\n constructor that took in 7 arguments. This violates encapsulation because \nLabTwo\n now needs to know that \nSimulator\n has fields such as \ncustomerWaiting\n and \ncustomerBeingServed\n, and worse, set them to \nfalse\n on \nSimulator\n's behalf. You should try to guarantee that every object contains valid values right from the moment it gets created.\n\n\n\n\n\n\nAlso don't provide a \"default constructor\" that sets dummy values.\n For example, some students had an extra \nEvent\n constructor that took in no arguments and set \ntime\n and \neventType\n to 0. Can you see how this might go wrong? Don't give yourself (and other people) an option to do things that will lead to unexpected mistakes down the road.\n\n\n\n\n\n\nSome students implemented a \npublic Event getEventAt(int index)\n method in the \nSimulator\n.\n This clearly breaks the abstraction barrier, because external classes should never have direct access to the ordering of \nEvent\ns and how they are stored inside \nSimulator\n.\n\n\n\n\n\n\nA few students misunderstood the meaning of encapsulation.\n If a method deals with \nEvent\n objects or has the word \"event\" in its name, that doesn't mean it should belong inside the \nEvent\n class.\n\n\n\n\n\n\nAnother way to improve your design is to shift \nprintStats()\n into the \nrun()\n method of your \nSimulator\n.\n \nLabTwo\n doesn't need to know that \nSimulator\n prints stats when it finishes running. Instead, \nSimulator\n maintains ownership and control over that behavior. In a 3 mark submission with well-separated concerns, the \nSimulator\n would fetch stats such as \ntotalNumOfCustomersServed\n from the \nServer\n class.\n\n\n\n\n\n\nConstants should be declared \nand assigned\n at one go, with the proper modifiers.\n Here's how you should do it: \nprivate static final MY_CONSTANT = 123\n. Changing \nprivate\n to \npublic\n is perfectly acceptable if many classes need access to that constant (e.g. \nEvent.CUSTOMER_ARRIVE\n). If a \"constant\" might have a different value depending on arguments that you pass in, then it's not a constant anymore, is it?\n\n\n\n\n\n\nDon't define constants in more than one place.\n You should only have one source of truth. To achieve this, some students created a \nConstants\n class and put all their constants in there, but the correct way would be to put them in their appropriate classes. Do also note that not all constants need to be \npublic\n (e.g. \nMAX_NUMBER_OF_EVENTS\n should be encapsulated in \nSimulator\n).\n\n\n\n\n\n\nAvoid nesting classes.\n There are very few situations where nested classes are acceptable.\n\n\n\n\n\n\nMethods for internal use only should all be \nprivate\n.\n For that matter, all fields and methods should either be \npublic\n or \nprivate\n. Don't be lazy and skimp on the access modifier - so many students left \ncreateScanner()\n exposed to classes outside of \nLabTwo\n. The only time you might need to think about other levels of access control is when you're dealing with subclasses.\n\n\n\n\n\n\nIt's not strictly required but it's a good practice to \nuse \nthis\n to refer to fields\n so that you distinguish them from other variables or arguments. Methods in the same class, however, should just be called directly without \nthis\n. Same for static fields in the same class.\n\n\n\n\n\n\nWhen you're accessing a static method or field from outside the class, \nalways reference the class rather than the instance\n. For example, do \nEvent.CUSTOMER_ARRIVE\n and not \ne.CUSTOMER_ARRIVE\n.\n\n\n\n\n\n\nSimplicity is underrated.\n Always prefer to structure your code in the simplest way possible. Writing simple code is actually very difficult and takes a lot of conscious effort.\n\n\n\n\n\n\nThere is an exception to everything.\n Well, almost everything. But you better make sure you know the rules well before you try and break them.",
            "title": "2. Comments"
        },
        {
            "location": "/lab02-comments/index.html#lab-2-comments",
            "text": "",
            "title": "Lab 2: Comments"
        },
        {
            "location": "/lab02-comments/index.html#correctness-1-mark",
            "text": "You get the 1 mark for correctness if your program prints these same outputs as the provided skeleton code:  1\n2\n3\n4\n5 Test Case #1: 0.000 1 0\nTest Case #2: 0.000 4 0\nTest Case #3: 0.450 2 8\nTest Case #4: 0.614 7 0\nTest Case #5: 0.405 76 24",
            "title": "Correctness (1 mark)"
        },
        {
            "location": "/lab02-comments/index.html#design-3-marks",
            "text": "0 marks: No effort made at encapsulation. You also do not get the 1 mark for correctness.    1 mark: Code is shifted wholesale into different classes and files. Classes are used to house static methods instead of being treated as objects.  Simulator  is still being passed around as an argument in all the methods.    2 marks: All fields (except constants) are not exposed to external modification (via setting to private) and overall no major mistakes made. This is achievable with just the  LabTwo ,  Simulator , and  Event  classes.    3 marks: Customer-handling logic is abstracted away from  Simulator . To achieve this, naturally more classes are needed so that there is a better separation of concerns, and every class only has one single responsibility. Adding a  Customer  and a  Server  class (and implementing them well of course) will score 3 marks very stably.    These are the rubrics for the different scores for design. We were generally lenient, so as long as your submission is roughly at a certain level, we will give you the marks even if you missed out a few things. Take note that many of the submissions that scored 3 marks still have lots of room for improvement - and we  don't  mean by doing more advanced things like inheritance or interfaces.",
            "title": "Design (3 marks)"
        },
        {
            "location": "/lab02-comments/index.html#general-comments-on-design",
            "text": "One of the learning objectives of this lab is to identify  data (i.e. state / fields)  and  procedures (i.e. methods)  that should be kept within an abstraction barrier, so that classes do not directly manipulate the state of other classes.  Proper encapsulation will allow the specific implementation details of each class to be abstracted away from external classes, by only exposing a carefully selected set of public methods. This will make the relationships between all your classes much simpler, because they only interact with each other via those public methods.  Let's say we have two classes:  A  and  B .  A  shouldn't know too much about  B , otherwise it becomes highly-dependant on the internals of  B . It's even worse if  B  is also highly-dependant on  A . In software engineering terminology, we say that classes  A  and  B  are  tighly-coupled  (not tested, FYI only). Some of you will realize that your submissions are very \"messy\" because of this.  For Lab 2, we do not penalize having getters and setters. In the real world, they may be absolutely necessary in some situations. But getters and setters are a blunt tool, and having too many of them (we've seen submissions with >10) is probably a symptom that your design can be improved. You are also most likely violating the \"Tell, Don't Ask\" principle.",
            "title": "General Comments on Design"
        },
        {
            "location": "/lab02-comments/index.html#tell-dont-ask",
            "text": "a.k.a. Writing code declaratively instead of procedurally  Here are two articles that talk about this principle:  https://pragprog.com/articles/tell-dont-ask   Procedural code gets information then makes decisions. Object-oriented code tells objects to do things.   https://robots.thoughtbot.com/tell-dont-ask   Good OOP is about telling objects what you want done, not querying an object and acting on its behalf. Data and operations that depend on that data belong in the same object.   Many students used getter methods to \"ask\" an object for information, handled some logic, and then used setter methods to update the fields of that object. While this is better than making those fields  public  altogether, this often leads to a poorly-defined abstraction barrier. It is almost all the time better to \"tell\" your object to do something instead.   The Ruby programming language  The code in the second link is written in Ruby, another object-oriented language like Java, except that it is dynamically-typed. Even though it's a different language, it should be easy enough to understand for you to appreciate the examples in the article.",
            "title": "Tell, Don't Ask"
        },
        {
            "location": "/lab02-comments/index.html#i-still-dont-understand",
            "text": "Here's a code snippet from the  Simulator  class of a 3 mark submission. Compare this with the original method we provided. This is a very good example of what a well-abstracted program looks like, and hopefully it helps to illustrate the concepts mentioned above.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 private   void   simulateEvent ( Event   e )   { \n   switch   ( e . getType ())   { \n     case   Event . CUSTOMER_ARRIVE : \n       Customer   c   =   new   Customer ( e . getTime ()); \n       this . server . handleNewCustomer ( c ); \n       break ; \n\n     case   Event . CUSTOMER_DONE : \n       this . server . finishServingCurrentCustomer ( e . getTime ()); \n       break ;      default: \n       // ... \n   }  }    This is a reasonable way to use getters like  getTime()  and  getType() . But you are highly encouraged to think about how you can avoid them for the subsequent labs.",
            "title": "\"I still don't understand!\""
        },
        {
            "location": "/lab02-comments/index.html#common-issues",
            "text": "Use constructors to directly instantiate Event and Simulator objects.  You need to tell the class what to do when someone does  new ClassName() .    The expected initial state of an object should always be defined in the constructor. Don't pass in those initial values as arguments.  Otherwise, someone can possibly instantiate an object that has a wrong starting state. Some students had a  Simulator  constructor that took in 7 arguments. This violates encapsulation because  LabTwo  now needs to know that  Simulator  has fields such as  customerWaiting  and  customerBeingServed , and worse, set them to  false  on  Simulator 's behalf. You should try to guarantee that every object contains valid values right from the moment it gets created.    Also don't provide a \"default constructor\" that sets dummy values.  For example, some students had an extra  Event  constructor that took in no arguments and set  time  and  eventType  to 0. Can you see how this might go wrong? Don't give yourself (and other people) an option to do things that will lead to unexpected mistakes down the road.    Some students implemented a  public Event getEventAt(int index)  method in the  Simulator .  This clearly breaks the abstraction barrier, because external classes should never have direct access to the ordering of  Event s and how they are stored inside  Simulator .    A few students misunderstood the meaning of encapsulation.  If a method deals with  Event  objects or has the word \"event\" in its name, that doesn't mean it should belong inside the  Event  class.    Another way to improve your design is to shift  printStats()  into the  run()  method of your  Simulator .   LabTwo  doesn't need to know that  Simulator  prints stats when it finishes running. Instead,  Simulator  maintains ownership and control over that behavior. In a 3 mark submission with well-separated concerns, the  Simulator  would fetch stats such as  totalNumOfCustomersServed  from the  Server  class.    Constants should be declared  and assigned  at one go, with the proper modifiers.  Here's how you should do it:  private static final MY_CONSTANT = 123 . Changing  private  to  public  is perfectly acceptable if many classes need access to that constant (e.g.  Event.CUSTOMER_ARRIVE ). If a \"constant\" might have a different value depending on arguments that you pass in, then it's not a constant anymore, is it?    Don't define constants in more than one place.  You should only have one source of truth. To achieve this, some students created a  Constants  class and put all their constants in there, but the correct way would be to put them in their appropriate classes. Do also note that not all constants need to be  public  (e.g.  MAX_NUMBER_OF_EVENTS  should be encapsulated in  Simulator ).    Avoid nesting classes.  There are very few situations where nested classes are acceptable.    Methods for internal use only should all be  private .  For that matter, all fields and methods should either be  public  or  private . Don't be lazy and skimp on the access modifier - so many students left  createScanner()  exposed to classes outside of  LabTwo . The only time you might need to think about other levels of access control is when you're dealing with subclasses.    It's not strictly required but it's a good practice to  use  this  to refer to fields  so that you distinguish them from other variables or arguments. Methods in the same class, however, should just be called directly without  this . Same for static fields in the same class.    When you're accessing a static method or field from outside the class,  always reference the class rather than the instance . For example, do  Event.CUSTOMER_ARRIVE  and not  e.CUSTOMER_ARRIVE .    Simplicity is underrated.  Always prefer to structure your code in the simplest way possible. Writing simple code is actually very difficult and takes a lot of conscious effort.    There is an exception to everything.  Well, almost everything. But you better make sure you know the rules well before you try and break them.",
            "title": "Common Issues"
        },
        {
            "location": "/lab3/index.html",
            "text": "Lab 3\n\n\nSubmission deadline: 2359, Sunday, September 17, 2017.\n\n\nPrerequisites\n\n\nThis lab assumes that students:\n\n\n\n\nhave already attempted Lab 2\n\n\nhave an understanding of the customer/server system being simulated\n\n\n\n\nLearning Objectives\n\n\nAfter completing this lab, students should:\n\n\n\n\nbe familiar with the \nCS2030 Java Coding Style\n and comfortable in following them\n\n\nbe familiar with \njavadoc\n syntax\n and comfortable with documenting the code with \njavadoc\n\n\nbe familiar with generating \njavadoc\n documentation\n\n\nbe comfortable reading a Java Collection Framework documentation and use one of the classes provided\n\n\nappreciate the usefulness of Java Collection Framework by seeing how much shorter and cleaner the resulting code is\n\n\nbe familiar with random number generation in \njava.lang.Math\n\n\nbe exposed to the concept of pseudo random number generator and seeds\n\n\n\n\nSetup\n\n\nThere is no new skeleton code provided.  You are to build from your Lab 3 solution based on your Lab 2.  To setup Lab 3, do the following.\n\n\n\n\nLogin to \ncs2030-i\n\n\nCopy \n~/lab02\n to \n~/lab03\n\n\nRename \nLabTwo.java\n to \nLabThree.java\n\n\nRename the class \nLabTwo\n to \nLabThree\n\n\nCopy the test data (\nTESTDATA1.txt\n .. \nTESTDATA5.txt\n) from \n~cs2030/lab03\n to \n~/lab03\n\n\n\n\nIf you are still not familiar with how to do the above, please revisit the \nUNIX\n guide.\n\n\nTask\n\n\nFor Lab 3, you will be asked to make two small changes to the code:\n\n\n\n\nMake the arrival time and service time random\n\n\nUse \nPriorityQueue<Event>\n instead of \nEvent[]\n to schedule the event.\n\n\n\n\nAs a result of this, you might realize that there is a better way to encapsulate the data and the behavior of the various entities in the program.  In which case, you may want to reorganize your classes, create new classes, etc.  Depending on how \"changeable\" your Lab 2 solution is, you may have ended up with more than two small changes.\n\n\nIn addition, you should edit your code so that:\n\n\n\n\nit follows the \nCS2030 Coding Style\n\n\nit is clearly documented with \njavadoc\n comments\n\n\n\n\nGrading\n\n\nThis lab contributes another 4 marks to your final grade (100 marks).\n\n\n\n\n1 marks for coding style\n\n\n1 marks for javadoc\n\n\n1 mark for implementation \nand encapsulation\n of arrival time/service time generation and the priority queue\n\n\n1 mark for correctness\n\n\n\n\nPriority Queuing\n\n\nThe first change you need to do in this assignment is to use one of the Java Collection classes to manage the events.  In \nLabTwo.java\n, we kept all the events in an array, and scanned through it to find the event with the smallest (i.e., earliest) timestamp.  This is not efficient, since scanning through all the events takes time that increases linearly with the number of events\n1\n.\n\n\nJava Collection provides a class that is perfect for our use: \nPriorityQueue<E>\n.  A \nPriorityQueue\n keeps a collection of elements, the elements are given certain priority.  Elements can be added with \nadd(E e)\n method.  To retrieve and remove the elements with highest priority, we use the \npoll()\n method, which returns an object of type \nE\n, or \nnull\n is the queue is empty.\n\n\nIn our case, the event with the smallest timestamp has the highest priority.  To tell the \nPriorityQueue<E>\n class how to order the events so that smaller timestamp has higher priority, we use the \nPriorityQueue<E>\n constructor\n that takes in a \nComparator\n object, just like we see in \nLecture 5\n.\n\n\nIf you design is right, you should only change the code in four places: (i) initialize list of events, (ii) schedule an event, (iii) get the next event, (iv) checking if there is still an event.\n\n\n(Hint: You should be able to implement a \nComparator\n without getter \ngetTime()\n)\n\n\nYou should implement this change first\n, since you can do a sanity check of your correctness against the result of Lab 2 using the test data \nfrom\n Lab 2.\n\n\nRandomized Arrival and Service Time\n\n\nNext, we are going to change how the arrival time and service time is specified, so that we can easily simulate different settings (e.g., a more efficient server with faster service time, more arrivals during weekends, etc).\n\n\nRandom\n\n\nFirst, an introduction to random number generation.  A random number generator is an entity that spews up one random number after another.  We, however, cannot generate a truly random number algorithmically.  We can only generate a \npseudo\n random number.  A pseudo random number generator can be initialized with a \nseed\n.  A pseudo random number generator, when initialized with the same \nseed\n, always produces the same sequence of (seemingly random) numbers.\n\n\nJava provides a class \njava.util.Random\n that encapsulates a pseudo random number generator.  We can create a random number generator with a seed:\n\n\n1\nRandom\n \nrng\n \n=\n \nnew\n \nRandom\n(\n1\n);\n\n\n\n\n\n\n\nWe can then call \nrng.nextDouble()\n repeatedly to generate random numbers between 0 and 1.\n\n\nIn the demo below, we see that creating a \nRandom\n object with the same seed of 2 towards the end leads to the same sequence of random doubles being generated.\n\n\n\n\n\nUsing a fixed seed is important for testing, since the execution of the program will be deterministic, even when random numbers are involved.\n\n\nArrival Time\n\n\nIn Lab 2, the arrival time is given in the input text file.  This approach is less flexible and requires another program to generate the input file.  Further, the original code creates \nall\n the arrival events before the simulation starts, and therefore limits the total number of arrivals to the size of the initial array \nevents\n.\n\n\nWe are going to improve this part of the program, by generating the arrival one after another.  To do this, we need to generate a \nrandom inter-arrival time\n.  The inter-arrival time is usually modeled as a exponential random variable, characterized by a single parameter \n\\(\\lambda\\)\n (\nlambda\n), known as \narrival rate\n.\n\n\nMathematically, the inter-arrival time can be generated with \n\\(-\\ln(U)/\\lambda\\)\n, where \n\\(U\\)\n is a random variable between 0 and 1\n2\n.\n\n\n\n\nEvery time an arrival event is processed, it generates another arrival event and schedule it.\n\n\nIf there are still more customer to simulator, we generate the next arrival event with a timestamp of \n\\(T\\)\n + now, where \n\\(T\\)\n is generated with the Java expression:\n\n1\n  \n-\nMath\n.\nlog\n(\nrng\n.\nnextDouble\n())\n \n/\n \nlambda\n\n\n\n\n\n\nWhen we first start the simulator, we need to generate the first arrival event with timestamp \n\\(T\\)\n, generated with the same expression as above.\n\n\n\n\nYou can adapt the expression above to suit your program.\n\n\nService Time\n\n\nIn Lab 2, the service time is constant, which is not always realistic. We are going to model the service time as a exponential random variable, characterized with a single parameter, \nservice rate\n \n\\(\\mu\\)\n (\nmu\n).  We can generate the service time with the expression \n\\(-\\ln(U)/\\mu\\)\n, where \n\\(U\\)\n is a random variable between 0 and 1.\n\n\n\n\nEvery time a customer is being served, we generate a \"done\" event and schedule it (just like we did it in Lab 2).\n\n\nThe \"done\" event generated will have a timestamp of \n\\(T\\)\n + now, where \n\\(T\\)\n is \nno longer constant \nSERVICE_TIME\n, but instead is generated with the Java expression:\n\n1\n   \n-\nMath\n.\nlog\n(\nrng\n.\nnextDouble\n())\n \n/\n \nmu\n\n\n\n\n\n\n\n\nYou can adapt the expression above to suit your program.\n\n\nNote that \nwe should only have a single random number generator\n in the simulation. (hint: what access modifier should we use?)\n\n\nInput and Output\n\n\nWith this change, the input file should now contain only the \nsimulator parameters\n.  It has four lines:\n\n\n\n\nThe first line is a \nint\n value, indicating the seed to the simulator\n\n\nThe second line is a \ndouble\n value, indicating the service rate \n\\(\\mu\\)\n\n\nThe third line is a \ndouble\n value, indicating the arrival rate \n\\(\\lambda\\)\n\n\nThe fourth line is a \nint\n value, indicating the total number of customers to simulate\n\n\n\n\nWe give you five test inputs: \nTESTDATA1.txt\n to \nTESTDATA5.txt\n.  The output we get with these inputs are:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nooiwt@cs2030-i:~/lab03> java LabThree < TESTDATA1.txt | tail -1\n0.000 1 0\nooiwt@cs2030-i:~/lab03> java LabThree < TESTDATA2.txt | tail -1\n0.924 3 2\nooiwt@cs2030-i:~/lab03> java LabThree < TESTDATA3.txt | tail -1\n0.019 10 0\nooiwt@cs2030-i:~/lab03> java LabThree < TESTDATA4.txt | tail -1\n0.832 3 7\nooiwt@cs2030-i:~/lab03> java LabThree < TESTDATA5.txt | tail -1\n0.530 634 366\n\n\n\n\n\n\nYour Task\n\n\nYour mission, in Lab 3, is update your solution in Lab 2 to:\n\n\n\n\nfollow the style guideline\n\n\nadd \njavadoc\n comments to code (\njavadoc\n should not produce any warning)\n\n\nuse \nPriorityQueue<E>\n to manage the events\n\n\nuse randomly generated service time and arrival time, specified by a new input file format\n\n\nimprove your existing encapsulations, create new encapsultions, etc. if necessary\n\n\n\n\nThe \nmain\n method should remain in a class named \nLabThree\n.  We must be able to run your code with:\n\n1\n2\njavac *.java\njava LabThree < TESTDATA1.txt\n\n\n\n\n\nYou also must not change the formatting of the \nlast line\n of output:\n\n1\nSystem\n.\nout\n.\nprintf\n(\n\"%.3f %d %d\"\n,\n \n..\n\"\n)\n\n\n\n\n\n\nWe rely on it to check for correctness of your logic.\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit03\n\n\n\n\n\nwhich will copy all files matching \n*.java\n (and nothing else) from your \n~/lab03\n directory on \ncs2030-i\n to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\n\n\n\n\n\n\n\n\nFor those who are taking CS2040, we say this is \n\\(O(n)\\)\n time.  A heap-based priority queue, on the other hand, takes \n\\(O(log n)\\)\n time.\u00a0\n\u21a9\n\n\n\n\n\n\nIf you are not familiar with exponential distribution and random variable, do not worry, the code is being given to you.  These concepts are covered in ST2334.\u00a0\n\u21a9",
            "title": "3. Question"
        },
        {
            "location": "/lab3/index.html#lab-3",
            "text": "Submission deadline: 2359, Sunday, September 17, 2017.",
            "title": "Lab 3"
        },
        {
            "location": "/lab3/index.html#prerequisites",
            "text": "This lab assumes that students:   have already attempted Lab 2  have an understanding of the customer/server system being simulated",
            "title": "Prerequisites"
        },
        {
            "location": "/lab3/index.html#learning-objectives",
            "text": "After completing this lab, students should:   be familiar with the  CS2030 Java Coding Style  and comfortable in following them  be familiar with  javadoc  syntax  and comfortable with documenting the code with  javadoc  be familiar with generating  javadoc  documentation  be comfortable reading a Java Collection Framework documentation and use one of the classes provided  appreciate the usefulness of Java Collection Framework by seeing how much shorter and cleaner the resulting code is  be familiar with random number generation in  java.lang.Math  be exposed to the concept of pseudo random number generator and seeds",
            "title": "Learning Objectives"
        },
        {
            "location": "/lab3/index.html#setup",
            "text": "There is no new skeleton code provided.  You are to build from your Lab 3 solution based on your Lab 2.  To setup Lab 3, do the following.   Login to  cs2030-i  Copy  ~/lab02  to  ~/lab03  Rename  LabTwo.java  to  LabThree.java  Rename the class  LabTwo  to  LabThree  Copy the test data ( TESTDATA1.txt  ..  TESTDATA5.txt ) from  ~cs2030/lab03  to  ~/lab03   If you are still not familiar with how to do the above, please revisit the  UNIX  guide.",
            "title": "Setup"
        },
        {
            "location": "/lab3/index.html#task",
            "text": "For Lab 3, you will be asked to make two small changes to the code:   Make the arrival time and service time random  Use  PriorityQueue<Event>  instead of  Event[]  to schedule the event.   As a result of this, you might realize that there is a better way to encapsulate the data and the behavior of the various entities in the program.  In which case, you may want to reorganize your classes, create new classes, etc.  Depending on how \"changeable\" your Lab 2 solution is, you may have ended up with more than two small changes.  In addition, you should edit your code so that:   it follows the  CS2030 Coding Style  it is clearly documented with  javadoc  comments",
            "title": "Task"
        },
        {
            "location": "/lab3/index.html#grading",
            "text": "This lab contributes another 4 marks to your final grade (100 marks).   1 marks for coding style  1 marks for javadoc  1 mark for implementation  and encapsulation  of arrival time/service time generation and the priority queue  1 mark for correctness",
            "title": "Grading"
        },
        {
            "location": "/lab3/index.html#priority-queuing",
            "text": "The first change you need to do in this assignment is to use one of the Java Collection classes to manage the events.  In  LabTwo.java , we kept all the events in an array, and scanned through it to find the event with the smallest (i.e., earliest) timestamp.  This is not efficient, since scanning through all the events takes time that increases linearly with the number of events 1 .  Java Collection provides a class that is perfect for our use:  PriorityQueue<E> .  A  PriorityQueue  keeps a collection of elements, the elements are given certain priority.  Elements can be added with  add(E e)  method.  To retrieve and remove the elements with highest priority, we use the  poll()  method, which returns an object of type  E , or  null  is the queue is empty.  In our case, the event with the smallest timestamp has the highest priority.  To tell the  PriorityQueue<E>  class how to order the events so that smaller timestamp has higher priority, we use the  PriorityQueue<E>  constructor  that takes in a  Comparator  object, just like we see in  Lecture 5 .  If you design is right, you should only change the code in four places: (i) initialize list of events, (ii) schedule an event, (iii) get the next event, (iv) checking if there is still an event.  (Hint: You should be able to implement a  Comparator  without getter  getTime() )  You should implement this change first , since you can do a sanity check of your correctness against the result of Lab 2 using the test data  from  Lab 2.",
            "title": "Priority Queuing"
        },
        {
            "location": "/lab3/index.html#randomized-arrival-and-service-time",
            "text": "Next, we are going to change how the arrival time and service time is specified, so that we can easily simulate different settings (e.g., a more efficient server with faster service time, more arrivals during weekends, etc).",
            "title": "Randomized Arrival and Service Time"
        },
        {
            "location": "/lab3/index.html#random",
            "text": "First, an introduction to random number generation.  A random number generator is an entity that spews up one random number after another.  We, however, cannot generate a truly random number algorithmically.  We can only generate a  pseudo  random number.  A pseudo random number generator can be initialized with a  seed .  A pseudo random number generator, when initialized with the same  seed , always produces the same sequence of (seemingly random) numbers.  Java provides a class  java.util.Random  that encapsulates a pseudo random number generator.  We can create a random number generator with a seed:  1 Random   rng   =   new   Random ( 1 );    We can then call  rng.nextDouble()  repeatedly to generate random numbers between 0 and 1.  In the demo below, we see that creating a  Random  object with the same seed of 2 towards the end leads to the same sequence of random doubles being generated.   Using a fixed seed is important for testing, since the execution of the program will be deterministic, even when random numbers are involved.",
            "title": "Random"
        },
        {
            "location": "/lab3/index.html#arrival-time",
            "text": "In Lab 2, the arrival time is given in the input text file.  This approach is less flexible and requires another program to generate the input file.  Further, the original code creates  all  the arrival events before the simulation starts, and therefore limits the total number of arrivals to the size of the initial array  events .  We are going to improve this part of the program, by generating the arrival one after another.  To do this, we need to generate a  random inter-arrival time .  The inter-arrival time is usually modeled as a exponential random variable, characterized by a single parameter  \\(\\lambda\\)  ( lambda ), known as  arrival rate .  Mathematically, the inter-arrival time can be generated with  \\(-\\ln(U)/\\lambda\\) , where  \\(U\\)  is a random variable between 0 and 1 2 .   Every time an arrival event is processed, it generates another arrival event and schedule it.  If there are still more customer to simulator, we generate the next arrival event with a timestamp of  \\(T\\)  + now, where  \\(T\\)  is generated with the Java expression: 1    - Math . log ( rng . nextDouble ())   /   lambda    When we first start the simulator, we need to generate the first arrival event with timestamp  \\(T\\) , generated with the same expression as above.   You can adapt the expression above to suit your program.",
            "title": "Arrival Time"
        },
        {
            "location": "/lab3/index.html#service-time",
            "text": "In Lab 2, the service time is constant, which is not always realistic. We are going to model the service time as a exponential random variable, characterized with a single parameter,  service rate   \\(\\mu\\)  ( mu ).  We can generate the service time with the expression  \\(-\\ln(U)/\\mu\\) , where  \\(U\\)  is a random variable between 0 and 1.   Every time a customer is being served, we generate a \"done\" event and schedule it (just like we did it in Lab 2).  The \"done\" event generated will have a timestamp of  \\(T\\)  + now, where  \\(T\\)  is  no longer constant  SERVICE_TIME , but instead is generated with the Java expression: 1     - Math . log ( rng . nextDouble ())   /   mu     You can adapt the expression above to suit your program.  Note that  we should only have a single random number generator  in the simulation. (hint: what access modifier should we use?)",
            "title": "Service Time"
        },
        {
            "location": "/lab3/index.html#input-and-output",
            "text": "With this change, the input file should now contain only the  simulator parameters .  It has four lines:   The first line is a  int  value, indicating the seed to the simulator  The second line is a  double  value, indicating the service rate  \\(\\mu\\)  The third line is a  double  value, indicating the arrival rate  \\(\\lambda\\)  The fourth line is a  int  value, indicating the total number of customers to simulate   We give you five test inputs:  TESTDATA1.txt  to  TESTDATA5.txt .  The output we get with these inputs are:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 ooiwt@cs2030-i:~/lab03> java LabThree < TESTDATA1.txt | tail -1\n0.000 1 0\nooiwt@cs2030-i:~/lab03> java LabThree < TESTDATA2.txt | tail -1\n0.924 3 2\nooiwt@cs2030-i:~/lab03> java LabThree < TESTDATA3.txt | tail -1\n0.019 10 0\nooiwt@cs2030-i:~/lab03> java LabThree < TESTDATA4.txt | tail -1\n0.832 3 7\nooiwt@cs2030-i:~/lab03> java LabThree < TESTDATA5.txt | tail -1\n0.530 634 366",
            "title": "Input and Output"
        },
        {
            "location": "/lab3/index.html#your-task",
            "text": "Your mission, in Lab 3, is update your solution in Lab 2 to:   follow the style guideline  add  javadoc  comments to code ( javadoc  should not produce any warning)  use  PriorityQueue<E>  to manage the events  use randomly generated service time and arrival time, specified by a new input file format  improve your existing encapsulations, create new encapsultions, etc. if necessary   The  main  method should remain in a class named  LabThree .  We must be able to run your code with: 1\n2 javac *.java\njava LabThree < TESTDATA1.txt   You also must not change the formatting of the  last line  of output: 1 System . out . printf ( \"%.3f %d %d\" ,   .. \" )    We rely on it to check for correctness of your logic.",
            "title": "Your Task"
        },
        {
            "location": "/lab3/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit03   which will copy all files matching  *.java  (and nothing else) from your  ~/lab03  directory on  cs2030-i  to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.  You can submit multiple times, but only the most recent submission will be graded.      For those who are taking CS2040, we say this is  \\(O(n)\\)  time.  A heap-based priority queue, on the other hand, takes  \\(O(log n)\\)  time.\u00a0 \u21a9    If you are not familiar with exponential distribution and random variable, do not worry, the code is being given to you.  These concepts are covered in ST2334.\u00a0 \u21a9",
            "title": "Submission"
        },
        {
            "location": "/lab4/index.html",
            "text": "Lab 4\n\n\nSubmission deadline: 2359, \nSunday, September 24, 2017.\n Monday, September 25, 2017.\n\n\nPrerequisites\n\n\nThis lab assumes that students:\n\n\n\n\nhave already attempted Lab 3\n\n\nhave an understanding of the customer/server system being simulated\n\n\nare familiar with CS2030 coding style and javadoc documentation\n\n\nare comfortable with using Java Collection Framework\n\n\nare familiar with random number generation in \njava.lang.Math\n\n\nare familiar with static methods and variables\n\n\nare familiar with inheritance and interfaces\n\n\n\n\nLearning Objectives\n\n\nAfter completing this lab, students should:\n\n\n\n\ndevelop a better appreciation of object-oriented programming, especially in encapsulating data and behavior within classes\n\n\ndevelop the mentality to think about future possible extensions beyond current requirement and design for change.\n\n\n\n\nSetup\n\n\nThere is no new skeleton code provided.  You are to build from your Lab 4 solution based on your Lab 3.  To setup Lab 4, do the following.  \n\n\n\n\nLogin to \ncs2030-i\n\n\nCopy \n~/lab03\n to \n~/lab04\n \n\n\nRename \nLabThree.java\n to \nLabFour.java\n\n\nRename the class \nLabThree\n to \nLabFour\n\n\nCopy the test data (\nTESTDATA1.txt\n .. \nTESTDATA4.txt\n) from \n~cs2030/lab04\n to \n~/lab04\n1\n\n\n\n\nTask\n\n\nFor Lab 4, you will be asked to make changes to your Labs 2 and 3, to:\n\n\n\n\nAllow multiple servers to serve customers at the same time\n\n\nAllow multiple customers waiting at the same time, with two configurations -- either everyone wait at a single queue (e.g., at SingPost Post Office) or every server has its own queue.\n\n\n\n\nAs a result of this, you might realize that there is a better way to encapsulate the data and the behavior of the various entities in the program.  In which case, you may want to reorganize your classes, create new classes, etc.  Depending on how \"changeable\" your Lab 3 solution is, you may have ended up with major changes.  This lab is complex enough that declaring parent types (abstract classes, concrete classes, interfaces) might begin to be useful.\n\n\nYou are still required to\n- follows the \nCS2030 Coding Style\n\n- clearly documented with \njavadoc\n\n\nGrading\n\n\nThis lab contributes another 4 marks to your final grade (100 marks).\n\n\n\n\n1 mark for design of multiple servers\n\n\n1 mark for design of multiple waiting customers\n\n\n1 mark for correctness\n\n\n1 mark for documentation and style\n\n\n\n\nMultiple Servers\n\n\nThe first change you need to do in this lab assignment is to model multiple servers.  Places like supermarkets, banks, post offices, etc, usually provides multiple counters to serve their customers.  This situation is what are want to model here.  Each server serves their customer independently.  The state of the servers is visible to the customers (e.g., a customer can check if any of the servers is idle).\n\n\nJust like before, we assume that if there is a customer waiting, then an idle server must serve the next customer immediately.  In the case where each server has its own queue, then the server only serve the next customer in its queue (i.e., it will not get a customer from neighboring queue).  So it is possible for a server to be idle, with no customer in its queue, but there are still waiting customers in the system (in other queues).\n\n\nWe assume that every server has the same service rate \n\\(\\mu\\)\n.  We might naturally think that service time is a property associated with a server.  But, how long it takes to serve a customer, depends on the service needed by the customer (e.g., how many items the customer buys).  Thus, for our labs, we are going to associate a randomly generated service time with each customer.  As in Lab 3, the service time is exponentially distributed and can be generated with the same formula that depends on the service rate \n\\(\\mu\\)\n and a uniformly random value obtained from a \nRandom\n object.\n\n\nMultiple Waiting Customers\n\n\nSo far, we only model one waiting customer (at most).  The next change is to expand the model to allow multiple waiting customers.  Just like a real system, customers queued up if the server is busy.  We will have two possible configurations: a single queue or multiple queues.\n\n\n\n\n\n\nAll servers share a single queue.  Once a server finishes serving a customer, it gets the next customer in the shared queue, or\n\n\n\n\n\n\nEach server has its own queue.  Once a server finishes serving a customer, it gets the next customer in its queue.\n\n\n\n\n\n\nFor this lab:\n\n\n\n\nA queue has an unlimited capacity\n\n\nA customer never leaves until he/she is served\n\n\nWhen a customer arrives, if there is at least one idle server, the customer go to any one of the idle servers (it can go to the first server it finds idling).  If none of the servers is idle, the customer randomly chooses a queue to join in the case where each server has its own queue.\n\n\nFor simplicity, once a customer joins a queue, it is committed to that queue, he/she will not switch to another shorter queue, or go to a server that is now idle.\n\n\n\n\nIn the next lab, we will consider different customer behavior when choosing which queue to join and when waiting in a queue (such as switching to a shorter queue or leaving if waiting for too long).  So, you may want to design your program so that it is flexible to support different customer behavior.\n\n\nTerminating Condition\n\n\nSince Lab 2, we have been terminating the simulation based on the number of customers served, i.e., we always served a fixed number of customers.  From this lab onwards, we will be terminating the simulation based on time -- i.e., we will simulate until the simulated time hits a given value, then, regardless of how many customers have been served, we will print the statistics and quit.  \n\n\nThis change sets the stage for further separation of \nSimulator\n from the actual systems being simulated.  Eventually, we want your \nSimulator\n to be a general simulator that can simulate systems other than queueing customers.\n\n\nInput Files\n\n\nWith this change, the input file now contains additional \nsimulator parameters\n.  It has the following lines:\n\n\n\n\nThe first line is an \nint\n value, indicating the seed to the simulator\n\n\nThe next line is an \nint\n value, indicating the number of servers \n\\(c\\)\n\n\nThe next line contains a \ndouble\n value, indicating the service rate \n\\(\\mu\\)\n\n\nThe next line is an \nint\n value, indicating the number of queues -- it must be either 1 or \n\\(c\\)\n\n\nThe next line is a \ndouble\n value, indicating the arrival rate \n\\(\\lambda\\)\n\n\nThe last line is a \ndouble\n value, indicating the total simulation time.\n\n\n\n\nOutput\n\n\nAs the system being simulation become complex, it is hard to match the output of the programs, without putting too much constraint about how you implement your solution.  But, if we simulate large enough number of customers, the calculated average waiting time should not be too different.  As such, we will simulate for a long period of time (1,000,000), and check if your average waiting time is within a given range of our answers\n1\n.  Like in previous two labs, the last line of your program output should not be changed.  It should remain as:\n\n1\nSystem\n.\nout\n.\nprintf\n(\n\"%.3f %d %d\"\n,\n \n..\n\"\n)\n\n\n\n\n\n\nThe two integer outputs are not as important here\n2\n, but let's keep it there and print them anyway (they will be useful again in future labs!)\n\n\n\n\n\n\n\n\nTEST\n\n\nAverage Waiting Time\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1.36 - 1.42\n\n\n\n\n\n\n\n\n2\n\n\n0.63 - 0.67\n\n\n\n\n\n\n\n\n3\n\n\n1.31 - 1.35\n\n\n\n\n\n\n\n\n4\n\n\n48000 - 52000\n\n\n\n\n\n\n\n\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit04\n\n\n\n\n\nwhich will copy all files matching \n*.java\n (and nothing else) from your \n~/lab04\n directory on \ncs2030-i\n to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\n\n\n\n\n\n\n\n\nYour code might still be correct if it is slightly out of range -- try a different seed and see.  If it gets consistently out of range, or is way out of range, then double check your logic.\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nWith an infinite capacity queue, everyone gets served.  So we will not have any lost customer, at least for this lab.\u00a0\n\u21a9",
            "title": "4. Question"
        },
        {
            "location": "/lab4/index.html#lab-4",
            "text": "Submission deadline: 2359,  Sunday, September 24, 2017.  Monday, September 25, 2017.",
            "title": "Lab 4"
        },
        {
            "location": "/lab4/index.html#prerequisites",
            "text": "This lab assumes that students:   have already attempted Lab 3  have an understanding of the customer/server system being simulated  are familiar with CS2030 coding style and javadoc documentation  are comfortable with using Java Collection Framework  are familiar with random number generation in  java.lang.Math  are familiar with static methods and variables  are familiar with inheritance and interfaces",
            "title": "Prerequisites"
        },
        {
            "location": "/lab4/index.html#learning-objectives",
            "text": "After completing this lab, students should:   develop a better appreciation of object-oriented programming, especially in encapsulating data and behavior within classes  develop the mentality to think about future possible extensions beyond current requirement and design for change.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lab4/index.html#setup",
            "text": "There is no new skeleton code provided.  You are to build from your Lab 4 solution based on your Lab 3.  To setup Lab 4, do the following.     Login to  cs2030-i  Copy  ~/lab03  to  ~/lab04    Rename  LabThree.java  to  LabFour.java  Rename the class  LabThree  to  LabFour  Copy the test data ( TESTDATA1.txt  ..  TESTDATA4.txt ) from  ~cs2030/lab04  to  ~/lab04 1",
            "title": "Setup"
        },
        {
            "location": "/lab4/index.html#task",
            "text": "For Lab 4, you will be asked to make changes to your Labs 2 and 3, to:   Allow multiple servers to serve customers at the same time  Allow multiple customers waiting at the same time, with two configurations -- either everyone wait at a single queue (e.g., at SingPost Post Office) or every server has its own queue.   As a result of this, you might realize that there is a better way to encapsulate the data and the behavior of the various entities in the program.  In which case, you may want to reorganize your classes, create new classes, etc.  Depending on how \"changeable\" your Lab 3 solution is, you may have ended up with major changes.  This lab is complex enough that declaring parent types (abstract classes, concrete classes, interfaces) might begin to be useful.  You are still required to\n- follows the  CS2030 Coding Style \n- clearly documented with  javadoc",
            "title": "Task"
        },
        {
            "location": "/lab4/index.html#grading",
            "text": "This lab contributes another 4 marks to your final grade (100 marks).   1 mark for design of multiple servers  1 mark for design of multiple waiting customers  1 mark for correctness  1 mark for documentation and style",
            "title": "Grading"
        },
        {
            "location": "/lab4/index.html#multiple-servers",
            "text": "The first change you need to do in this lab assignment is to model multiple servers.  Places like supermarkets, banks, post offices, etc, usually provides multiple counters to serve their customers.  This situation is what are want to model here.  Each server serves their customer independently.  The state of the servers is visible to the customers (e.g., a customer can check if any of the servers is idle).  Just like before, we assume that if there is a customer waiting, then an idle server must serve the next customer immediately.  In the case where each server has its own queue, then the server only serve the next customer in its queue (i.e., it will not get a customer from neighboring queue).  So it is possible for a server to be idle, with no customer in its queue, but there are still waiting customers in the system (in other queues).  We assume that every server has the same service rate  \\(\\mu\\) .  We might naturally think that service time is a property associated with a server.  But, how long it takes to serve a customer, depends on the service needed by the customer (e.g., how many items the customer buys).  Thus, for our labs, we are going to associate a randomly generated service time with each customer.  As in Lab 3, the service time is exponentially distributed and can be generated with the same formula that depends on the service rate  \\(\\mu\\)  and a uniformly random value obtained from a  Random  object.",
            "title": "Multiple Servers"
        },
        {
            "location": "/lab4/index.html#multiple-waiting-customers",
            "text": "So far, we only model one waiting customer (at most).  The next change is to expand the model to allow multiple waiting customers.  Just like a real system, customers queued up if the server is busy.  We will have two possible configurations: a single queue or multiple queues.    All servers share a single queue.  Once a server finishes serving a customer, it gets the next customer in the shared queue, or    Each server has its own queue.  Once a server finishes serving a customer, it gets the next customer in its queue.    For this lab:   A queue has an unlimited capacity  A customer never leaves until he/she is served  When a customer arrives, if there is at least one idle server, the customer go to any one of the idle servers (it can go to the first server it finds idling).  If none of the servers is idle, the customer randomly chooses a queue to join in the case where each server has its own queue.  For simplicity, once a customer joins a queue, it is committed to that queue, he/she will not switch to another shorter queue, or go to a server that is now idle.   In the next lab, we will consider different customer behavior when choosing which queue to join and when waiting in a queue (such as switching to a shorter queue or leaving if waiting for too long).  So, you may want to design your program so that it is flexible to support different customer behavior.",
            "title": "Multiple Waiting Customers"
        },
        {
            "location": "/lab4/index.html#terminating-condition",
            "text": "Since Lab 2, we have been terminating the simulation based on the number of customers served, i.e., we always served a fixed number of customers.  From this lab onwards, we will be terminating the simulation based on time -- i.e., we will simulate until the simulated time hits a given value, then, regardless of how many customers have been served, we will print the statistics and quit.    This change sets the stage for further separation of  Simulator  from the actual systems being simulated.  Eventually, we want your  Simulator  to be a general simulator that can simulate systems other than queueing customers.",
            "title": "Terminating Condition"
        },
        {
            "location": "/lab4/index.html#input-files",
            "text": "With this change, the input file now contains additional  simulator parameters .  It has the following lines:   The first line is an  int  value, indicating the seed to the simulator  The next line is an  int  value, indicating the number of servers  \\(c\\)  The next line contains a  double  value, indicating the service rate  \\(\\mu\\)  The next line is an  int  value, indicating the number of queues -- it must be either 1 or  \\(c\\)  The next line is a  double  value, indicating the arrival rate  \\(\\lambda\\)  The last line is a  double  value, indicating the total simulation time.",
            "title": "Input Files"
        },
        {
            "location": "/lab4/index.html#output",
            "text": "As the system being simulation become complex, it is hard to match the output of the programs, without putting too much constraint about how you implement your solution.  But, if we simulate large enough number of customers, the calculated average waiting time should not be too different.  As such, we will simulate for a long period of time (1,000,000), and check if your average waiting time is within a given range of our answers 1 .  Like in previous two labs, the last line of your program output should not be changed.  It should remain as: 1 System . out . printf ( \"%.3f %d %d\" ,   .. \" )    The two integer outputs are not as important here 2 , but let's keep it there and print them anyway (they will be useful again in future labs!)     TEST  Average Waiting Time       1  1.36 - 1.42     2  0.63 - 0.67     3  1.31 - 1.35     4  48000 - 52000",
            "title": "Output"
        },
        {
            "location": "/lab4/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit04   which will copy all files matching  *.java  (and nothing else) from your  ~/lab04  directory on  cs2030-i  to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.  You can submit multiple times, but only the most recent submission will be graded.      Your code might still be correct if it is slightly out of range -- try a different seed and see.  If it gets consistently out of range, or is way out of range, then double check your logic.\u00a0 \u21a9 \u21a9    With an infinite capacity queue, everyone gets served.  So we will not have any lost customer, at least for this lab.\u00a0 \u21a9",
            "title": "Submission"
        },
        {
            "location": "/lab5/index.html",
            "text": "Lab 5\n\n\nSubmission deadline: 2359, \nWednesday\n, October 11, 2017.\n\n\nYou have more time than normal to complete Lab 5.\n\n\nPrerequisites\n\n\nThis lab assumes that students:\n\n\n\n\nhave already attempted Lab 4\n\n\nhave an understanding of the multi-queues, multi-servers system being simulated\n\n\nare familiar with CS2030 coding style and javadoc documentation\n\n\nare comfortable with using Java Collections Framework\n\n\nare familiar with random number generation in \njava.lang.Math\n\n\nare familiar with static methods and variables\n\n\nare familiar with inheritance and interfaces\n\n\n\n\nLearning Objectives\n\n\nAfter completing this lab, students should develop a better appreciation of object-oriented programming, especially in:\n\n\n\n\nencapsulating data and behavior within classes\n\n\ninheriting common behavior from the parent class and implementing sub-class specific behaviors by overriding the parent class\n\n\nthe ease of extending an existing program with new behaviors if the right encapsulations are used.\n\n\n\n\nSetup\n\n\nA sample code that solves Lab 4 is given.  Read it carefully and understand all the classes and APIs given.  \n\n\nAfter which, you are free to choose, either:\n\n\n\n\nextend the given code for Lab 4 to solve Lab 5, or\n\n\nextend your own code for Lab 4 to solve Lab 5\n\n\n\n\nI encourage you to do both, and compare how easy / difficult it is to extend the two versions of the code to implement the new requirements of Lab 5.\n\n\nThe sample code from Lab 4 is available on \ncs2030-i\n under the directory \n~cs2030/lab04/sample\n.   The test data (\nTESTDATA1.txt\n .. \nTESTDATA9.txt\n for Lab 5 is available in \n~cs2030/lab05\n.\n\n\nTask\n\n\nFor Lab 5, you will be asked to make changes to your Lab 4, to:\n\n\n\n\nSupport different types of customers\n\n\nSupport three new types of events\n\n\n\n\nYou are still required to\n\n\n\n\nfollows the \nCS2030 Coding Style\n\n\nclearly documented with \njavadoc\n\n\n\n\nTake A Break\n\n\nWe have been working our servers in Lab 4 very hard.  They do not get a break, even after serving one million customers!  In this lab, we will allow our servers to take a break.  \n\n\nHere is how a server takes a break:\n\n\n\n\nAfter a server completes serving a customer, a server either takes a break with probability \n\\(p_b\\)\n, or serves the next customer with probability (1-\n\\(p_b\\)\n).\n\n\nThe length of a server's break is random, and is drawn from an exponential distribution with rate parameter \n\\(\\beta\\)\n.  \n\n\nAfter the break is over, the server returns to its duty and serves the next customer (if available).\n\n\n\n\nTo implement this, you can create two new types of events, one for going for break, the other for returning from break, which you can create and schedule in the simulator with the logic above.\n\n\nNew Type of Customers\n\n\nLet's call the customers we implemented in Lab 4 as \ntypical\n customers.  A typical customer, upon arrival, joins a random queue if none of the server can serve the customer immediately.  Note that while in Lab 4, this means that none of the server is idle, in Lab 5, we have to consider that a server might be on a break.  So a customer joins a random queue if every server is either busy or on a break.  A customer, however, can queue up for a server that is on a break.\n\n\nWe will add two new types of customer in Lab 5.  A kiasu\n1\n customer is one that \n\njoins the shortest queue\n2\n upon arrival if none of the server is available to serve it immediately.  A pioneer\n3\n customer is one that has highest priority to being served -- he/she always joins the queue at the front of the queue upon arrival, even if there is another pioneer customer at the front of the queue\n4\n\nPioneer customers chooses a queue to join randomly, since the length of the queue has no affect on them.\n\n\nWhen the simulator generates a new customer, there is a \n\\(p_k\\)\n probability that the customer is a kiasu customer.  There is another probability \n\\(p_p\\)\n that the customer is a pioneer customer.  A typical customer is generated if a customer is neither a kiasu nor pioneer customer.\n\n\nSwitching Queues\n\n\nWe will introduce a new behavior to our customers, \nregardless of which type they are\n.  A customer, at some random time after joining the queue, decides to look around and look for either: (i) an idle server who is not on a break, or (ii) the shortest queue to join.  If an idle server who is not on a break is found, the customer leaves its current queue, goes to that server, and is served immediately. \nOtherwise, the customer looks for the shortest queue\n5\n  If joining the shortest queue would reduce the number of other customers in front of this customer, it will leave its current queue and join that shortest queue.  Note that it does this even when the server for that shortest queue is on a break.\n\n\nRegardless of whether a customer switch queue or not, it always try to do that again after some random time, until the customer is no longer in the queue.\n\n\nYou can implement this with another new type of \"switch\" event.  Upon joining a queue, we schedule a \"switch\" event some time in the future (a random time interval drawn from exponential distribution just like Lab 3, with rate parameter \n\\(\\sigma\\)\n).  After every \"switch\" event, we schedule another one for the same customer, again, some random time in the future drawn from the same distribution.\n\n\nNote that by the time the simulator gets to a \"switch\" event, it is possible that the customer has already left the queue (either being served or completed the service).  In this case, we should just discard the \"switch\" event.\n\n\nWe focus on the case with multiple queues, although the resulting code should still work for the case of single queue, it is less interesting for this lab.\n\n\nImplementation Hints\n\n\nRandom number generation\n\n\nTo do something randomly with probability \n\\(p\\)\n, you can use the \nnextDouble()\n method of \nRandom\n class to throw a dice.\n\n\n1\n2\n3\n4\ndouble\n \ndice\n \n=\n \nrandom\n.\nnextDouble\n();\n\n\nif\n \n(\ndice\n \n<\n \np\n)\n \n{\n\n  \ndoSomething\n();\n\n\n}\n\n\n\n\n\n\n\nTo do something randomly with probability \n\\(p\\)\n, and something else with probability \n\\(q\\)\n, you can: \n\n\n1\n2\n3\n4\n5\n6\ndouble\n \ndice\n \n=\n \nrandom\n.\nnextDouble\n();\n\n\nif\n \n(\ndice\n \n<\n \np\n)\n \n{\n\n  \ndoSomething\n();\n\n\n}\n \nelse\n \nif\n \n(\ndice\n \n>\n \n1\n-\nq\n)\n \n{\n\n  \ndoSomethingElse\n();\n\n\n}\n\n\n\n\n\n\n\nTo generate inter-switching time with parameter \n\\(\\sigma\\)\n and break time with parameter \n\\(\\beta\\)\n that follows the exponential distribution, you can use the same methods as Lab 3:\n\n\n1\n  \n-\nMath\n.\nlog\n(\nrng\n.\nnextDouble\n())\n \n/\n \nrate\n\n\n\n\n\n\n\nwhere \nrate\n is either \n\\(\\beta\\)\n or \n\\(\\sigma\\)\n.\n\n\nCollections\n\n\nJava provides a utilitiy class called \nCollections\n, full of useful methods.  You may find it useful for your Lab 5.\n\n\nInput Files\n\n\nWith this change, the input file now contains additional \nsimulator parameters\n.  The first new lines are the same as Lab 4:\n\n\n\n\nThe first line is an \nint\n value, indicating the seed to the simulator\n\n\nThe next line is an \nint\n value, indicating the number of servers \n\\(c\\)\n\n\nThe next line contains a \ndouble\n value, indicating the service rate \n\\(\\mu\\)\n\n\nThe next line is an \nint\n value, indicating the number of queues -- it must be either 1 or \n\\(c\\)\n\n\nThe next line is a \ndouble\n value, indicating the arrival rate \n\\(\\lambda\\)\n\n\nThe next line is a \ndouble\n value, indicating the total simulation time.\n\n\n\n\nThe new lines are:\n\n\n\n\nThe next line contains two \ndouble\n values, seperated by a space, indicating the probability \n\\(p_p\\)\n and \n\\(p_k\\)\n respectively\n\n\nThe next line is another \ndouble\n value, for \n\\(\\sigma\\)\n\n\nThe next line contains the probability that the server goes on a break after serving a customer \n\\(p_b\\)\n\n\nThe last line contains the rate paramter for the length of the break, \n\\(\\beta\\)\n.\n\n\n\n\nOutput\n\n\nLike in previous labs, the last line of your program output should not be changed.  It should remain as:\n\n1\nSystem\n.\nout\n.\nprintf\n(\n\"%.3f %d %d\"\n,\n \n..\n\"\n)\n\n\n\n\n\n\nThe two integer outputs are not as important here, but let's keep it there and print them anyway.\n\n\nYou can compare your output with the following tables\n6\n:\n\n\n\n\n\n\n\n\nTEST\n\n\nAverage Waiting Time\n\n\nCustomers\n\n\nSwitching\n\n\nBreak\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n3.4 - 4.4\n\n\nOnly typical customers\n\n\nNegligable\n\n\nNo\n\n\n\n\n\n\n\n\n2\n\n\n2.7 - 3.7\n\n\nOnly kiasu customers\n\n\nNegligable\n\n\nNo\n\n\n\n\n\n\n\n\n3\n\n\n3.3 - 4.3\n\n\nOnly pioneers\n\n\nNegligable\n\n\nNo\n\n\n\n\n\n\n\n\n4\n\n\n3.1 - 4.2\n\n\nEqual mix\n\n\nNegligable\n\n\nNo\n\n\n\n\n\n\n\n\n5\n\n\n2.2 - 3.0\n\u00a0\u00a02.6 - 3.6\n\n\nEqual mix\n\n\nSome\n\n\nNo\n\n\n\n\n\n\n\n\n6\n\n\n0.7 - 1.2\n\u00a0\u00a01.6 - 2.4\n\n\nEqual mix\n\n\nFrequent\n\n\nNo\n\n\n\n\n\n\n\n\n7\n\n\n0.9 - 1.5\n\u00a0\u00a02.0 - 2.9\n\n\nEqual mix\n\n\nFrequent\n\n\nHalf of the time, short break\n\n\n\n\n\n\n\n\n8\n\n\n1.4 - 2.3\n\u00a0\u00a02.6 - 3.8\n\n\nEqual mix\n\n\nFrequent\n\n\nAlways, short break\n\n\n\n\n\n\n\n\n9\n\n\n7 - 13\n\u00a0\u00a010 - 16\n\n\nEqual mix\n\n\nFrequent\n\n\nAlways, long break\n\n\n\n\n\n\n\n\n\n\nGrading\n\n\nThis lab contributes another 4 marks to your final grade (100 marks).\n\n\n\n\n1 mark for implementation of kiasu customer\n\n\n1 mark for implementation of pioneer customer\n\n\n1 mark for implementation of server breaks\n\n\n1 mark for implementation of switching events\n\n\n\n\nTo get 1 mark, the implementation has to be correct in its logic and good enough in its design (right OO concepts applied).\n\n\nYou can get -0.5 mark deduction for serious violation of style and -0.5 mark deduction for not documenting your code (in Javadoc format) properly.\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit05\n\n\n\n\n\nwhich will copy all files matching \n*.java\n (and nothing else) from your \n~/lab05\n directory on \ncs2030-i\n to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\n\n\n\n\n\n\n\n\n\"Afraid to loose\" in Singlish\u00a0\n\u21a9\n\n\n\n\n\n\nBreaking ties arbitarily\u00a0\n\u21a9\n\n\n\n\n\n\nPioneer as in \"pioneer generation\"\u00a0\n\u21a9\n\n\n\n\n\n\nA queue consists of only pioneer customers is a last-in-first out queue.\u00a0\n\u21a9\n\n\n\n\n\n\nAgain, breaking ties arbitarily.\u00a0\n\u21a9\n\n\n\n\n\n\nYour code might still be correct if it is slightly out of range -- try a different seed and see.  If it gets consistently out of range, or is way out of range, then double check your logic.\u00a0\n\u21a9",
            "title": "5. Question"
        },
        {
            "location": "/lab5/index.html#lab-5",
            "text": "Submission deadline: 2359,  Wednesday , October 11, 2017.  You have more time than normal to complete Lab 5.",
            "title": "Lab 5"
        },
        {
            "location": "/lab5/index.html#prerequisites",
            "text": "This lab assumes that students:   have already attempted Lab 4  have an understanding of the multi-queues, multi-servers system being simulated  are familiar with CS2030 coding style and javadoc documentation  are comfortable with using Java Collections Framework  are familiar with random number generation in  java.lang.Math  are familiar with static methods and variables  are familiar with inheritance and interfaces",
            "title": "Prerequisites"
        },
        {
            "location": "/lab5/index.html#learning-objectives",
            "text": "After completing this lab, students should develop a better appreciation of object-oriented programming, especially in:   encapsulating data and behavior within classes  inheriting common behavior from the parent class and implementing sub-class specific behaviors by overriding the parent class  the ease of extending an existing program with new behaviors if the right encapsulations are used.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lab5/index.html#setup",
            "text": "A sample code that solves Lab 4 is given.  Read it carefully and understand all the classes and APIs given.    After which, you are free to choose, either:   extend the given code for Lab 4 to solve Lab 5, or  extend your own code for Lab 4 to solve Lab 5   I encourage you to do both, and compare how easy / difficult it is to extend the two versions of the code to implement the new requirements of Lab 5.  The sample code from Lab 4 is available on  cs2030-i  under the directory  ~cs2030/lab04/sample .   The test data ( TESTDATA1.txt  ..  TESTDATA9.txt  for Lab 5 is available in  ~cs2030/lab05 .",
            "title": "Setup"
        },
        {
            "location": "/lab5/index.html#task",
            "text": "For Lab 5, you will be asked to make changes to your Lab 4, to:   Support different types of customers  Support three new types of events   You are still required to   follows the  CS2030 Coding Style  clearly documented with  javadoc",
            "title": "Task"
        },
        {
            "location": "/lab5/index.html#take-a-break",
            "text": "We have been working our servers in Lab 4 very hard.  They do not get a break, even after serving one million customers!  In this lab, we will allow our servers to take a break.    Here is how a server takes a break:   After a server completes serving a customer, a server either takes a break with probability  \\(p_b\\) , or serves the next customer with probability (1- \\(p_b\\) ).  The length of a server's break is random, and is drawn from an exponential distribution with rate parameter  \\(\\beta\\) .    After the break is over, the server returns to its duty and serves the next customer (if available).   To implement this, you can create two new types of events, one for going for break, the other for returning from break, which you can create and schedule in the simulator with the logic above.",
            "title": "Take A Break"
        },
        {
            "location": "/lab5/index.html#new-type-of-customers",
            "text": "Let's call the customers we implemented in Lab 4 as  typical  customers.  A typical customer, upon arrival, joins a random queue if none of the server can serve the customer immediately.  Note that while in Lab 4, this means that none of the server is idle, in Lab 5, we have to consider that a server might be on a break.  So a customer joins a random queue if every server is either busy or on a break.  A customer, however, can queue up for a server that is on a break.  We will add two new types of customer in Lab 5.  A kiasu 1  customer is one that  joins the shortest queue 2  upon arrival if none of the server is available to serve it immediately.  A pioneer 3  customer is one that has highest priority to being served -- he/she always joins the queue at the front of the queue upon arrival, even if there is another pioneer customer at the front of the queue 4 \nPioneer customers chooses a queue to join randomly, since the length of the queue has no affect on them.  When the simulator generates a new customer, there is a  \\(p_k\\)  probability that the customer is a kiasu customer.  There is another probability  \\(p_p\\)  that the customer is a pioneer customer.  A typical customer is generated if a customer is neither a kiasu nor pioneer customer.",
            "title": "New Type of Customers"
        },
        {
            "location": "/lab5/index.html#switching-queues",
            "text": "We will introduce a new behavior to our customers,  regardless of which type they are .  A customer, at some random time after joining the queue, decides to look around and look for either: (i) an idle server who is not on a break, or (ii) the shortest queue to join.  If an idle server who is not on a break is found, the customer leaves its current queue, goes to that server, and is served immediately. \nOtherwise, the customer looks for the shortest queue 5   If joining the shortest queue would reduce the number of other customers in front of this customer, it will leave its current queue and join that shortest queue.  Note that it does this even when the server for that shortest queue is on a break.  Regardless of whether a customer switch queue or not, it always try to do that again after some random time, until the customer is no longer in the queue.  You can implement this with another new type of \"switch\" event.  Upon joining a queue, we schedule a \"switch\" event some time in the future (a random time interval drawn from exponential distribution just like Lab 3, with rate parameter  \\(\\sigma\\) ).  After every \"switch\" event, we schedule another one for the same customer, again, some random time in the future drawn from the same distribution.  Note that by the time the simulator gets to a \"switch\" event, it is possible that the customer has already left the queue (either being served or completed the service).  In this case, we should just discard the \"switch\" event.  We focus on the case with multiple queues, although the resulting code should still work for the case of single queue, it is less interesting for this lab.",
            "title": "Switching Queues"
        },
        {
            "location": "/lab5/index.html#implementation-hints",
            "text": "",
            "title": "Implementation Hints"
        },
        {
            "location": "/lab5/index.html#random-number-generation",
            "text": "To do something randomly with probability  \\(p\\) , you can use the  nextDouble()  method of  Random  class to throw a dice.  1\n2\n3\n4 double   dice   =   random . nextDouble ();  if   ( dice   <   p )   { \n   doSomething ();  }    To do something randomly with probability  \\(p\\) , and something else with probability  \\(q\\) , you can:   1\n2\n3\n4\n5\n6 double   dice   =   random . nextDouble ();  if   ( dice   <   p )   { \n   doSomething ();  }   else   if   ( dice   >   1 - q )   { \n   doSomethingElse ();  }    To generate inter-switching time with parameter  \\(\\sigma\\)  and break time with parameter  \\(\\beta\\)  that follows the exponential distribution, you can use the same methods as Lab 3:  1    - Math . log ( rng . nextDouble ())   /   rate    where  rate  is either  \\(\\beta\\)  or  \\(\\sigma\\) .",
            "title": "Random number generation"
        },
        {
            "location": "/lab5/index.html#collections",
            "text": "Java provides a utilitiy class called  Collections , full of useful methods.  You may find it useful for your Lab 5.",
            "title": "Collections"
        },
        {
            "location": "/lab5/index.html#input-files",
            "text": "With this change, the input file now contains additional  simulator parameters .  The first new lines are the same as Lab 4:   The first line is an  int  value, indicating the seed to the simulator  The next line is an  int  value, indicating the number of servers  \\(c\\)  The next line contains a  double  value, indicating the service rate  \\(\\mu\\)  The next line is an  int  value, indicating the number of queues -- it must be either 1 or  \\(c\\)  The next line is a  double  value, indicating the arrival rate  \\(\\lambda\\)  The next line is a  double  value, indicating the total simulation time.   The new lines are:   The next line contains two  double  values, seperated by a space, indicating the probability  \\(p_p\\)  and  \\(p_k\\)  respectively  The next line is another  double  value, for  \\(\\sigma\\)  The next line contains the probability that the server goes on a break after serving a customer  \\(p_b\\)  The last line contains the rate paramter for the length of the break,  \\(\\beta\\) .",
            "title": "Input Files"
        },
        {
            "location": "/lab5/index.html#output",
            "text": "Like in previous labs, the last line of your program output should not be changed.  It should remain as: 1 System . out . printf ( \"%.3f %d %d\" ,   .. \" )    The two integer outputs are not as important here, but let's keep it there and print them anyway.  You can compare your output with the following tables 6 :     TEST  Average Waiting Time  Customers  Switching  Break       1  3.4 - 4.4  Only typical customers  Negligable  No     2  2.7 - 3.7  Only kiasu customers  Negligable  No     3  3.3 - 4.3  Only pioneers  Negligable  No     4  3.1 - 4.2  Equal mix  Negligable  No     5  2.2 - 3.0 \u00a0\u00a02.6 - 3.6  Equal mix  Some  No     6  0.7 - 1.2 \u00a0\u00a01.6 - 2.4  Equal mix  Frequent  No     7  0.9 - 1.5 \u00a0\u00a02.0 - 2.9  Equal mix  Frequent  Half of the time, short break     8  1.4 - 2.3 \u00a0\u00a02.6 - 3.8  Equal mix  Frequent  Always, short break     9  7 - 13 \u00a0\u00a010 - 16  Equal mix  Frequent  Always, long break",
            "title": "Output"
        },
        {
            "location": "/lab5/index.html#grading",
            "text": "This lab contributes another 4 marks to your final grade (100 marks).   1 mark for implementation of kiasu customer  1 mark for implementation of pioneer customer  1 mark for implementation of server breaks  1 mark for implementation of switching events   To get 1 mark, the implementation has to be correct in its logic and good enough in its design (right OO concepts applied).  You can get -0.5 mark deduction for serious violation of style and -0.5 mark deduction for not documenting your code (in Javadoc format) properly.",
            "title": "Grading"
        },
        {
            "location": "/lab5/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit05   which will copy all files matching  *.java  (and nothing else) from your  ~/lab05  directory on  cs2030-i  to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.  You can submit multiple times, but only the most recent submission will be graded.      \"Afraid to loose\" in Singlish\u00a0 \u21a9    Breaking ties arbitarily\u00a0 \u21a9    Pioneer as in \"pioneer generation\"\u00a0 \u21a9    A queue consists of only pioneer customers is a last-in-first out queue.\u00a0 \u21a9    Again, breaking ties arbitarily.\u00a0 \u21a9    Your code might still be correct if it is slightly out of range -- try a different seed and see.  If it gets consistently out of range, or is way out of range, then double check your logic.\u00a0 \u21a9",
            "title": "Submission"
        },
        {
            "location": "/lab6/index.html",
            "text": "Lab 6\n\n\nSubmission deadline: 2359, Sunday, October 15, 2017.\n\n\nPrerequisites\n\n\nThis lab assumes that students:\n\n\n\n\nunderstand what is immutable function\n\n\nfamiliar with the \nFunction\n inteface\n\n\nare familiar with the syntax and semantics of lambda expression and method reference.\n\n\n\n\nLearning Objectives\n\n\nAfter completing this lab, students should:\n\n\n\n\nbe familiar with eager versions of operators \nmap\n, \nreduce\n, \nfilter\n, \ngenerate\n, \npeek\n, \nfindFirst\n, \nforEach\n    \n\n\nbe familiar with \nPredicate\n, \nSupplier\n, \nConsumer\n, and \nBiFunction\n interfaces provided by Java 8.\n\n\nappreciate the usefulness of \nOptional\n objects \n\n\nbe familiar with writing methods with variable number of arguments.\n\n\n\n\nSetup\n\n\nThe skeleton code from Lab 6 is available on \ncs2030-i\n under the directory \n~cs2030/lab06\n.  There are two files, \nLambdaList.java\n which you are asked to complete, and \nLabSix.java\n, which contains simple test code to test the behavior of LambdaList.\n\n\nTask\n\n\nFor Lab 6, you are asked to implement eight methods for the class \nLambdaList\n, a simple list that supports various lambda operations.\n\n\nYou are still required to\n\n\n\n\nfollows the \nCS2030 Coding Style\n\n\nclearly documented with \njavadoc\n (this has been done for you, for free!)\n\n\n\n\nLambdaList\n\n\nA \nLambdaList<T>\n is a generic list that can store elements of type \nT\n in order.  Duplicates are allowed.\n\n\nLambdaList\n does not implement Java's \nList\n interface though.  The only similarity to an \nArrayList\n is that it supports the \nadd\n method.  \nLambdaList\n, however, is \nimmutable\n and is written in functional-style.  You cannot change a given list -- every time you add something to the list, a new list is returned.\n\n\n1\n2\n3\nLambdaList<Integer> list = new LambdaList<>();\nlist.add(4);\nSystem.out.println(list); // prints [] instead of [4]\n\n\n\n\n\n\nThis means that we can add things to a list using a chain of method calls:\n\n1\nlist = list.add(4).add(5).add(0);\n\n\n\n\n\nWe can also create a new \nLambdaList\n using constructor:\n\n1\n2\nLambdaList<Integer> intList = new LambdaList<>(1, 2, 3, 4, 5);\nLambdaList<Integer> strList = new LambdaList<>(\"raw\", \"power\");\n\n\n\n\n\n\n\nMethods with Varargs\n\n\nThis is the first time we see a method with variable number of arguments in CS2030.  Take a look at the method definition of the constructor to see how to declare and use varargs (variable number of arguments) in Java.\n\n\n\n\nInternally (privately), \nLambdaList\n maintains the list using an \nArrayList\n object.  A private constructor for \nLambdaList\n takes in an \nArrayList\n object as input -- this constructor will be useful for you.  \n\n\nA \nLambdaList\n supports eight methods that take in lambda expressions and operates on the list elements.\n\n\nLambdaList\n operates \neagerly\n on the elements.  This means that the lambdas and method references are evaluated as soon as they are called.  There is a better way to do the same operations using \nStream\n interfaces -- which we will visit next lecture.  For this reason, you should forget about \nLambdaList\n after this lab is over, and never use it again!  \n\n\nSince the goal of this lab is to get you familiarize with the semantics of these methods and functional interfaces in Java 8, you are \nNOT ALLOWED\n to solve this lab using the \nStream\n interfaces.\n\n\nHere are the eight methods that you needs to implement:\n\n\n1. \ngenerate\n\n\ngenerate\n is a static method that returns a new list, where each element in the list is generated with a given \nSupplier\n.  A \nSupplier\n is a function interface, just like \nFunction\n, but it takes no argument and returns an element.  To invoke a supplier, we call \nget()\n. \n\n\nFor example:\n\n1\n2\n3\nRandom\n \nr\n \n=\n \nnew\n \nRandom\n();\n\n\nSupplier\n<\nDouble\n>\n \ns\n \n=\n \nr\n::\nnextDouble\n;\n\n\ns\n.\nget\n();\n \n// returns a random double\n\n\n\n\n\n\ngenerate\n also takes in an \nint\n argument for the number of elements in the list to generate. \n\n\nFor instance, you can call:\n\n\n1\nLambdaList\n.\ngenerate\n(\n10\n,\n \nr\n::\nnextInt\n);\n\n\n\n\n\n\n\nto generate a list with 10 random integers.\n\n\n2. \nmap\n\n\nmap\n is similar to the method I showed in Lecture 7.  It takes in a function \n\\(f\\)\n and applies it to each element \n\\(x\\)\n in the list, and returns a list of \n\\(f(x)\\)\n. \n\n\nFor example:\n\n\n1\n2\nLambdaList\n<\nInteger\n>\n \nintList\n \n=\n \nnew\n \nLambdaList\n<>(\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n);\n\n\nintList\n.\nmap\n(\nx\n \n->\n \nx\n \n+\n \n1\n);\n \n// returns [2, 3, 4, 5, 6]\n\n\n\n\n\n\n\n3. \nfilter\n\n\nfilter\n takes in a \nPredicate\n.  A \nPredicate\n is a function interface with a method \ntest\n that takes in an element and returns a boolean.\n\n\nFor example:\n\n1\n2\nPredicate\n<\nString\n>\n \nhasTwoLetters\n \n=\n \nx\n \n->\n \nx\n.\nlength\n()\n \n==\n \n2\n;\n\n\nhasTwoLetters\n.\ntest\n(\n\"yes\"\n);\n \n// returns false\n\n\n\n\n\n\nfilter\n returns a new list, containing only elements in the list that pass the predicate test (i.e., the predicate returns true).\n\n\nExample:\n\n1\n2\nLambdaList\n<\nString\n>\n \nlist\n \n=\n \nnew\n \nLambdaList\n<>(\n\"show\"\n,\n \n\"me\"\n,\n \n\"my\"\n,\n \n\"place\"\n,\n \n\"in\"\n,\n \n\"all\"\n,\n \n\"this\"\n);\n\n\nlist\n.\nfilter\n(\nx\n \n->\n \nx\n.\nlength\n()\n \n==\n \n2\n);\n \n// returns [me, my, in]\n\n\n\n\n\n\n4. \ncountIf\n\n\ncountIf\n is so called a \nreduction\n operation, which reduces a list to a single value.  It also takes a predicate, and returns the number of elements that passes the predicate test.\n\n\nExample:\n\n1\nlist\n.\ncountIf\n(\nhasTwoLetters\n);\n \n// returns 3\n\n\n\n\n\n\n5. \nreduce\n\n\nreduce\n is a generalized \nreduction\n operation.  It takes in a \nBiFunction\n.  A \nBiFunction\n is just like \nFunction\n, but it takes in two arguments and return a result.  \n\n\nHere is an example of \nBiFunction\n:\n\n\n1\nBiFunction\n<\nInteger\n,\n \nCustomerQueue\n,\n \nInteger\n>\n \naddLength\n \n=\n \n(\nsum\n,\n \nq\n)\n \n->\n \nsum\n \n+\n \nq\n.\nlength\n();\n\n\n\n\n\n\n\nreduce\n takes in a \nBiFunction\n that is called the \naccumulator\n -- it basically goes through the list, and accumulate all the values into one.  The accumulator requires an initial value to start with.  This initial value is the \nidentity\n of the \nBiFunction\n (in mathematical notation, for identity \n\\(i\\)\n, \n\\(f(i, x) = x\\)\n for any \n\\(x\\)\n).\n\n\nFor instance, the following computes the total number of customers in the list of customer queues \nlist\n:\n\n\n1\nlist\n.\nreduce\n(\n0\n,\n \n(\nsum\n,\n \nq\n)\n \n->\n \nsum\n \n+\n \nq\n.\nlength\n());\n\n\n\n\n\n\n\nHere is another example:\n\n1\n2\nLambdaList\n<\nInteger\n>\n \nlist\n \n=\n \nnew\n \nLambdaList\n<>(\n4\n,\n \n3\n,\n \n2\n,\n \n1\n);\n\n\nlist\n.\nreduce\n(\n1\n,\n \n(\nprod\n,\n \nx\n)\n \n->\n \nprod\n \n*\n \nx\n);\n \n// returns 24\n\n\n\n\n\n\nNote that you can implement \ncountIf\n by combining \nfilter\n and \nreduce\n.\n\n\n6. \nfindFirst\n\n\nfindFirst\n also takes in a predicate, and finds the first element in the list that pass the predicate. \n\n\nThe \nfindFirst\n method returns an \nOptional<T>\n object.  \nOptional\n is a wrapper around a reference to \nT\n, or \nnull\n.   It is introduced in Java 8 and is a neat way to avoid checking for \nnull\n.  \n\n\nLet's first see how we can create a new \nOptional\n object -- if you want to wrap a non-\nnull\n value in an \nOptional\n, just call \nOptional.of(value)\n.  Otherwise, if you want to wrap it in a \nnull\n, call \nOptional.empty()\n.  \n\n\nAlternatively, if you do not want to check if value is null or not, call \nOptional.ofNullable(value)\n which will return one of the above appropriately for you.\n\n\nHow is returning an \nOptional\n useful?  For instance, you can do the following:\n\n1\n2\nserverList\n.\nfindFirst\n(\ns\n \n->\n \ns\n.\nisIdle\n())\n\n          \n.\norElse\n(\nshop\n.\ngetRandomServer\n());\n\n\n\n\n\n\n7. \npeek\n\n\nThe \npeek\n method exists mainly for debugging purposes.  It returns the original list, and simply call a given \nConsumer\n, another function interface, to consume each element.  Here is an example \nConsumer\n:\n\n\n1\n2\nConsumer\n<\nString\n>\n \nc\n \n=\n \nSystem\n.\nout\n::\nprintln\n\n\nc\n.\naccept\n(\n\"aaaaaahhh!\"\n);\n\n\n\n\n\n\n\nThe most common usage of \npeek\n is to stick it in between a chain of operations to print out the intermediate elements of the list.\n\n\n1\nlist\n.\nmap\n(\nx\n \n->\n \nx\n.\nlength\n()).\npeek\n(\nSystem\n.\nout\n::\nprintln\n).\nreduce\n(\n0\n,\n \n(\nx\n,\ny\n)\n \n->\n \nx\n \n+\n \ny\n);\n\n\n\n\n\n\n\n8. \nforEach\n\n\nforEach\n is just like \npeek\n, except that it does not return a list.\n\n\nGrading\n\n\nThis lab contributes another 4 marks to your final grade (100 marks).\n\n\nEach correct implementation of eight methods above will earn you 0.5 marks.\n\n\nYou can get -0.5 mark deduction for serious violation of style.\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit06\n\n\n\n\n\nwhich will copy all files matching \n*.java\n (and nothing else) from your \n~/lab06\n directory on \ncs2030-i\n to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.",
            "title": "6. Question"
        },
        {
            "location": "/lab6/index.html#lab-6",
            "text": "Submission deadline: 2359, Sunday, October 15, 2017.",
            "title": "Lab 6"
        },
        {
            "location": "/lab6/index.html#prerequisites",
            "text": "This lab assumes that students:   understand what is immutable function  familiar with the  Function  inteface  are familiar with the syntax and semantics of lambda expression and method reference.",
            "title": "Prerequisites"
        },
        {
            "location": "/lab6/index.html#learning-objectives",
            "text": "After completing this lab, students should:   be familiar with eager versions of operators  map ,  reduce ,  filter ,  generate ,  peek ,  findFirst ,  forEach       be familiar with  Predicate ,  Supplier ,  Consumer , and  BiFunction  interfaces provided by Java 8.  appreciate the usefulness of  Optional  objects   be familiar with writing methods with variable number of arguments.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lab6/index.html#setup",
            "text": "The skeleton code from Lab 6 is available on  cs2030-i  under the directory  ~cs2030/lab06 .  There are two files,  LambdaList.java  which you are asked to complete, and  LabSix.java , which contains simple test code to test the behavior of LambdaList.",
            "title": "Setup"
        },
        {
            "location": "/lab6/index.html#task",
            "text": "For Lab 6, you are asked to implement eight methods for the class  LambdaList , a simple list that supports various lambda operations.  You are still required to   follows the  CS2030 Coding Style  clearly documented with  javadoc  (this has been done for you, for free!)",
            "title": "Task"
        },
        {
            "location": "/lab6/index.html#lambdalist",
            "text": "A  LambdaList<T>  is a generic list that can store elements of type  T  in order.  Duplicates are allowed.  LambdaList  does not implement Java's  List  interface though.  The only similarity to an  ArrayList  is that it supports the  add  method.   LambdaList , however, is  immutable  and is written in functional-style.  You cannot change a given list -- every time you add something to the list, a new list is returned.  1\n2\n3 LambdaList<Integer> list = new LambdaList<>();\nlist.add(4);\nSystem.out.println(list); // prints [] instead of [4]   This means that we can add things to a list using a chain of method calls: 1 list = list.add(4).add(5).add(0);   We can also create a new  LambdaList  using constructor: 1\n2 LambdaList<Integer> intList = new LambdaList<>(1, 2, 3, 4, 5);\nLambdaList<Integer> strList = new LambdaList<>(\"raw\", \"power\");    Methods with Varargs  This is the first time we see a method with variable number of arguments in CS2030.  Take a look at the method definition of the constructor to see how to declare and use varargs (variable number of arguments) in Java.   Internally (privately),  LambdaList  maintains the list using an  ArrayList  object.  A private constructor for  LambdaList  takes in an  ArrayList  object as input -- this constructor will be useful for you.    A  LambdaList  supports eight methods that take in lambda expressions and operates on the list elements.  LambdaList  operates  eagerly  on the elements.  This means that the lambdas and method references are evaluated as soon as they are called.  There is a better way to do the same operations using  Stream  interfaces -- which we will visit next lecture.  For this reason, you should forget about  LambdaList  after this lab is over, and never use it again!    Since the goal of this lab is to get you familiarize with the semantics of these methods and functional interfaces in Java 8, you are  NOT ALLOWED  to solve this lab using the  Stream  interfaces.  Here are the eight methods that you needs to implement:",
            "title": "LambdaList"
        },
        {
            "location": "/lab6/index.html#1-generate",
            "text": "generate  is a static method that returns a new list, where each element in the list is generated with a given  Supplier .  A  Supplier  is a function interface, just like  Function , but it takes no argument and returns an element.  To invoke a supplier, we call  get() .   For example: 1\n2\n3 Random   r   =   new   Random ();  Supplier < Double >   s   =   r :: nextDouble ;  s . get ();   // returns a random double    generate  also takes in an  int  argument for the number of elements in the list to generate.   For instance, you can call:  1 LambdaList . generate ( 10 ,   r :: nextInt );    to generate a list with 10 random integers.",
            "title": "1. generate"
        },
        {
            "location": "/lab6/index.html#2-map",
            "text": "map  is similar to the method I showed in Lecture 7.  It takes in a function  \\(f\\)  and applies it to each element  \\(x\\)  in the list, and returns a list of  \\(f(x)\\) .   For example:  1\n2 LambdaList < Integer >   intList   =   new   LambdaList <>( 1 ,   2 ,   3 ,   4 ,   5 );  intList . map ( x   ->   x   +   1 );   // returns [2, 3, 4, 5, 6]",
            "title": "2. map"
        },
        {
            "location": "/lab6/index.html#3-filter",
            "text": "filter  takes in a  Predicate .  A  Predicate  is a function interface with a method  test  that takes in an element and returns a boolean.  For example: 1\n2 Predicate < String >   hasTwoLetters   =   x   ->   x . length ()   ==   2 ;  hasTwoLetters . test ( \"yes\" );   // returns false    filter  returns a new list, containing only elements in the list that pass the predicate test (i.e., the predicate returns true).  Example: 1\n2 LambdaList < String >   list   =   new   LambdaList <>( \"show\" ,   \"me\" ,   \"my\" ,   \"place\" ,   \"in\" ,   \"all\" ,   \"this\" );  list . filter ( x   ->   x . length ()   ==   2 );   // returns [me, my, in]",
            "title": "3. filter"
        },
        {
            "location": "/lab6/index.html#4-countif",
            "text": "countIf  is so called a  reduction  operation, which reduces a list to a single value.  It also takes a predicate, and returns the number of elements that passes the predicate test.  Example: 1 list . countIf ( hasTwoLetters );   // returns 3",
            "title": "4. countIf"
        },
        {
            "location": "/lab6/index.html#5-reduce",
            "text": "reduce  is a generalized  reduction  operation.  It takes in a  BiFunction .  A  BiFunction  is just like  Function , but it takes in two arguments and return a result.    Here is an example of  BiFunction :  1 BiFunction < Integer ,   CustomerQueue ,   Integer >   addLength   =   ( sum ,   q )   ->   sum   +   q . length ();    reduce  takes in a  BiFunction  that is called the  accumulator  -- it basically goes through the list, and accumulate all the values into one.  The accumulator requires an initial value to start with.  This initial value is the  identity  of the  BiFunction  (in mathematical notation, for identity  \\(i\\) ,  \\(f(i, x) = x\\)  for any  \\(x\\) ).  For instance, the following computes the total number of customers in the list of customer queues  list :  1 list . reduce ( 0 ,   ( sum ,   q )   ->   sum   +   q . length ());    Here is another example: 1\n2 LambdaList < Integer >   list   =   new   LambdaList <>( 4 ,   3 ,   2 ,   1 );  list . reduce ( 1 ,   ( prod ,   x )   ->   prod   *   x );   // returns 24    Note that you can implement  countIf  by combining  filter  and  reduce .",
            "title": "5. reduce"
        },
        {
            "location": "/lab6/index.html#6-findfirst",
            "text": "findFirst  also takes in a predicate, and finds the first element in the list that pass the predicate.   The  findFirst  method returns an  Optional<T>  object.   Optional  is a wrapper around a reference to  T , or  null .   It is introduced in Java 8 and is a neat way to avoid checking for  null .    Let's first see how we can create a new  Optional  object -- if you want to wrap a non- null  value in an  Optional , just call  Optional.of(value) .  Otherwise, if you want to wrap it in a  null , call  Optional.empty() .    Alternatively, if you do not want to check if value is null or not, call  Optional.ofNullable(value)  which will return one of the above appropriately for you.  How is returning an  Optional  useful?  For instance, you can do the following: 1\n2 serverList . findFirst ( s   ->   s . isIdle ()) \n           . orElse ( shop . getRandomServer ());",
            "title": "6. findFirst"
        },
        {
            "location": "/lab6/index.html#7-peek",
            "text": "The  peek  method exists mainly for debugging purposes.  It returns the original list, and simply call a given  Consumer , another function interface, to consume each element.  Here is an example  Consumer :  1\n2 Consumer < String >   c   =   System . out :: println  c . accept ( \"aaaaaahhh!\" );    The most common usage of  peek  is to stick it in between a chain of operations to print out the intermediate elements of the list.  1 list . map ( x   ->   x . length ()). peek ( System . out :: println ). reduce ( 0 ,   ( x , y )   ->   x   +   y );",
            "title": "7. peek"
        },
        {
            "location": "/lab6/index.html#8-foreach",
            "text": "forEach  is just like  peek , except that it does not return a list.",
            "title": "8. forEach"
        },
        {
            "location": "/lab6/index.html#grading",
            "text": "This lab contributes another 4 marks to your final grade (100 marks).  Each correct implementation of eight methods above will earn you 0.5 marks.  You can get -0.5 mark deduction for serious violation of style.",
            "title": "Grading"
        },
        {
            "location": "/lab6/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit06   which will copy all files matching  *.java  (and nothing else) from your  ~/lab06  directory on  cs2030-i  to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.  You can submit multiple times, but only the most recent submission will be graded.",
            "title": "Submission"
        },
        {
            "location": "/lab7/index.html",
            "text": "Lab 7\n\n\nSubmission deadline: 2359, Sunday, October 22, 2017.\n\n\nPrerequisites\n\n\nThis lab assumes that students:\n\n\n\n\nare familiar with the concept of possibly infinite, lazily evaluated, list\n\n\nfamiliar with the various \nStream\n operations \n\n\nfamiliar with creating, passing, storing, and invoking various lambda functions\n\n\n\n\nLearning Objectives\n\n\nAfter completing this lab, students should:\n\n\n\n\nbe comfortable with implementing a lazily evaluated list using lambdas.\n\n\nbe familiar with the concept of memoization in implementing a lazily evaluated list. \n\n\n\n\nSetup\n\n\nThe skeleton code from Lab 7 is available on \ncs2030-i\n under the directory \n~cs2030/lab07\n.  There are three files, \nInfiniteList.java\n which you are asked to complete, \nLabSeven.java\n, which contains simple test code to test the behavior of InfiniteList, and \nPair.java\n, a helper class to maintain a pair of items.\n\n\nTask\n\n\nFor Lab 7, you are asked to implement a bunch of methods for the class \nInfiniteList\n, a simple list that supports various lambda operations.  See Grading section below for a list.\n\n\nYou are still required to\n\n\n\n\nfollows the \nCS2030 Coding Style\n\n\nclearly documented with \njavadoc\n (this has been done for you, for free!)\n\n\n\n\nInfiniteList\n\n\nA \nInfiniteList<T>\n is a generic list that can store elements of type \nT\n in order.  Duplicates are allowed.  \n\n\nUnlike \nLambdaList\n, we can only create either an empty list (with \nInfiniteList.empty()\n) or an infinitely long list (with \ngenerate\n or \niterate\n).  Unlike \nLambdaList\n, an \nInfiniteList\n is lazily evaluated -- the actual list element is generated on demand.\n\n\nAn \nInfiniteList\n is similiar to \nStream\n in Java, but a \nStream\n can only be traversed once, while an \nInfiniteList\n can be repeatedly traversed!  \nInfiniteList\n also supports some operations, like \nzipWith\n and \nunzipTo\n that is not supported by a \nStream\n.  While this lab did not require you to implement all methods available to \nStream\n, you can easily add them after you complete this lab and unlike \nLambdaList\n, which you should never use again, the \nInfiniteList\n class is actually something that you can keep around and use it in your later study / career if needed!\n\n\nLike in the previous lab, you are \nNOT ALLOWED\n to solve this lab using the \nStream\n interfaces.\n\n\nYou should be familiar with all the operations that you are asked to implement, except two new ones, \nzipWith\n and \nunzipTo\n, which are explained below:\n\n\nA zip operation takes in two lists, and combined them, element-by-element, into a single list.  The combination is done through a \nzipper\n method.  The \nzipWith\n operation on an \nInfiniteList\n does this.  For instance:\n\n\n1\n2\n3\nInfiniteList\n<\nInteger\n>\n \nlist1\n \n=\n \nInfiniteList\n.\niterate\n(\n0\n,\n \nx\n \n->\n \nx\n \n+\n \n2\n);\n \n// 0, 2, 4, 6\n\n\nInfiniteList\n<\nInteger\n>\n \nlist2\n \n=\n \nInfiniteList\n.\niterate\n(\n1\n,\n \nx\n \n->\n \nx\n \n+\n \n1\n);\n \n// 1, 2, 3, 4\n\n\nlist1\n.\nzipWith\n(\nlist2\n,\n \n(\nx\n,\n \ny\n)\n \n->\n \nx\n \n-\n \ny\n);\n \n// -1, 0, 1, 2, 3, ... \n\n\n\n\n\n\n\nThe unzip operation does the reverse -- given a list, it splits it into two.  The \nunzipTo\n operation on an \nInfiniteList\n returns a list of pairs, each pair containing two elements \nunzipped\n from the original list.\n\n\n1\n2\nInfiniteList\n<\nInteger\n>\n \nlist1\n \n=\n \nInfiniteList\n.\niterate\n(\n0\n,\n \nx\n \n->\n \nx\n \n+\n \n1\n).\nmap\n(\nx\n \n->\n \nx\n \n*\n \nx\n);\n \n// 0, 1, 4, 9, 16 ..\n\n\nlist1\n.\nunzipTo\n(\nx\n \n->\n \nx\n \n%\n \n3\n,\n \nx\n \n->\n \nx\n \n/\n \n3\n);\n \n// split into (0, 0) (1, 0) (1, 1) (0, 3) (1, 5) ..\n\n\n\n\n\n\n\nImplementing InfiniteList\n\n\nYou have seen a simple version of \nInfiniteList\n in class on Monday.  We are going to implement a better and more complicated version of that (so that code from Lecture 8 is not directly usable).\n\n\nThe main differences are:\n\n\n\n\n\n\nLab 7's version of \nInfiniteList\n is not always infinite.  It can be truncated just like a \nStream\n with \nlimit\n and \ntakeWhile\n operation.  So methods such as \nfindFirst\n need to consider the possibility of a finite list, including an empty list.\n\n\n\n\n\n\nWe need to be as lazy as possible and only generate the element (i.e., invoke the \nSupplier\n's \nget()\n method) when necessary.  Once we generate an element, we shouldn't generate it again.  So, we cache a copy of the value if it has been generated before.  This logic has been written in the \nhead()\n and \ntail()\n method for you.\n\n\n\n\n\n\nDebugging Lazy Operations\n\n\nIn addition, to help with debugging the laziness, we have included a counter variable \nnumOfEvals\n that count how many times the head's supplier has been invoked.  We can obtain the value of counter with \nnumOfEvals()\n method and reset the counter with \nresetStats()\n.\n\n\nRecusions\n\n\nYou might be tempted to implement the terminal operations (those that does not return an \nInfiniteList\n) recursively.  Doing so will cause stack overflows if the list is too long, due to the lack of tail recursion optimization in Java (more on this in the future).  To prevent that, you should implement the terminal operations with loops, instead of recursion.\n\n\nEmpty List\n\n\nWe created a special private inner class \nEmpty\n to represent an empty \nInfiniteList\n.  Note that we intentionally violates the Liskov Substitution Principle here -- since the empty list \nshould\n have a different behavior than a non-empty list, and treating an empty \nInfiniteList\n just like a non-empty one in your code \nshould\n give you an error!\n\n\nAdditional Private Methods\n\n\nYou will find it useful to implement additional private constructors, methods within \nEmpty\n, etc. to solve this lab.\n\n\nGrading\n\n\nThis lab contributes another 4 marks to your final grade (100 marks).  Correctly implementing each of the following item get you 0.4 marks:\n\n\n\n\ngenerate\n, \niterate\n\n\nmap\n\n\nlimit\n\n\nfilter\n \n\n\ntakeWhile\n\n\nzipWith\n\n\nunZipWith\n\n\nreduce\n\n\ncount\n, \nforEach\n\n\nfindFirst\n and \ntoArray\n\n\n\n\nYou can get -0.5 mark deduction for serious violation of style.  Note that \"correct\" here not only means it gives the correct output, but it should invoked \nSupplier\n for head as lazily as possible.\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit07\n\n\n\n\n\nwhich will copy all files matching \n*.java\n (and nothing else) from your \n~/lab07\n directory on \ncs2030-i\n to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\n\n\nWarning\n\n\nMake sure your code are in the right place -- it must be in subdirectory named \nlab07\n, directly under your home directory, in other words \n~/lab07\n.  If you place it anywhere else, it will not get submitted.",
            "title": "7. Question"
        },
        {
            "location": "/lab7/index.html#lab-7",
            "text": "Submission deadline: 2359, Sunday, October 22, 2017.",
            "title": "Lab 7"
        },
        {
            "location": "/lab7/index.html#prerequisites",
            "text": "This lab assumes that students:   are familiar with the concept of possibly infinite, lazily evaluated, list  familiar with the various  Stream  operations   familiar with creating, passing, storing, and invoking various lambda functions",
            "title": "Prerequisites"
        },
        {
            "location": "/lab7/index.html#learning-objectives",
            "text": "After completing this lab, students should:   be comfortable with implementing a lazily evaluated list using lambdas.  be familiar with the concept of memoization in implementing a lazily evaluated list.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lab7/index.html#setup",
            "text": "The skeleton code from Lab 7 is available on  cs2030-i  under the directory  ~cs2030/lab07 .  There are three files,  InfiniteList.java  which you are asked to complete,  LabSeven.java , which contains simple test code to test the behavior of InfiniteList, and  Pair.java , a helper class to maintain a pair of items.",
            "title": "Setup"
        },
        {
            "location": "/lab7/index.html#task",
            "text": "For Lab 7, you are asked to implement a bunch of methods for the class  InfiniteList , a simple list that supports various lambda operations.  See Grading section below for a list.  You are still required to   follows the  CS2030 Coding Style  clearly documented with  javadoc  (this has been done for you, for free!)",
            "title": "Task"
        },
        {
            "location": "/lab7/index.html#infinitelist",
            "text": "A  InfiniteList<T>  is a generic list that can store elements of type  T  in order.  Duplicates are allowed.    Unlike  LambdaList , we can only create either an empty list (with  InfiniteList.empty() ) or an infinitely long list (with  generate  or  iterate ).  Unlike  LambdaList , an  InfiniteList  is lazily evaluated -- the actual list element is generated on demand.  An  InfiniteList  is similiar to  Stream  in Java, but a  Stream  can only be traversed once, while an  InfiniteList  can be repeatedly traversed!   InfiniteList  also supports some operations, like  zipWith  and  unzipTo  that is not supported by a  Stream .  While this lab did not require you to implement all methods available to  Stream , you can easily add them after you complete this lab and unlike  LambdaList , which you should never use again, the  InfiniteList  class is actually something that you can keep around and use it in your later study / career if needed!  Like in the previous lab, you are  NOT ALLOWED  to solve this lab using the  Stream  interfaces.  You should be familiar with all the operations that you are asked to implement, except two new ones,  zipWith  and  unzipTo , which are explained below:  A zip operation takes in two lists, and combined them, element-by-element, into a single list.  The combination is done through a  zipper  method.  The  zipWith  operation on an  InfiniteList  does this.  For instance:  1\n2\n3 InfiniteList < Integer >   list1   =   InfiniteList . iterate ( 0 ,   x   ->   x   +   2 );   // 0, 2, 4, 6  InfiniteList < Integer >   list2   =   InfiniteList . iterate ( 1 ,   x   ->   x   +   1 );   // 1, 2, 3, 4  list1 . zipWith ( list2 ,   ( x ,   y )   ->   x   -   y );   // -1, 0, 1, 2, 3, ...     The unzip operation does the reverse -- given a list, it splits it into two.  The  unzipTo  operation on an  InfiniteList  returns a list of pairs, each pair containing two elements  unzipped  from the original list.  1\n2 InfiniteList < Integer >   list1   =   InfiniteList . iterate ( 0 ,   x   ->   x   +   1 ). map ( x   ->   x   *   x );   // 0, 1, 4, 9, 16 ..  list1 . unzipTo ( x   ->   x   %   3 ,   x   ->   x   /   3 );   // split into (0, 0) (1, 0) (1, 1) (0, 3) (1, 5) ..",
            "title": "InfiniteList"
        },
        {
            "location": "/lab7/index.html#implementing-infinitelist",
            "text": "You have seen a simple version of  InfiniteList  in class on Monday.  We are going to implement a better and more complicated version of that (so that code from Lecture 8 is not directly usable).  The main differences are:    Lab 7's version of  InfiniteList  is not always infinite.  It can be truncated just like a  Stream  with  limit  and  takeWhile  operation.  So methods such as  findFirst  need to consider the possibility of a finite list, including an empty list.    We need to be as lazy as possible and only generate the element (i.e., invoke the  Supplier 's  get()  method) when necessary.  Once we generate an element, we shouldn't generate it again.  So, we cache a copy of the value if it has been generated before.  This logic has been written in the  head()  and  tail()  method for you.",
            "title": "Implementing InfiniteList"
        },
        {
            "location": "/lab7/index.html#debugging-lazy-operations",
            "text": "In addition, to help with debugging the laziness, we have included a counter variable  numOfEvals  that count how many times the head's supplier has been invoked.  We can obtain the value of counter with  numOfEvals()  method and reset the counter with  resetStats() .",
            "title": "Debugging Lazy Operations"
        },
        {
            "location": "/lab7/index.html#recusions",
            "text": "You might be tempted to implement the terminal operations (those that does not return an  InfiniteList ) recursively.  Doing so will cause stack overflows if the list is too long, due to the lack of tail recursion optimization in Java (more on this in the future).  To prevent that, you should implement the terminal operations with loops, instead of recursion.",
            "title": "Recusions"
        },
        {
            "location": "/lab7/index.html#empty-list",
            "text": "We created a special private inner class  Empty  to represent an empty  InfiniteList .  Note that we intentionally violates the Liskov Substitution Principle here -- since the empty list  should  have a different behavior than a non-empty list, and treating an empty  InfiniteList  just like a non-empty one in your code  should  give you an error!",
            "title": "Empty List"
        },
        {
            "location": "/lab7/index.html#additional-private-methods",
            "text": "You will find it useful to implement additional private constructors, methods within  Empty , etc. to solve this lab.",
            "title": "Additional Private Methods"
        },
        {
            "location": "/lab7/index.html#grading",
            "text": "This lab contributes another 4 marks to your final grade (100 marks).  Correctly implementing each of the following item get you 0.4 marks:   generate ,  iterate  map  limit  filter    takeWhile  zipWith  unZipWith  reduce  count ,  forEach  findFirst  and  toArray   You can get -0.5 mark deduction for serious violation of style.  Note that \"correct\" here not only means it gives the correct output, but it should invoked  Supplier  for head as lazily as possible.",
            "title": "Grading"
        },
        {
            "location": "/lab7/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit07   which will copy all files matching  *.java  (and nothing else) from your  ~/lab07  directory on  cs2030-i  to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.  You can submit multiple times, but only the most recent submission will be graded.   Warning  Make sure your code are in the right place -- it must be in subdirectory named  lab07 , directly under your home directory, in other words  ~/lab07 .  If you place it anywhere else, it will not get submitted.",
            "title": "Submission"
        },
        {
            "location": "/lab8/index.html",
            "text": "Lab 8\n\n\nSubmission deadline: 2359, Wednesday, November 1, 2017.\n\n\nAs Wei Tsang is away until Sunday, you get extra time to work on this lab.\n\n\nSetup\n\n\nThe skeleton code from Lab 8 is available on \ncs2030-i\n under the directory \n~cs2030/lab08\n.  \nBusSg.java\n is the main file that you need to edit and fill in the blanks.\n\n\nTask\n\n\nFor Lab 8, we are implementing a simple bus information system, an extension of the midterm question.  The classes \nBusStop\n and \nBusService\n have been given to you, as well as the main class \nLabEight\n and a partially implemented \nBusSg\n.\n\n\nYou are still required to complete five methods in class \nBusSg\n.  This time you have some constraints -- you are not allowed to use loops (\nwhile\n, \nfor\n) and must process your data using \nStream\n.  If the functor \nOptional\n are involved, you must not use \nget\n to retrieval the value inside the \nOptional\n.  You should use specific \nCollector\n as asked.\n\n\nYou are still required to\n\n\n\n\nfollows the \nCS2030 Coding Style\n\n\nclearly documented with \njavadoc\n (this has been done for you, for free!)\n\n\n\n\nProvided Classes\n\n\nBusStop\n\n\nA \nBusStop\n encapsulates information about a bus stop.  It has an \nid\n (e.g., \"16181\"), a location (longtitude and latitude -- irrelevant for this lab), and a human-friendly name (e.g., \"Computer Ctr\").  \n\n\nA \nBusStop\n also has a collection of \nBusService\n objects that serve the \nBusStop\n.  Your tasks involve populating and processing this collection.  To do so, you can call \naddBusService\n to add a bus service to the collection and call \ngetBusServices\n to retrieve the collection of bus services as a stream.\n\n\nBusService\n\n\nA \nBusService\n encapsulates information about a bus service.  Each bus service has a string \nid\n (e.g, \"96\") and a collection of \nBusStop\n objects, corresponding to the bus stops served by the given bus service.  Your tasks involve populating and processing this collection.  To do so, you can call \naddBusStop\n to add a bus stop, and \ngetBusStops\n to retrieve the collection of bus stops as a stream.\n\n\nTasks\n\n\n\n\n\n\nreadBusStopsAndServices\n: Complete this method, which takes in a filename, reads line by line, and enters the relationship of which bus service serves which bus stop to the hash maps \nbusStops\n and \nbusServices\n.  The hash maps are of the class \nHashMapO\n which wraps about Java \nHashMap\n -- \nHashMapO\n supports \nOptional\n return type \nget\n and \nStream\n return type in \nentries\n.\n\n\n\n\n\n\naverageNumberOfBusesPerStop\n and \naverageNumberOfStopsPerBus\n. These two code are similar.  You should use \nCollectors.averagingDouble\n to implement them.\n\n\n\n\n\n\nbusesWithMostStops\n and \nstopsWithMostBuses\n. You should use \nCollectors.groupingBy\n to implement them.  Note that despite the dataset given returning only one bus / one stop, in other dataset it is possible to have multiple answers -- thus the return type of these should be of \nStream\n type.\n\n\n\n\n\n\nData Files\n\n\nThree data files about the bus services and bus stops are provided.  \n\n\n\n\nbus-services.csv\n\n\nbus-stops-services.csv\n\n\nbus-stops.csv\n\n\n\n\nThe code for reading them explains what they are.  During grading, we may test with other datasets in the same format.\n\n\nRunning LabEight\n\n\nTo run LabEight,\n\n\n1\njava LabEight bus-stops.csv bus-services.csv bus-stops-services.csv\n\n\n\n\n\n\nYou may want to create a shell script to automate the above command (or use up arrow in \nbash\n)\n\n\nGrading\n\n\nThis lab contributes another 4 marks to your final grade (100 marks).  \n\n\n\n\n2 mark for \nreadBusStopsAndServices()\n\n\n1 mark for \naverageNumberOfBusesPerStop\n and \naverageNumberOfStopsPerBus\n\n\n1 mark for \nbusesWithMostStops\n and \nstopsWithMostBuses\n\n\n\n\nYou can get -0.5 mark deduction for serious violation of style.  Note that \"correct\" here not only means it gives the correct output, but it should follows the constraints of using \nStream\n, \nOptional\n, and \nCollectors\n.\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit08\n\n\n\n\n\nwhich will copy all files matching \n*.java\n (and nothing else) from your \n~/lab08\n directory on \ncs2030-i\n to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\n\n\nWarning\n\n\nMake sure your code are in the right place -- it must be in subdirectory named \nlab08\n, directly under your home directory, in other words \n~/lab08\n.  If you place it anywhere else, it will not get submitted.",
            "title": "8. Question"
        },
        {
            "location": "/lab8/index.html#lab-8",
            "text": "Submission deadline: 2359, Wednesday, November 1, 2017.  As Wei Tsang is away until Sunday, you get extra time to work on this lab.",
            "title": "Lab 8"
        },
        {
            "location": "/lab8/index.html#setup",
            "text": "The skeleton code from Lab 8 is available on  cs2030-i  under the directory  ~cs2030/lab08 .   BusSg.java  is the main file that you need to edit and fill in the blanks.",
            "title": "Setup"
        },
        {
            "location": "/lab8/index.html#task",
            "text": "For Lab 8, we are implementing a simple bus information system, an extension of the midterm question.  The classes  BusStop  and  BusService  have been given to you, as well as the main class  LabEight  and a partially implemented  BusSg .  You are still required to complete five methods in class  BusSg .  This time you have some constraints -- you are not allowed to use loops ( while ,  for ) and must process your data using  Stream .  If the functor  Optional  are involved, you must not use  get  to retrieval the value inside the  Optional .  You should use specific  Collector  as asked.  You are still required to   follows the  CS2030 Coding Style  clearly documented with  javadoc  (this has been done for you, for free!)",
            "title": "Task"
        },
        {
            "location": "/lab8/index.html#provided-classes",
            "text": "",
            "title": "Provided Classes"
        },
        {
            "location": "/lab8/index.html#busstop",
            "text": "A  BusStop  encapsulates information about a bus stop.  It has an  id  (e.g., \"16181\"), a location (longtitude and latitude -- irrelevant for this lab), and a human-friendly name (e.g., \"Computer Ctr\").    A  BusStop  also has a collection of  BusService  objects that serve the  BusStop .  Your tasks involve populating and processing this collection.  To do so, you can call  addBusService  to add a bus service to the collection and call  getBusServices  to retrieve the collection of bus services as a stream.",
            "title": "BusStop"
        },
        {
            "location": "/lab8/index.html#busservice",
            "text": "A  BusService  encapsulates information about a bus service.  Each bus service has a string  id  (e.g, \"96\") and a collection of  BusStop  objects, corresponding to the bus stops served by the given bus service.  Your tasks involve populating and processing this collection.  To do so, you can call  addBusStop  to add a bus stop, and  getBusStops  to retrieve the collection of bus stops as a stream.",
            "title": "BusService"
        },
        {
            "location": "/lab8/index.html#tasks",
            "text": "readBusStopsAndServices : Complete this method, which takes in a filename, reads line by line, and enters the relationship of which bus service serves which bus stop to the hash maps  busStops  and  busServices .  The hash maps are of the class  HashMapO  which wraps about Java  HashMap  --  HashMapO  supports  Optional  return type  get  and  Stream  return type in  entries .    averageNumberOfBusesPerStop  and  averageNumberOfStopsPerBus . These two code are similar.  You should use  Collectors.averagingDouble  to implement them.    busesWithMostStops  and  stopsWithMostBuses . You should use  Collectors.groupingBy  to implement them.  Note that despite the dataset given returning only one bus / one stop, in other dataset it is possible to have multiple answers -- thus the return type of these should be of  Stream  type.",
            "title": "Tasks"
        },
        {
            "location": "/lab8/index.html#data-files",
            "text": "Three data files about the bus services and bus stops are provided.     bus-services.csv  bus-stops-services.csv  bus-stops.csv   The code for reading them explains what they are.  During grading, we may test with other datasets in the same format.",
            "title": "Data Files"
        },
        {
            "location": "/lab8/index.html#running-labeight",
            "text": "To run LabEight,  1 java LabEight bus-stops.csv bus-services.csv bus-stops-services.csv   You may want to create a shell script to automate the above command (or use up arrow in  bash )",
            "title": "Running LabEight"
        },
        {
            "location": "/lab8/index.html#grading",
            "text": "This lab contributes another 4 marks to your final grade (100 marks).     2 mark for  readBusStopsAndServices()  1 mark for  averageNumberOfBusesPerStop  and  averageNumberOfStopsPerBus  1 mark for  busesWithMostStops  and  stopsWithMostBuses   You can get -0.5 mark deduction for serious violation of style.  Note that \"correct\" here not only means it gives the correct output, but it should follows the constraints of using  Stream ,  Optional , and  Collectors .",
            "title": "Grading"
        },
        {
            "location": "/lab8/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit08   which will copy all files matching  *.java  (and nothing else) from your  ~/lab08  directory on  cs2030-i  to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.  You can submit multiple times, but only the most recent submission will be graded.   Warning  Make sure your code are in the right place -- it must be in subdirectory named  lab08 , directly under your home directory, in other words  ~/lab08 .  If you place it anywhere else, it will not get submitted.",
            "title": "Submission"
        },
        {
            "location": "/lab9/index.html",
            "text": "Lab 9: Parallel Matrix Multiplication with ForkJoinPool\n\n\nSubmission deadline: 2359, Sunday, November 5, 2017.\n\n\nSetup\n\n\nThe skeleton code from Lab 9 is available on \ncs2030-i\n under the directory \n~cs2030/lab09\n.  \nMatrix.java\n is the main file that you need to edit to parallelize the matrix multiplication inside.\n\n\nBackground: Matrix Multiplication\n\n\nMatrix multiplication is a fundamental operation on matrices with many applications in physics, engineering, mathematics, and computer science. \n\n\nGiven a matrix \n\\(A\\)\n of \n\\(n \\times m\\)\n (\n\\(n\\)\n rows, \n\\(m\\)\n columns), and a matrix \n\\(B\\)\n of \n\\(m \\times p\\)\n, the matrix produce \n\\(C = AB\\)\n is an \n\\(n \\times p\\)\n matrix, where \nelements \n\\(c_{ij}\\)\n in \n\\(C\\)\n is given by: \n\\(c_{ij} = \\sum_{k=1}^m a_{ik}b_{kj}\\)\n.\n\n\nTask\n\n\nYou are given a class \nMatrix\n that implements a matrix with double values, and a method to multiply two matrices together -- the method \nmultiply\n performs the multiplication using a straight forward method with triple \nfor\n loops.\n\n\nYour task is to parallelize \nmultiply\n, by implementing \nmultiplyInParallel\n.\n\n\nYou are still required to\n\n\n\n\nfollows the \nCS2030 Coding Style\n\n\nclearly documented with \njavadoc\n\n\n\n\nProvided Classes\n\n\nThe class \nMatrix\n is given.  It stores the values of the matrix in a 2D array \nm\n.  It stores the number of rows \nh\n and number of columns \nw\n.  The code is self-explanatory.  \n\n\nParallelizing Matrix Multiplication\n\n\nMatrix multiplication is an embarrassingly parallel operation.  Each output value in the resulting matrix can be computed independently of other values.  Furthermore, to compute the output value, we multiple two (potentially long) vectors together, another operation that can be easily parallelized.\n\n\nYou task is to write a parallel version of the matrix multiplication by creating \nRecursiveTask\n and submit them to the \nForkJoinPool\n for execution using \nfork\n and \njoin\n.\n\n\nA challenge for this lab is to find the right level of parallelism that makes the code run faster rather than slower.\n\n\nYou can use any parallelization algorithm you like.  Parallelizing calculation of each \n\\(c_{ij}\\)\n is a good place to start.  You may also consider the more sophisticated \ndivide and conquer algorithm\n, although it is more complicated and I can't seem to get more than 10 times speed up out of it.\n\n\nRunning on \nsunfire\n\n\nYou need to get the code and submit your solution on \ncs2030-i\n per usual.  The VM \ncs2030-i\n, however, has only one processor and therefore it is not much fun to run parallel programs on it.\n\n\nFortunately, the host \nsunfire\n, has 256 processors\n1\n.  We will run your submitted solution on \nsunfire\n, and you can test your code on \nsunfire\n as well.  You can \nssh\n into \nsunfire\n just like \ncs2030-i\n.\n\n\nSample Results\n\n\nI am able to get about 20 times speed up with the input:\n\n1\njava LabNine 200 25000 200\n\n\n\n\n\nand about 10 times speed up with the input:\n\n\n1\njava LabNine 2000 2500 2000\n\n\n\n\n\n\nYour solution should get similar or better speed up on \nsunfire\n.\n\n\n\n\nTips\n\n\nHere are some tips:\n\n\n\n\nTry with small matrices first.  Make sure the code is correct before you go for the larger matrices.\n\n\nYou shouldn't run out of heap memory space for the huge matrices above.  But if you algorithm requires more memory, you can run \njava\n with argument \n-Xmx<size>\n to increase the heap memory.  For example, \njava -Xmx256m LabNine 100 100 100\n will run \nLabNine\n with heap size of 256 MB.\n\n\nAvoid copy the matrices unless absolutely necessary (copying large matrices incurs memory overhead).\n\n\n\n\n\n\nGrading\n\n\nThis lab contributes another 4 marks to your final grade (100 marks).  \n\n\nYou get:\n\n\n\n\n1 mark if you parallelize the code but achieve a slow down in performance.\n\n\n2 marks if you parallelize the code, manage to speed up, but is at least half as slow as my version (e.g., no more than 10 times / 5 times faster in the sample input above)\n\n\n4 marks if you parallelize the code and manage to speed up as fast, or faster than my version.\n\n\n\n\nYou can get -0.5 mark deduction for serious violation of style.  If you code is incorrect, you will get deduction depending on how serious your bug is.\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit09\n\n\n\n\n\nwhich will copy all files matching \n*.java\n (and nothing else) from your \n~/lab09\n directory on \ncs2030-i\n to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\n\n\nWarning\n\n\nMake sure your code are in the right place -- it must be in subdirectory named \nlab09\n, directly under your home directory, in other words \n~/lab09\n.  If you place it anywhere else, it will not get submitted.\n\n\n\n\n\n\n\n\n\n\n\n\nYou can find out by calling \nRuntime.getRuntime().availableProcessors();\n in Java.\u00a0\n\u21a9",
            "title": "9. Question"
        },
        {
            "location": "/lab9/index.html#lab-9-parallel-matrix-multiplication-with-forkjoinpool",
            "text": "Submission deadline: 2359, Sunday, November 5, 2017.",
            "title": "Lab 9: Parallel Matrix Multiplication with ForkJoinPool"
        },
        {
            "location": "/lab9/index.html#setup",
            "text": "The skeleton code from Lab 9 is available on  cs2030-i  under the directory  ~cs2030/lab09 .   Matrix.java  is the main file that you need to edit to parallelize the matrix multiplication inside.",
            "title": "Setup"
        },
        {
            "location": "/lab9/index.html#background-matrix-multiplication",
            "text": "Matrix multiplication is a fundamental operation on matrices with many applications in physics, engineering, mathematics, and computer science.   Given a matrix  \\(A\\)  of  \\(n \\times m\\)  ( \\(n\\)  rows,  \\(m\\)  columns), and a matrix  \\(B\\)  of  \\(m \\times p\\) , the matrix produce  \\(C = AB\\)  is an  \\(n \\times p\\)  matrix, where \nelements  \\(c_{ij}\\)  in  \\(C\\)  is given by:  \\(c_{ij} = \\sum_{k=1}^m a_{ik}b_{kj}\\) .",
            "title": "Background: Matrix Multiplication"
        },
        {
            "location": "/lab9/index.html#task",
            "text": "You are given a class  Matrix  that implements a matrix with double values, and a method to multiply two matrices together -- the method  multiply  performs the multiplication using a straight forward method with triple  for  loops.  Your task is to parallelize  multiply , by implementing  multiplyInParallel .  You are still required to   follows the  CS2030 Coding Style  clearly documented with  javadoc",
            "title": "Task"
        },
        {
            "location": "/lab9/index.html#provided-classes",
            "text": "The class  Matrix  is given.  It stores the values of the matrix in a 2D array  m .  It stores the number of rows  h  and number of columns  w .  The code is self-explanatory.",
            "title": "Provided Classes"
        },
        {
            "location": "/lab9/index.html#parallelizing-matrix-multiplication",
            "text": "Matrix multiplication is an embarrassingly parallel operation.  Each output value in the resulting matrix can be computed independently of other values.  Furthermore, to compute the output value, we multiple two (potentially long) vectors together, another operation that can be easily parallelized.  You task is to write a parallel version of the matrix multiplication by creating  RecursiveTask  and submit them to the  ForkJoinPool  for execution using  fork  and  join .  A challenge for this lab is to find the right level of parallelism that makes the code run faster rather than slower.  You can use any parallelization algorithm you like.  Parallelizing calculation of each  \\(c_{ij}\\)  is a good place to start.  You may also consider the more sophisticated  divide and conquer algorithm , although it is more complicated and I can't seem to get more than 10 times speed up out of it.",
            "title": "Parallelizing Matrix Multiplication"
        },
        {
            "location": "/lab9/index.html#running-on-sunfire",
            "text": "You need to get the code and submit your solution on  cs2030-i  per usual.  The VM  cs2030-i , however, has only one processor and therefore it is not much fun to run parallel programs on it.  Fortunately, the host  sunfire , has 256 processors 1 .  We will run your submitted solution on  sunfire , and you can test your code on  sunfire  as well.  You can  ssh  into  sunfire  just like  cs2030-i .",
            "title": "Running on sunfire"
        },
        {
            "location": "/lab9/index.html#sample-results",
            "text": "I am able to get about 20 times speed up with the input: 1 java LabNine 200 25000 200   and about 10 times speed up with the input:  1 java LabNine 2000 2500 2000   Your solution should get similar or better speed up on  sunfire .   Tips  Here are some tips:   Try with small matrices first.  Make sure the code is correct before you go for the larger matrices.  You shouldn't run out of heap memory space for the huge matrices above.  But if you algorithm requires more memory, you can run  java  with argument  -Xmx<size>  to increase the heap memory.  For example,  java -Xmx256m LabNine 100 100 100  will run  LabNine  with heap size of 256 MB.  Avoid copy the matrices unless absolutely necessary (copying large matrices incurs memory overhead).",
            "title": "Sample Results"
        },
        {
            "location": "/lab9/index.html#grading",
            "text": "This lab contributes another 4 marks to your final grade (100 marks).    You get:   1 mark if you parallelize the code but achieve a slow down in performance.  2 marks if you parallelize the code, manage to speed up, but is at least half as slow as my version (e.g., no more than 10 times / 5 times faster in the sample input above)  4 marks if you parallelize the code and manage to speed up as fast, or faster than my version.   You can get -0.5 mark deduction for serious violation of style.  If you code is incorrect, you will get deduction depending on how serious your bug is.",
            "title": "Grading"
        },
        {
            "location": "/lab9/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit09   which will copy all files matching  *.java  (and nothing else) from your  ~/lab09  directory on  cs2030-i  to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.  You can submit multiple times, but only the most recent submission will be graded.   Warning  Make sure your code are in the right place -- it must be in subdirectory named  lab09 , directly under your home directory, in other words  ~/lab09 .  If you place it anywhere else, it will not get submitted.       You can find out by calling  Runtime.getRuntime().availableProcessors();  in Java.\u00a0 \u21a9",
            "title": "Submission"
        },
        {
            "location": "/lab10/index.html",
            "text": "Lab 10: Querying Web API with Async Calls\n\n\nSubmission deadline: 2359, Sunday, November 12, 2017.\n\n\nSetup\n\n\nThe skeleton code from Lab 10 is available on \ncs2030-i\n under the directory \n~cs2030/lab10\n.  The code is functional, but uses synchronous calls to make query to a Web API for bus information.  \n\n\nFinding Bus Routes\n\n\nThe given program, \nLabTen\n, takes in a source and destination bus stop, for instance:\n\n1\njava LabTen 17009 18331\n\n\n\n\nand output possible routes to go from the source bus stop to the destination:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nFrom 17009 Clementi Int to 18331 Kent Ridge Stn Exit A/NUH:\ntake 96, transfer at 16199 NUS Fac Of Design & Env to 95\ntake 196, transfer at 18149 Opp Anglo-Chinese JC to 95\ntake 196, transfer at 18141 Aft Anglo-Chinese JC to 95\ntake 96, transfer at 16179 Opp Yusof Ishak Hse to 95\ntake one of [14, 166], transfer at 18121 Opp Ayer Rajah Ind Est to 95\ntake 96, transfer at 16189 Computer Ctr to 95\ntake one of [14, 166], transfer at 18129 Ayer Rajah Ind Est to 95\ntake one of [165, 7], transfer at 11261 Holland Village to 95\ntake one of [196, 147], transfer at 11181 Opp Blk 43 to 95\ntake one of [196, 147], transfer at 11189 Blk 43 to 95\ntake 196, transfer at 11361 Buona Vista Stn Exit C to 95\ntake 196, transfer at 11369 Buona Vista Stn Exit D to 95\ntake 14, alight at 18101 PSB Science Pk Bldg and walk\ntake 14, alight at 18109 Opp PSB Science Pk Bldg and walk\ntake 166, alight at 18101 PSB Science Pk Bldg and walk\ntake 166, alight at 18109 Opp PSB Science Pk Bldg and walk\n\n\n\n\n\nThere are three types of routes being considered:\n\n\n\n\nA direct route (none in the example above), where we can take a bus directly from the source to the destination.\n\n\nA direct route with walking, where we can take a bus directly from the source to a stop near the destination, and then walk to the destination (\ntake ... alight at ... and walk\n);\n\n\nA route with one transfer, where we can take a bus from the source, a change to another bus at an intermediate stop (\ntake ... transfer at ... to ...\n).\n\n\n\n\nThere are other possibilities that we do not consider in this lab (such as walking to a nearby bus stop from the source and take a direct bus to destination, or walk from one intermediate bus stop to another to transfer).\n\n\nThe program uses the same data files as Lab 8, but only the list of bus stop IDs and its human friendly names are available to you (in the file \nbus-stops.csv\n).  The rest of the information is available via a Web API call:\n\n\n\n\nhttps://cs2030-bus-api.herokuapp.com/bus_services/<bus service id>\n returns a list of bus stop ids served by a given bus.  \nExample\n\n\nhttps://cs2030-bus-api.herokuapp.com/bus_stops/<bus stop id>\n returns a list of bus service ids that serves a given bus stop.  \nExample\n\n\nhttps://cs2030-bus-api.herokuapp.com/bus_stops/<bus stop id>/nearby\n returns a list of bus stops id within 5-minutes walk (400 meters) of a given bus stop.  \nExample\n\n\n\n\nThe basic code to query the Web API is provided in the skeleton code.  See \nBusStop.java\n and \nBusService.java\n.\n\n\nSince we do not have any information about the actual bus schedule and bus direction, we do not consider them in producing the output.  So, the routes produced may not match the actual bus route in real world -- do not use this lab to plan you travel in real life :)\n\n\nTask\n\n\nThe goal of this lab is to change the code from synchronous to asynchronous, using \nCompletableFuture\n.  At the very least, all methods that involve querying the Web API should be asynchronous, since they are slow.  The search for routes can be made faster through asynchronous calls as well.  \n\n\nMy suggestion on how to approach this lab:\n\n\n\n\nRead the code given in \nBusStop.java\n, \nBusService.java\n, and \nBusSg.java\n to understand the algorithms used to search for the routes.  \n\n\nConvert the code one-by-one to asynchronous calls, using \nCompletableFuture\n's \nrunAsync\n or \nsupplyAsync\n.  If a method returns \nT\n, you may want to return \nCompletableFuture<T>\n.  \n\n\nYou can change how the search code is written in \nBusSg.java\n (e.g., break it into smaller methods so that asynchronous calls is easier to read).\n\n\nYou should handle exception appropriately, catching them and replacing the return values with empty list / set (for instance, if the Web API fails).\n\n\nThread-safe collections are used liberally in the given code (\nCopyOnWriteArrayList\n and \nConcurrentHashMap\n).  If you need to add a new collection in part of the code that is access concurrently, make sure you use a collection from \njava.util.concurrent\n package.\n\n\nMake sure that the program waits for all the asynchronous calls to complete before the program exits, using \n\nCompletableFuture.allOf(...).join()\n.\n\n\n\n\nNOTE: The sequence of output is not important for correctness in this lab.\n\n\nAs usual, you should also:\n\n\n\n\nfollows the \nCS2030 Coding Style\n\n\nclearly documented with \njavadoc\n\n\n\n\nYou need an Internet connection to run LabTen\n.\n\n\nGrading\n\n\nThis lab contributes another 4 marks to your final grade (100 marks).  \n\n\nYou get:\n\n\n\n\n1 mark for correctly and asynchronously finding the direct bus route (\nfindDirectBusServicesBetween\n)\n\n\n1 mark for correctly and asynchronously finding the direct bus route + walking (\nfindBusServicesToNearby\n)\n\n\n2 marks for correctly and asynchronously finding the bus route with a single transfer (\nfindBusServicesWithTransferBetween\n)\n\n\n\n\nYou can get -0.5 mark deduction for serious violation of style.  \n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit10\n\n\n\n\n\nwhich will copy all files matching \n*.java\n (and nothing else) from your \n~/lab10\n directory on \ncs2030-i\n to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\n\n\nWarning\n\n\nMake sure your code are in the right place -- it must be in subdirectory named \nlab10\n, directly under your home directory, in other words \n~/lab10\n.  If you place it anywhere else, it will not get submitted.",
            "title": "10. Question"
        },
        {
            "location": "/lab10/index.html#lab-10-querying-web-api-with-async-calls",
            "text": "Submission deadline: 2359, Sunday, November 12, 2017.",
            "title": "Lab 10: Querying Web API with Async Calls"
        },
        {
            "location": "/lab10/index.html#setup",
            "text": "The skeleton code from Lab 10 is available on  cs2030-i  under the directory  ~cs2030/lab10 .  The code is functional, but uses synchronous calls to make query to a Web API for bus information.",
            "title": "Setup"
        },
        {
            "location": "/lab10/index.html#finding-bus-routes",
            "text": "The given program,  LabTen , takes in a source and destination bus stop, for instance: 1 java LabTen 17009 18331  \nand output possible routes to go from the source bus stop to the destination:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 From 17009 Clementi Int to 18331 Kent Ridge Stn Exit A/NUH:\ntake 96, transfer at 16199 NUS Fac Of Design & Env to 95\ntake 196, transfer at 18149 Opp Anglo-Chinese JC to 95\ntake 196, transfer at 18141 Aft Anglo-Chinese JC to 95\ntake 96, transfer at 16179 Opp Yusof Ishak Hse to 95\ntake one of [14, 166], transfer at 18121 Opp Ayer Rajah Ind Est to 95\ntake 96, transfer at 16189 Computer Ctr to 95\ntake one of [14, 166], transfer at 18129 Ayer Rajah Ind Est to 95\ntake one of [165, 7], transfer at 11261 Holland Village to 95\ntake one of [196, 147], transfer at 11181 Opp Blk 43 to 95\ntake one of [196, 147], transfer at 11189 Blk 43 to 95\ntake 196, transfer at 11361 Buona Vista Stn Exit C to 95\ntake 196, transfer at 11369 Buona Vista Stn Exit D to 95\ntake 14, alight at 18101 PSB Science Pk Bldg and walk\ntake 14, alight at 18109 Opp PSB Science Pk Bldg and walk\ntake 166, alight at 18101 PSB Science Pk Bldg and walk\ntake 166, alight at 18109 Opp PSB Science Pk Bldg and walk   There are three types of routes being considered:   A direct route (none in the example above), where we can take a bus directly from the source to the destination.  A direct route with walking, where we can take a bus directly from the source to a stop near the destination, and then walk to the destination ( take ... alight at ... and walk );  A route with one transfer, where we can take a bus from the source, a change to another bus at an intermediate stop ( take ... transfer at ... to ... ).   There are other possibilities that we do not consider in this lab (such as walking to a nearby bus stop from the source and take a direct bus to destination, or walk from one intermediate bus stop to another to transfer).  The program uses the same data files as Lab 8, but only the list of bus stop IDs and its human friendly names are available to you (in the file  bus-stops.csv ).  The rest of the information is available via a Web API call:   https://cs2030-bus-api.herokuapp.com/bus_services/<bus service id>  returns a list of bus stop ids served by a given bus.   Example  https://cs2030-bus-api.herokuapp.com/bus_stops/<bus stop id>  returns a list of bus service ids that serves a given bus stop.   Example  https://cs2030-bus-api.herokuapp.com/bus_stops/<bus stop id>/nearby  returns a list of bus stops id within 5-minutes walk (400 meters) of a given bus stop.   Example   The basic code to query the Web API is provided in the skeleton code.  See  BusStop.java  and  BusService.java .  Since we do not have any information about the actual bus schedule and bus direction, we do not consider them in producing the output.  So, the routes produced may not match the actual bus route in real world -- do not use this lab to plan you travel in real life :)",
            "title": "Finding Bus Routes"
        },
        {
            "location": "/lab10/index.html#task",
            "text": "The goal of this lab is to change the code from synchronous to asynchronous, using  CompletableFuture .  At the very least, all methods that involve querying the Web API should be asynchronous, since they are slow.  The search for routes can be made faster through asynchronous calls as well.    My suggestion on how to approach this lab:   Read the code given in  BusStop.java ,  BusService.java , and  BusSg.java  to understand the algorithms used to search for the routes.    Convert the code one-by-one to asynchronous calls, using  CompletableFuture 's  runAsync  or  supplyAsync .  If a method returns  T , you may want to return  CompletableFuture<T> .    You can change how the search code is written in  BusSg.java  (e.g., break it into smaller methods so that asynchronous calls is easier to read).  You should handle exception appropriately, catching them and replacing the return values with empty list / set (for instance, if the Web API fails).  Thread-safe collections are used liberally in the given code ( CopyOnWriteArrayList  and  ConcurrentHashMap ).  If you need to add a new collection in part of the code that is access concurrently, make sure you use a collection from  java.util.concurrent  package.  Make sure that the program waits for all the asynchronous calls to complete before the program exits, using  CompletableFuture.allOf(...).join() .   NOTE: The sequence of output is not important for correctness in this lab.  As usual, you should also:   follows the  CS2030 Coding Style  clearly documented with  javadoc   You need an Internet connection to run LabTen .",
            "title": "Task"
        },
        {
            "location": "/lab10/index.html#grading",
            "text": "This lab contributes another 4 marks to your final grade (100 marks).    You get:   1 mark for correctly and asynchronously finding the direct bus route ( findDirectBusServicesBetween )  1 mark for correctly and asynchronously finding the direct bus route + walking ( findBusServicesToNearby )  2 marks for correctly and asynchronously finding the bus route with a single transfer ( findBusServicesWithTransferBetween )   You can get -0.5 mark deduction for serious violation of style.",
            "title": "Grading"
        },
        {
            "location": "/lab10/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit10   which will copy all files matching  *.java  (and nothing else) from your  ~/lab10  directory on  cs2030-i  to an internal grading directory.  We will test compile and test run with a tiny sample input to make sure that your submission is OK.  You can submit multiple times, but only the most recent submission will be graded.   Warning  Make sure your code are in the right place -- it must be in subdirectory named  lab10 , directly under your home directory, in other words  ~/lab10 .  If you place it anywhere else, it will not get submitted.",
            "title": "Submission"
        },
        {
            "location": "/lab11/index.html",
            "text": "Lab 11: Max Disc Cover, Revisited\n\n\nSubmission deadline: 2359, Friday, November 17, 2017.\n\n\n(If you need a deadline extension, you can submit before Sunday, November 19, with no penalty).\n\n\nSetup\n\n\nThe skeleton code from Lab 11 is available on \ncs2030-i\n under the directory \n~cs2030/lab11\n.  \n\n\nMaximum Disc Coverage\n\n\nFor our final lab of this semester, I think it is apt that we revisit our first lab on maximum disc coverage and resolve the problem.  You will perhaps realize that how much that way you code have changed in 12 weeks!\n\n\nIt might be useful at this point to re-read the problem statement for \nLab 1\n.\n\n\nThis time, the \nCircle\n and \nPoint\n are given to you, so you do not need to fill in any blanks in these two classes. \n\n\nThings that we have covered since the first lab include exceptions, collections, and code without side effects.  Some minor changes have been made to \nCircle\n and \nPoint\n to reflect these:\n\n\n\n\n\n\nThe \nCircle\n and \nPoint\n are both immutable now.  So \nmoveTo\n returns a new object instead of modifying the existing one.  No side effects!  Some of you got your Lab 1 wrong because this side effect.\n\n\n\n\n\n\nIf the \nCircle\n constructor takes in two points that coincide or too far apart, then, instead of returning a circle with \nNaN\n as radius, which is silly, we simply throw an \nIllegalArgumentException\n as we should!\n\n\n\n\n\n\nThe \nCircle\n constructor does not take in a flag that indicates if the center falls on the left or right.  It always return the circle with the center on the left.   To get \"the other\" circle, we simply swap the order of the two points. This little change will make our code simpler and cleaner!\n\n\n\n\n\n\nIn the main program, we now use Java Collection (a \nList\n) instead of raw array to store the points.  There is no longer a need to know in advanced how many points are there in the input file (recall we had to put the number of points as the first line of input).  \n\n\nThe code that uses scanner to read from the inputs are now written using streams.  No more for loops or boiler plate code!\n\n\nMax Disc Coverage on Bus Stops\n\n\nIn this lab, we will use the class \nMaxDiscCover\n to find out, in Singapore, how dense is the densest clusters of bus stops?  We will treat each bus stop as a point on 2D plane (recall that we have their longitude and latitude information).  As such, each \nBusStop\n is now a subclass of \nPoint\n.  \n\n\nNote that, \nMaxDiscCover\n does not know anything about bus stops -- it just solves the problem on a set of points.  The problem now takes in radius of the circle to cover the points with (instead of always having a circle of unit distance).  We set the radius of the circle to the degree-equivalent of 2.5-minute walking distance, so that any bus stops contained within the circle is within 5-minute walking distance away. \n\n\nIn other words, we use \nMaxDiscCover\n to solve the following problem: Given a set of bus stops with their location on 2D plane\n1\n, and a circle with a given radius, we want to place the circle so that it covers as many bus stops as possible.  What is the maximum number of bus stops that we can cover with the disc at any one time?  In other words, what is the maximum size of a cluster of bus stops that are within 5-minute walking distance from each other?\n\n\nYour task is to fill in the \nsolve\n method in \nMaxDiscCover\n.  \nSolve it using \nStream\n instead of a double for loop like we did in Lab 1.\n You may find the \nproduct\n method that we have written for \nExercise 5\n useful.\n\n\nYour program should output one number that shows how many bus stops are there in the circle that maximally cover the bus stops:\n\n\n1\n2\njava LabEleven bus-stops.csv\n13\n\n\n\n\n\n\n(For your own curiosity, you can find out where the bus stops are located -- but that is not required for this lab).\n\n\nMarking Scheme\n\n\nYou get 4 marks for correct answer.  This contributes another 4 marks (out of 100) towards your final grade. \n\n\nMarks will be deducted according to severity of the bugs.\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit11\n\n\n\n\n\nwhich will copy all files matching \n*.java\n (and nothing else) from your \n~/lab11\n directory on \ncs2030-i\n to an internal grading directory.  We will test compile and test run with a sample input to make sure that your submission is OK.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\n\n\n\n\n\n\n\n\nThe Earth is flat.\u00a0\n\u21a9",
            "title": "11. Question"
        },
        {
            "location": "/lab11/index.html#lab-11-max-disc-cover-revisited",
            "text": "Submission deadline: 2359, Friday, November 17, 2017.  (If you need a deadline extension, you can submit before Sunday, November 19, with no penalty).",
            "title": "Lab 11: Max Disc Cover, Revisited"
        },
        {
            "location": "/lab11/index.html#setup",
            "text": "The skeleton code from Lab 11 is available on  cs2030-i  under the directory  ~cs2030/lab11 .",
            "title": "Setup"
        },
        {
            "location": "/lab11/index.html#maximum-disc-coverage",
            "text": "For our final lab of this semester, I think it is apt that we revisit our first lab on maximum disc coverage and resolve the problem.  You will perhaps realize that how much that way you code have changed in 12 weeks!  It might be useful at this point to re-read the problem statement for  Lab 1 .  This time, the  Circle  and  Point  are given to you, so you do not need to fill in any blanks in these two classes.   Things that we have covered since the first lab include exceptions, collections, and code without side effects.  Some minor changes have been made to  Circle  and  Point  to reflect these:    The  Circle  and  Point  are both immutable now.  So  moveTo  returns a new object instead of modifying the existing one.  No side effects!  Some of you got your Lab 1 wrong because this side effect.    If the  Circle  constructor takes in two points that coincide or too far apart, then, instead of returning a circle with  NaN  as radius, which is silly, we simply throw an  IllegalArgumentException  as we should!    The  Circle  constructor does not take in a flag that indicates if the center falls on the left or right.  It always return the circle with the center on the left.   To get \"the other\" circle, we simply swap the order of the two points. This little change will make our code simpler and cleaner!    In the main program, we now use Java Collection (a  List ) instead of raw array to store the points.  There is no longer a need to know in advanced how many points are there in the input file (recall we had to put the number of points as the first line of input).    The code that uses scanner to read from the inputs are now written using streams.  No more for loops or boiler plate code!",
            "title": "Maximum Disc Coverage"
        },
        {
            "location": "/lab11/index.html#max-disc-coverage-on-bus-stops",
            "text": "In this lab, we will use the class  MaxDiscCover  to find out, in Singapore, how dense is the densest clusters of bus stops?  We will treat each bus stop as a point on 2D plane (recall that we have their longitude and latitude information).  As such, each  BusStop  is now a subclass of  Point .    Note that,  MaxDiscCover  does not know anything about bus stops -- it just solves the problem on a set of points.  The problem now takes in radius of the circle to cover the points with (instead of always having a circle of unit distance).  We set the radius of the circle to the degree-equivalent of 2.5-minute walking distance, so that any bus stops contained within the circle is within 5-minute walking distance away.   In other words, we use  MaxDiscCover  to solve the following problem: Given a set of bus stops with their location on 2D plane 1 , and a circle with a given radius, we want to place the circle so that it covers as many bus stops as possible.  What is the maximum number of bus stops that we can cover with the disc at any one time?  In other words, what is the maximum size of a cluster of bus stops that are within 5-minute walking distance from each other?  Your task is to fill in the  solve  method in  MaxDiscCover .   Solve it using  Stream  instead of a double for loop like we did in Lab 1.  You may find the  product  method that we have written for  Exercise 5  useful.  Your program should output one number that shows how many bus stops are there in the circle that maximally cover the bus stops:  1\n2 java LabEleven bus-stops.csv\n13   (For your own curiosity, you can find out where the bus stops are located -- but that is not required for this lab).",
            "title": "Max Disc Coverage on Bus Stops"
        },
        {
            "location": "/lab11/index.html#marking-scheme",
            "text": "You get 4 marks for correct answer.  This contributes another 4 marks (out of 100) towards your final grade.   Marks will be deducted according to severity of the bugs.",
            "title": "Marking Scheme"
        },
        {
            "location": "/lab11/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit11   which will copy all files matching  *.java  (and nothing else) from your  ~/lab11  directory on  cs2030-i  to an internal grading directory.  We will test compile and test run with a sample input to make sure that your submission is OK.  You can submit multiple times, but only the most recent submission will be graded.      The Earth is flat.\u00a0 \u21a9",
            "title": "Submission"
        },
        {
            "location": "/jdk/index.html",
            "text": "Java: Install/Compile/Run\n\n\nJava Development Kit (JDK)\n\n\nThe Java Development Kit, or JDK, is a development environment for building Java applications.  The environment provides a virtual machine to execute compiled Java code (JVM), a collection of classes and libraries, and a set of tools to support development (including a compiler (\njavac\n), a debugger (\njdb\n), an interactive shell (\njshell\n)) etc.\n\n\nThere are several variations of JDK available.  For instance, \nOpenJDK\n is a free and open source version of JDK.  \nGNU\n offers a compiler in Java (\ngcj\n) and Java core libraries in Gnu classpath.\nEclipse offers its own version of Java compiler\n1\n.  These variations are mostly the same, but for the purpose of this module, we will use the \nofficial Oracle version\n.\n\n\nThere are different editions of Java.  The main ones are Java SE (standard edition), Java EE (enterprise edition), and Java ME (micro edition).  We will be using \nJava SE\n.\n\n\nThe latest version of Java SE is Java 8 (equivalent to version 1.8).\nThis is also the earliest version of Java that will work with this module, as many concepts we will cover are only introduced in Java 8.  \n\n\nTo use \njshell\n, however, you need Java 9, which you can \ndownload and install from here\n.\n\n\nInstalling JDK 9\n\n\nThere are multiple ways to setup JDK on various OS.  The following seems to be the simplest possible way to get started.\n\n\nOn macOS\n\n\nDownload the \n.dmg\n file corresponding to JDK 9 from \nhttp://jdk.java.net/9/\n and double click the \n.dmg\n file.  Follow instruction from there.\n\n\nFor a 6-step description of the above, see \nthe installation instruction from Oracle.\n\n\nOn Ubuntu / Linux Mint / Debian\n\n\nWe are going to use \napt\n, a package management program, in Linux to install JDK.  Run the following in your terminal:\n\n\n1\n2\n3\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java9-installer\n\n\n\n\n\n\nLine 1 above adds a special package repository (also known as Personal Package Archive (PPA)) to \napt\n.  Line 2 instructs \napt\n to download the list of packages available from all repositories configured.  One of this packages should be \noracle-java9-installer\n.  Line 3 installs the \noracle-java9-installer\n.  Note that this install the installer, not Java 9.  After the installer is installed, the installer is executed.  You will be asked questions about license agreements, and then the installer proceeds to download and install Java 9.\n\n\nFor a more detailed instructions, see \nthe guide from the maintainer of the PPA, webupd8.org\n.\n\n\nOn Windows 10\n\n\nFollow the \ninstructions to install Bash on Ubuntu on Windows\n, then install as per the instructions for Ubuntu above.\n\n\nOther Methods\n\n\nOracle publishes an \ninstallation guide\n for JDK 9, including installing it on native Windows (not through Ubuntu emulator).  I find it much more troublesome and complicated.  Unfortunately, if you are using an earlier version of Windows, you will have to follow these instructions.\n\n\nCompiling\n\n\nNow that you've installed Java on your machine, here's an example of how you can compile and run some Java code.\n\n\nJava source files\n\n\nCreate a new Java source file and put it in a new folder (e.g. \nCS2030\n).\n\n\n1\n2\n3\n4\n5\nclass\n \nHelloWorld\n \n{\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"Hello, world!\"\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nBy convention, the file should be named \nHelloWorld.java\n, following the \nUpperCamelCase\n name of the class. At this point, our \nCS2030\n folder only contains that one file.\n\n\n1\n2\nCS2030 $ ls\nHelloWorld.java\n\n\n\n\n\n\nJava class files\n\n\nWe can go ahead and compile our Java program by running the \njavac HelloWorld.java\n command. This creates the corresponding Java class file, \nHelloWorld.class\n.\n\n\n1\n2\n3\nCS2030 $ javac HelloWorld.java\nCS2030 $ ls\nHelloWorld.class HelloWorld.java\n\n\n\n\n\n\nWe can now execute it with \njava HelloWorld\n. Remember to omit the \n.class\n extension when doing this!\n\n\n1\n2\n3\nCS2030 $ javac HelloWorld.java\nCS2030 $ java HelloWorld\nHello, world!\n\n\n\n\n\n\nSuccess! \ud83c\udf89\n\n\n\n\nWhat actually happens under the hood? Is Java an interpreted or compiled language?\n\n\nThis can get a little mind-boggling at first, but this \ndiagram\n summarizes it quite well.\n\n\n\n\n\n\n\n\n\n\n\n\nSee: \nWhat is the difference between javac and the Eclipse compiler?\n\u00a0\n\u21a9",
            "title": "Java"
        },
        {
            "location": "/jdk/index.html#java-installcompilerun",
            "text": "",
            "title": "Java: Install/Compile/Run"
        },
        {
            "location": "/jdk/index.html#java-development-kit-jdk",
            "text": "The Java Development Kit, or JDK, is a development environment for building Java applications.  The environment provides a virtual machine to execute compiled Java code (JVM), a collection of classes and libraries, and a set of tools to support development (including a compiler ( javac ), a debugger ( jdb ), an interactive shell ( jshell )) etc.  There are several variations of JDK available.  For instance,  OpenJDK  is a free and open source version of JDK.   GNU  offers a compiler in Java ( gcj ) and Java core libraries in Gnu classpath.\nEclipse offers its own version of Java compiler 1 .  These variations are mostly the same, but for the purpose of this module, we will use the  official Oracle version .  There are different editions of Java.  The main ones are Java SE (standard edition), Java EE (enterprise edition), and Java ME (micro edition).  We will be using  Java SE .  The latest version of Java SE is Java 8 (equivalent to version 1.8).\nThis is also the earliest version of Java that will work with this module, as many concepts we will cover are only introduced in Java 8.    To use  jshell , however, you need Java 9, which you can  download and install from here .",
            "title": "Java Development Kit (JDK)"
        },
        {
            "location": "/jdk/index.html#installing-jdk-9",
            "text": "There are multiple ways to setup JDK on various OS.  The following seems to be the simplest possible way to get started.",
            "title": "Installing JDK 9"
        },
        {
            "location": "/jdk/index.html#on-macos",
            "text": "Download the  .dmg  file corresponding to JDK 9 from  http://jdk.java.net/9/  and double click the  .dmg  file.  Follow instruction from there.  For a 6-step description of the above, see  the installation instruction from Oracle.",
            "title": "On macOS"
        },
        {
            "location": "/jdk/index.html#on-ubuntu-linux-mint-debian",
            "text": "We are going to use  apt , a package management program, in Linux to install JDK.  Run the following in your terminal:  1\n2\n3 sudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java9-installer   Line 1 above adds a special package repository (also known as Personal Package Archive (PPA)) to  apt .  Line 2 instructs  apt  to download the list of packages available from all repositories configured.  One of this packages should be  oracle-java9-installer .  Line 3 installs the  oracle-java9-installer .  Note that this install the installer, not Java 9.  After the installer is installed, the installer is executed.  You will be asked questions about license agreements, and then the installer proceeds to download and install Java 9.  For a more detailed instructions, see  the guide from the maintainer of the PPA, webupd8.org .",
            "title": "On Ubuntu / Linux Mint / Debian"
        },
        {
            "location": "/jdk/index.html#on-windows-10",
            "text": "Follow the  instructions to install Bash on Ubuntu on Windows , then install as per the instructions for Ubuntu above.",
            "title": "On Windows 10"
        },
        {
            "location": "/jdk/index.html#other-methods",
            "text": "Oracle publishes an  installation guide  for JDK 9, including installing it on native Windows (not through Ubuntu emulator).  I find it much more troublesome and complicated.  Unfortunately, if you are using an earlier version of Windows, you will have to follow these instructions.",
            "title": "Other Methods"
        },
        {
            "location": "/jdk/index.html#compiling",
            "text": "Now that you've installed Java on your machine, here's an example of how you can compile and run some Java code.",
            "title": "Compiling"
        },
        {
            "location": "/jdk/index.html#java-source-files",
            "text": "Create a new Java source file and put it in a new folder (e.g.  CS2030 ).  1\n2\n3\n4\n5 class   HelloWorld   { \n   public   static   void   main ( String []   args )   { \n     System . out . println ( \"Hello, world!\" ); \n   }  }    By convention, the file should be named  HelloWorld.java , following the  UpperCamelCase  name of the class. At this point, our  CS2030  folder only contains that one file.  1\n2 CS2030 $ ls\nHelloWorld.java",
            "title": "Java source files"
        },
        {
            "location": "/jdk/index.html#java-class-files",
            "text": "We can go ahead and compile our Java program by running the  javac HelloWorld.java  command. This creates the corresponding Java class file,  HelloWorld.class .  1\n2\n3 CS2030 $ javac HelloWorld.java\nCS2030 $ ls\nHelloWorld.class HelloWorld.java   We can now execute it with  java HelloWorld . Remember to omit the  .class  extension when doing this!  1\n2\n3 CS2030 $ javac HelloWorld.java\nCS2030 $ java HelloWorld\nHello, world!   Success! \ud83c\udf89   What actually happens under the hood? Is Java an interpreted or compiled language?  This can get a little mind-boggling at first, but this  diagram  summarizes it quite well.       See:  What is the difference between javac and the Eclipse compiler? \u00a0 \u21a9",
            "title": "Java class files"
        },
        {
            "location": "/javadoc/index.html",
            "text": "Javadoc\n\n\nWhy is documentation important\n\n\nOne of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to get you to document your code.\n\n\njavadoc\n is a tool used to document Java code.  It automatically generates HTML documentation from the comments in your code.  The \nJava SE 8 API\n that you have seen are generated from \njavadoc\n.\n\n\nHow to comment for javadoc\n\n\njavadoc\n distinguishes between normal comments and comments meant for \njavadoc\n by how we \"fence\" the comments.  A \njavadoc\n comments always starts with \n/**\n (not the double asterisks) and ends with \n*/\n and are always placed \nimmediately\n before a class, an interface, a constructor, a method, or field declaration.\n\n\nExample:\n\n1\n2\n3\n4\n5\n/** \n\n\n * Encapsulates a circle on a 2D plane.  The `Circle` class supports operators \n\n\n * supported includes (i) checking if a point is contained in the circle,\n\n\n * and (ii) moving the circle around to a new position.\n\n\n */\n\n\n\n\n\n\nThe first sentence is the summary sentence.  We should follow some style guideline when writing the summary sentence (see below).\n\n\njavadoc\n comments supports HTML tags.  If you are not familiar with HTML, \nthat is fine.  We will tell you what you need to know below.\n\n\nTags\n\n\njavadoc\n supports tags.  Here are some tags that we would like you to use:\n\n\n\n\n@param <name> <description>\n: describe the parameter \n\n\n@return <description>\n describe the return value\n\n\n@throws <class name> <description>\n describe what the exception \n being thrown and what are the possible reasons\n\n\n\n\nSee Lab 1 and Lab 2 skeleton code for samples.\n\n\nStyle\n\n\n\n\n\n\nIf you want to break you comments into paragraphs, insert one blank line between paragraphs.  Start a new paragraph with HTML tag \n<p>\n with no space after, and ends your paragraph with HTML tag \n</p>\n.\n\n\n\n\n\n\nYou should use the tags \n@param\n \n@return\n and \n@throws\n in that order, and they should never appear without a description.\n\n\n\n\n\n\nThe summary should be short and succint.  It is not a complete sentence, however, but should still be capitalized and ends with a period.  E.g., \n/** Encapsulates a circle on 2D plane. .. */\n\n\n\n\n\n\nYou don't get to write \njavadoc\n for self-explanatory, simple, obvious, methods.  e.g., \ngetX()\n, unless you want to explain what \nx\n means.  \n\n\n\n\n\n\nHow to generate javadoc\n\n\nIn its simplest form, you can generate \njavadoc\n like this:\n\n\n1\njavadoc *.java\n\n\n\n\n\n\nThis will generate the HTML files in your current directory.  \n\n\nTo avoid clutters, I recommend that you specify the output directory, e.g.,\n\n\n1\njavadoc *.java -d docs\n\n\n\n\n\n\nThis will generate the documentations and put it under the \ndocs\n subdirectory.\n\n\njavadoc\n by default generates documents only for public classes, fields, and methods.  To generate documentation for everything, run\n\n1\njavadoc *.java -d docs -private\n\n\n\n\n\nHow to view generate javadoc\n\n\nIf you generate the documentation on your computer, you can view it by opening up the file \nindex.html\n in your browser.\n\n\nIf you generate the documentation on \ncs2030-i.comp.nus.edu.sg\n, then, you can create under your \npublic_html\n directory (your home page, so to say).\n\n\n1\njavadoc -private -d ~/public_html/lab03 *.java\n\n\n\n\n\n\nYou can then view the documents on your computer through the URL\n\n\n1\nhttps://cs2030-i.comp.nus.edu.sg/~<username>/lab03\n\n\n\n\n\n\n(replace \n<username>\n with your username on \ncs2030-i\n.  The content is password protected and is only visible to you.  (If the website said that the certificate is invalid and website is not secure, please ignore the warning for now).\n\n\nSee Also\n\n\n\n\nOracle's \njavadoc\n Manual\n for a detailed \njavadoc\n guide",
            "title": "Javadoc"
        },
        {
            "location": "/javadoc/index.html#javadoc",
            "text": "",
            "title": "Javadoc"
        },
        {
            "location": "/javadoc/index.html#why-is-documentation-important",
            "text": "One of the goals of CS2030 is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1010 labs) and you are writing code that noone else will read except you.  CS2030 prepares you to work in a software engineering teams in many ways, and one of the ways is to get you to document your code.  javadoc  is a tool used to document Java code.  It automatically generates HTML documentation from the comments in your code.  The  Java SE 8 API  that you have seen are generated from  javadoc .",
            "title": "Why is documentation important"
        },
        {
            "location": "/javadoc/index.html#how-to-comment-for-javadoc",
            "text": "javadoc  distinguishes between normal comments and comments meant for  javadoc  by how we \"fence\" the comments.  A  javadoc  comments always starts with  /**  (not the double asterisks) and ends with  */  and are always placed  immediately  before a class, an interface, a constructor, a method, or field declaration.  Example: 1\n2\n3\n4\n5 /**    * Encapsulates a circle on a 2D plane.  The `Circle` class supports operators    * supported includes (i) checking if a point is contained in the circle,   * and (ii) moving the circle around to a new position.   */    The first sentence is the summary sentence.  We should follow some style guideline when writing the summary sentence (see below).  javadoc  comments supports HTML tags.  If you are not familiar with HTML, \nthat is fine.  We will tell you what you need to know below.",
            "title": "How to comment for javadoc"
        },
        {
            "location": "/javadoc/index.html#tags",
            "text": "javadoc  supports tags.  Here are some tags that we would like you to use:   @param <name> <description> : describe the parameter   @return <description>  describe the return value  @throws <class name> <description>  describe what the exception   being thrown and what are the possible reasons   See Lab 1 and Lab 2 skeleton code for samples.",
            "title": "Tags"
        },
        {
            "location": "/javadoc/index.html#style",
            "text": "If you want to break you comments into paragraphs, insert one blank line between paragraphs.  Start a new paragraph with HTML tag  <p>  with no space after, and ends your paragraph with HTML tag  </p> .    You should use the tags  @param   @return  and  @throws  in that order, and they should never appear without a description.    The summary should be short and succint.  It is not a complete sentence, however, but should still be capitalized and ends with a period.  E.g.,  /** Encapsulates a circle on 2D plane. .. */    You don't get to write  javadoc  for self-explanatory, simple, obvious, methods.  e.g.,  getX() , unless you want to explain what  x  means.",
            "title": "Style"
        },
        {
            "location": "/javadoc/index.html#how-to-generate-javadoc",
            "text": "In its simplest form, you can generate  javadoc  like this:  1 javadoc *.java   This will generate the HTML files in your current directory.    To avoid clutters, I recommend that you specify the output directory, e.g.,  1 javadoc *.java -d docs   This will generate the documentations and put it under the  docs  subdirectory.  javadoc  by default generates documents only for public classes, fields, and methods.  To generate documentation for everything, run 1 javadoc *.java -d docs -private",
            "title": "How to generate javadoc"
        },
        {
            "location": "/javadoc/index.html#how-to-view-generate-javadoc",
            "text": "If you generate the documentation on your computer, you can view it by opening up the file  index.html  in your browser.  If you generate the documentation on  cs2030-i.comp.nus.edu.sg , then, you can create under your  public_html  directory (your home page, so to say).  1 javadoc -private -d ~/public_html/lab03 *.java   You can then view the documents on your computer through the URL  1 https://cs2030-i.comp.nus.edu.sg/~<username>/lab03   (replace  <username>  with your username on  cs2030-i .  The content is password protected and is only visible to you.  (If the website said that the certificate is invalid and website is not secure, please ignore the warning for now).",
            "title": "How to view generate javadoc"
        },
        {
            "location": "/javadoc/index.html#see-also",
            "text": "Oracle's  javadoc  Manual  for a detailed  javadoc  guide",
            "title": "See Also"
        },
        {
            "location": "/unix/index.html",
            "text": "Accessing CS2030 Lab Programming Environment\n\n\nThe Environment\n\n\nThe school has created a VM (virtual machine) for CS2030, with hostname \ncs2030-i.comp.nus.edu.sg\n.  The VM is running CentOS, one of the Linux distributions.\nThis will be the official programming environment for CS2030 for all your lab assignments.\n\n\nI have created your accounts on the VM based on your SoC UNIX account.  You can login with your SoC UNIX username (not your NUSNET username, unless you intentionally set the two to be the same) and password.\n\n\nSoC VPN\n\n\nTHe VM can only be accessed from within the School of Computing networks.  If you want to access it from outside, you need to setup a Virtual Private Network (VPN) (See \ninstruction here\n).  The staff at \nhelpdesk@comp.nus.edu.sg\n or the IT helpdesk in COM1, Level 1, will be able to help with you setting up if needed.\n\n\nSSH\n\n\nFor UNIX-based OS\n\n\nIf you use either macOS, Windows 10 (with bash on Ubuntu), or Linux, you should have the command line \nssh\n installed.  \n\n\nRun:\n\n1\nssh <username>@cs2030-i.comp.nus.edu.sg\n\n\n\n\n\nReplace \n<username>\n with your SoC UNIX username, for instance, I would do:\n\n1\nssh ooiwt@cs2030-i.comp.nus.edu.sg\n\n\n\n\n\nAfter the command above, following the instructions on screen.  The first time you ever connect to \ncs2030-i.comp.nus.edu.sg\n, you will be warned that you are connecting to a previously unknown host.  Said \nyes\n, and you will be prompted with your SoC UNIX password.\n\n\nFor Windows 7 or 8\n\n\nThe desktop computers in Programming Lab 6 (PL6) runs Windows 7.  If you are using these computers, or your own computers with older versions of Windows, you need to use \nXShell 5\n to access the VM.\n\n\nBasic UNIX Commands\n\n\nOnce you logged into the VM, you will be prompted to enter a command with a prompt that looks like this:\n\n1\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\nThis interface is provided by a UNIX shell -- not unlike \njshell\n, this shell sits in a loop and wait for users to enter a command, then it interprets and executes the command.  There are many versions of shells, the default shell for our VM is \nbash\n1\n.\n\n\nThe following are adapted for CS2030 from \nthe instructions created by Aaron Tan\n. Bugs are mine.\n  \n\n\nThe power of UNIX stems from the many commands it offers. The following are a few commonly used commands. This list is by no means exhaustive and you are urged to explore on your own. Note that UNIX commands are case-sensitive.\n\n\nIn the examples below, bold words are commands which you are expected to enter. All commands are to be entered after the UNIX (local or \nsunfire\n or \ncs2030-i\n) prompt of the form\n\n\n1\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n\n\n~\n indicates that you are currently in your home directory, \nxxx\n is a number indicating the number of commands that have been entered.  The following examples assumes that user \nhappytan\n is logged into cs2030-i; however you can do it on your local UNIX platform too.\n\n\nIt might be good to understand the directory structure in UNIX, a multi-user system. The directory tree is shown below:\n\n\n\n\nEach user has his/her own home directory, which is where he/she will be automatically placed when he/she logs into the system. The above figure shows where the home directory of user \nhappytan\n resides in the directory tree. The user \nhappytan\n may create files or directories in his/her home directory, but not elsewhere unless permission is given.\n\n\nDirectory commands\n\n\n\n\n\n\npwd\n: Print current Working Directory to show you which directory you are currently in\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ pwd\n/home/h/happytan\n\n\n\n\n\n\n\n\n\nls\n: LiSt files in your current directory\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ ls\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n   If you do not have any regular files in your home directory, as you should when you first login, you should immediately return to the shell prompt.  \n\n\n\n\n\n\n\n\nRule of Silence\nUNIX follows the \nrule of silence\n: programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if \nls\n has nothing to list, it will list nothing (as oppose to, say, printing \"This is an empty directory.\")\n\n\n\n\n\n\n\n\n\n\nmkdir\n: MaKe a subDIRectory in current directory\n\n1\n2\n3\n4\n5\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls\nlab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/\n\n\n\n\nHere, you create a directory called \nlab01\n.  Now, when you \nls\n, you can see the directory listed.\nYou may also use \nls -F\n for more information (\n-F\n is one of the many \noptions\n/\nflags\n available for the \nls\n command. To see a complete list of the options, refer to the man pages, i.e., \nman ls\n.)\n\n\nThe slash \n/\n beside the filename tells you that the file is a directory (aka folder in Windows lingo). A normal file does not have a slash beside its name when \"ls -F\" is used.\n\n\nYou may also use the \nls -l\n command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.\n\n\n\n\n\n\n\n\nCommand history\n\n\nUNIX maintains a history of your previously executed UNIX commands, and you may use the up and down arrows to go through it. Press the up arrow until you find a previously executed UNIX command. You may then press Enter to execute it, or edit the command before executing it. This is handy when you need to repeatedly executed a long UNIX command.\n\n\n\n\n\n\n\n\ncd\n: Change Directory from current directory to another\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ cd lab01\nhappytan@cs2030-i:~/lab01[xxx]$\n\n\n\n\nNote that the prompt changes to \n~/lab01\n to indicate that you are now in the \nlab01\n directory below your \nHOME\n directory.\n\n\nEntering \ncd\n alone brings you back to your \nHOME\n directory, i.e.,. the directory in which you started with when you first logged into the system.\n\n1\n2\nhappytan@cs2030-i:~/lab01[xxx]$ cd\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n\n\n\n\n\nrmdir\n:  to ReMove a subDIRectory in current directory -- note that a directory must be empty before it can be removed.\n\n1\n2\n3\n4\n5\nhappytan@cs2030-i:~[xxx]$ rmdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/\n\n\n\n\n\n\n\n\n\nFile commands\n\n\n\n\ncp\n:  CoPy files\n\n1\n2\n3\nhappytan@cs2030-i:~/lab01[xxx]$ cp ~cs2030/lab01/Circle.java .\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nCircle.java\n\n\n\n\nThe command above copy the files Circle.java from the HOME of user \ncs2030\n, under directory \nlab01\n, to the current directory.\n\n\n\n\nIf you want to copy the whole directory, use \n-r\n flag, where \nr\n stands for recursive copy.\n\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ cp -r ~cs2030/lab01 .\n\n\n\n\n\n\nThe directory \nlab01\n and everything under it will be copied.\n\n\n\n\nmv\n: MoVe files from one directory to another; can also be used to rename files.\n\n1\n2\n3\nhappytan@cs2030-i:~/lab01[xxx]$ mv Circle.java Test.java\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nTest.java\n\n\n\n\n\n\n\n\n\nFilename completion\n\n\nIf you have a very long file name, you may use UNIX's filename completion feature to reduce typing. For instance, you may type:\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ mv C\n\n\n\n\nand press the tab key, and UNIX will complete the filename for you if there is only one filename with the prefix \"C\". Otherwise, it will fill up the filename up to point where you need to type in more characters for disambiguation.\n\n\n\n\n\n\nrm\n: ReMove files. Be careful with this command -- files deleted cannot be restored (unless they have been backed up during the normal backup cycle).\n\n1\n2\n3\n4\nhappytan@cs2030-i:~/lab01[xxx]$ rm Test.java\nrm: remove 'Test.java'? y\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nhappytan@cs2030-i:~/lab01[xxx]$\n\n\n\n\n\n\n\nCommand to display text files\n\n\n\n\ncat\n: to string together or display (CATenate) the contents of files onto the screen\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ cat Circle.java\n\n\n\n\n\nless\n - variant of \ncat\n (includes features to read each page leisurely)\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ less Circle.java\n\n\n\n\nIn \nless\n, use \n<space>\n to move down one page, \nb\n to move Back up one page, and \nq\n to Quit from \"less\".\n\n\n\n\nAn online help facility is available in UNIX via the \nman\n command (\nman\n stands for MANual). To look for more information about any UNIX command, for example, \nls\n, type \nman ls\n. Type \nman man\n and refer to Man Pages to find out more about the facility. To exit \nman\n, press \nq\n.\n\n\nNow that you are familiar with how the UNIX shell works, I won't show the command prompt any more in the rest of this article.\n\n\nUNIX File Permission\n\n\nIt is important to guide our files properly on a multi-user system where users share the same file system.  UNIX has a simple mechanism to for ensuring that: every file and directory has nine bits of access permission, corresponds to three access operations, read (\nr\n), write (\nw\n), and execute (\nx\n), for four classes of users, the user who owns of the file (\nu\n), users in the same group as the owner (\ng\n), all other users (\no\n), and all users (\na\n) (union of all three classes before)\n\n\nWhen you run \nls -l\n, you will see the permission encoded as strings that look like \n-rw-------\n or \ndrwx--x--x\n besides other file information.   \n\n\n\n\nThe first character indicates if the file is a directory (\nd\n) or not (\n-\n).  \n\n\nThe next three characters are the permission for the owner.  \nrwx\n means that the owner can do all three: reading, writing, and executing, \nrw-\n means that the owner can read and write, but cannot execute.\n\n\nThe next three characters are the permission for the users in the same group.\n\n\nThe last three characters are the permission for the users in the other groups.\n\n\n\n\nTo change permission, we use the \nchmod\n command.  Let's say that we want to remove the read and write permission from all other users in the group.  You can run:\n\n1\nchmod g-rw <file>\n\n\n\n\n\nwhere \n<file>\n is the name of the file whose permission you want to change.  This would change the permission from \n-rw-rw-rw-\n to \n-rw----rw-\n, or from \n-rwxr--r--\n to \n-rwx---r--\n.\n\n\nTo add executable permission to everyone, you can run:\n\n1\nchmod a+x <file>\n\n\n\n\n\nThis would change the permission from \n-rw-rw-rw-\n to \n-rwx--xrwx\n, or from \n-rwxr--r--\n to \n-rwx--xr-x\n, and so on.  You get the idea.\n\n\nAnother way to change the permission is set the permission directly, instead of adding with \n+\n and removing with \n-\n.  To do this, one convenient way is to treat the permission for each class of user as a 3-bit binary number between 0 to 7.  So, \nrwx\n is 7, \nrw-\n is 6, \n-w-\n is 2, \n---\n is 0, etc.  \n\n\nTo set the permission of a file to \n-r--r--r--\n (readable by everyone), run:\n\n1\nchmod 444 <file>\n\n\n\n\n\nTo set the permission to \n-rw-------\n, run:\n\n1\nchmod 600 <file>\n\n\n\n\n\nand so on.\n\n\nIt is important to ensure that your code is not readable and writable by other students, especially for graded lab exercises.\n\n\nSecure Copy (\nscp\n)\n\n\nSecure copy, or \nscp\n, is one way to transfer files from your local computer to \ncs2030-i\n.  If you choose not to use \nemacs\n or \nvim\n2\n and write your code on \ncs2030-i\n, you can write your code on your local computer, and transfer them.  Let's say that you are in the directory with a bunch of java files you want to transfer, and you want them transferred into directory \ntest\n that you have created, do the following:\n\n\n1\nscp *.java happytan@cs2030-i:~/test\n\n\n\n\n\n\n\n\nWarning\n\n\nIf you have files with the same name in the remote directory, the files will be overwritten without warning.  I have lost my code a few times due to \nscp\n.  \n\n\n\n\nThe expression \n*.java\n is a regular expression that means all files with filename ending with \n.java\n.  You can copy specific files as well.  For instance,\n\n\n1\nscp Circle.java Point.java happytan@cs2030-i:~/test\n\n\n\n\n\n\nscp\n supports \n-r\n (recursive copy) as well.\n\n\nSetting up SSH Keys\n\n\nOnce you are comfortable with UNIX, you can set up a pair of public/private keys for authentication.  \n\n\nYou can use\n\n1\nssh-keygen -t rsa\n\n\n\n\n\nto generate a pair of keys on your local computer.  Keep the private key \nid_rsa\n on your local machine in the hidden \n~/.ssh\n directory, and copy the public key \nid_rsa.pub\n to your home directory on VM \ncs2030-i\n.  On \ncs2030-i\n, run\n\n1\ncat id_rsa.pub >> ~/.ssh/authorized_keys\n\n\n\n\n\nMake sure that the permission for \n.ssh\n both on local machine and on VM is set to \n700\n and the files \nid_rsa\n on local machine and \nauthorized_keys\n on remote machine is set to \n600\n.  Once setup, you need not enter your password every time you run \nssh\n or \nscp\n.  \n\n\n\n\n\n\n\n\n\n\nI run \nfish\n on my macOS, as you might have noticed during the in-class demos.  You can use any shell you like, if you know what you are doing.  Otherwise, \nbash\n is a popular one.\u00a0\n\u21a9\n\n\n\n\n\n\nMy personal opinion is that, you should really master one of these two time-tested source code editor if you want a career in software development.\u00a0\n\u21a9",
            "title": "UNIX"
        },
        {
            "location": "/unix/index.html#accessing-cs2030-lab-programming-environment",
            "text": "",
            "title": "Accessing CS2030 Lab Programming Environment"
        },
        {
            "location": "/unix/index.html#the-environment",
            "text": "The school has created a VM (virtual machine) for CS2030, with hostname  cs2030-i.comp.nus.edu.sg .  The VM is running CentOS, one of the Linux distributions.\nThis will be the official programming environment for CS2030 for all your lab assignments.  I have created your accounts on the VM based on your SoC UNIX account.  You can login with your SoC UNIX username (not your NUSNET username, unless you intentionally set the two to be the same) and password.",
            "title": "The Environment"
        },
        {
            "location": "/unix/index.html#soc-vpn",
            "text": "THe VM can only be accessed from within the School of Computing networks.  If you want to access it from outside, you need to setup a Virtual Private Network (VPN) (See  instruction here ).  The staff at  helpdesk@comp.nus.edu.sg  or the IT helpdesk in COM1, Level 1, will be able to help with you setting up if needed.",
            "title": "SoC VPN"
        },
        {
            "location": "/unix/index.html#ssh",
            "text": "",
            "title": "SSH"
        },
        {
            "location": "/unix/index.html#for-unix-based-os",
            "text": "If you use either macOS, Windows 10 (with bash on Ubuntu), or Linux, you should have the command line  ssh  installed.    Run: 1 ssh <username>@cs2030-i.comp.nus.edu.sg   Replace  <username>  with your SoC UNIX username, for instance, I would do: 1 ssh ooiwt@cs2030-i.comp.nus.edu.sg   After the command above, following the instructions on screen.  The first time you ever connect to  cs2030-i.comp.nus.edu.sg , you will be warned that you are connecting to a previously unknown host.  Said  yes , and you will be prompted with your SoC UNIX password.",
            "title": "For UNIX-based OS"
        },
        {
            "location": "/unix/index.html#for-windows-7-or-8",
            "text": "The desktop computers in Programming Lab 6 (PL6) runs Windows 7.  If you are using these computers, or your own computers with older versions of Windows, you need to use  XShell 5  to access the VM.",
            "title": "For Windows 7 or 8"
        },
        {
            "location": "/unix/index.html#basic-unix-commands",
            "text": "Once you logged into the VM, you will be prompted to enter a command with a prompt that looks like this: 1 happytan@cs2030-i:~[xxx]$  \nThis interface is provided by a UNIX shell -- not unlike  jshell , this shell sits in a loop and wait for users to enter a command, then it interprets and executes the command.  There are many versions of shells, the default shell for our VM is  bash 1 .  The following are adapted for CS2030 from  the instructions created by Aaron Tan . Bugs are mine.     The power of UNIX stems from the many commands it offers. The following are a few commonly used commands. This list is by no means exhaustive and you are urged to explore on your own. Note that UNIX commands are case-sensitive.  In the examples below, bold words are commands which you are expected to enter. All commands are to be entered after the UNIX (local or  sunfire  or  cs2030-i ) prompt of the form  1 happytan@cs2030-i:~[xxx]$   ~  indicates that you are currently in your home directory,  xxx  is a number indicating the number of commands that have been entered.  The following examples assumes that user  happytan  is logged into cs2030-i; however you can do it on your local UNIX platform too.  It might be good to understand the directory structure in UNIX, a multi-user system. The directory tree is shown below:   Each user has his/her own home directory, which is where he/she will be automatically placed when he/she logs into the system. The above figure shows where the home directory of user  happytan  resides in the directory tree. The user  happytan  may create files or directories in his/her home directory, but not elsewhere unless permission is given.",
            "title": "Basic UNIX Commands"
        },
        {
            "location": "/unix/index.html#directory-commands",
            "text": "pwd : Print current Working Directory to show you which directory you are currently in 1\n2 happytan@cs2030-i:~[xxx]$ pwd\n/home/h/happytan     ls : LiSt files in your current directory 1\n2 happytan@cs2030-i:~[xxx]$ ls\nhappytan@cs2030-i:~[xxx]$  \n   If you do not have any regular files in your home directory, as you should when you first login, you should immediately return to the shell prompt.       Rule of Silence UNIX follows the  rule of silence : programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if  ls  has nothing to list, it will list nothing (as oppose to, say, printing \"This is an empty directory.\")      mkdir : MaKe a subDIRectory in current directory 1\n2\n3\n4\n5 happytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls\nlab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/  \nHere, you create a directory called  lab01 .  Now, when you  ls , you can see the directory listed.\nYou may also use  ls -F  for more information ( -F  is one of the many  options / flags  available for the  ls  command. To see a complete list of the options, refer to the man pages, i.e.,  man ls .)  The slash  /  beside the filename tells you that the file is a directory (aka folder in Windows lingo). A normal file does not have a slash beside its name when \"ls -F\" is used.  You may also use the  ls -l  command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.     Command history  UNIX maintains a history of your previously executed UNIX commands, and you may use the up and down arrows to go through it. Press the up arrow until you find a previously executed UNIX command. You may then press Enter to execute it, or edit the command before executing it. This is handy when you need to repeatedly executed a long UNIX command.     cd : Change Directory from current directory to another 1\n2 happytan@cs2030-i:~[xxx]$ cd lab01\nhappytan@cs2030-i:~/lab01[xxx]$  \nNote that the prompt changes to  ~/lab01  to indicate that you are now in the  lab01  directory below your  HOME  directory.  Entering  cd  alone brings you back to your  HOME  directory, i.e.,. the directory in which you started with when you first logged into the system. 1\n2 happytan@cs2030-i:~/lab01[xxx]$ cd\nhappytan@cs2030-i:~[xxx]$     rmdir :  to ReMove a subDIRectory in current directory -- note that a directory must be empty before it can be removed. 1\n2\n3\n4\n5 happytan@cs2030-i:~[xxx]$ rmdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/",
            "title": "Directory commands"
        },
        {
            "location": "/unix/index.html#file-commands",
            "text": "cp :  CoPy files 1\n2\n3 happytan@cs2030-i:~/lab01[xxx]$ cp ~cs2030/lab01/Circle.java .\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nCircle.java  \nThe command above copy the files Circle.java from the HOME of user  cs2030 , under directory  lab01 , to the current directory.   If you want to copy the whole directory, use  -r  flag, where  r  stands for recursive copy.  1 happytan@cs2030-i:~/lab01[xxx]$ cp -r ~cs2030/lab01 .   The directory  lab01  and everything under it will be copied.   mv : MoVe files from one directory to another; can also be used to rename files. 1\n2\n3 happytan@cs2030-i:~/lab01[xxx]$ mv Circle.java Test.java\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nTest.java     Filename completion  If you have a very long file name, you may use UNIX's filename completion feature to reduce typing. For instance, you may type: 1 happytan@cs2030-i:~/lab01[xxx]$ mv C  \nand press the tab key, and UNIX will complete the filename for you if there is only one filename with the prefix \"C\". Otherwise, it will fill up the filename up to point where you need to type in more characters for disambiguation.    rm : ReMove files. Be careful with this command -- files deleted cannot be restored (unless they have been backed up during the normal backup cycle). 1\n2\n3\n4 happytan@cs2030-i:~/lab01[xxx]$ rm Test.java\nrm: remove 'Test.java'? y\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nhappytan@cs2030-i:~/lab01[xxx]$",
            "title": "File commands"
        },
        {
            "location": "/unix/index.html#command-to-display-text-files",
            "text": "cat : to string together or display (CATenate) the contents of files onto the screen 1 happytan@cs2030-i:~/lab01[xxx]$ cat Circle.java   less  - variant of  cat  (includes features to read each page leisurely) 1 happytan@cs2030-i:~/lab01[xxx]$ less Circle.java  \nIn  less , use  <space>  to move down one page,  b  to move Back up one page, and  q  to Quit from \"less\".   An online help facility is available in UNIX via the  man  command ( man  stands for MANual). To look for more information about any UNIX command, for example,  ls , type  man ls . Type  man man  and refer to Man Pages to find out more about the facility. To exit  man , press  q .  Now that you are familiar with how the UNIX shell works, I won't show the command prompt any more in the rest of this article.",
            "title": "Command to display text files"
        },
        {
            "location": "/unix/index.html#unix-file-permission",
            "text": "It is important to guide our files properly on a multi-user system where users share the same file system.  UNIX has a simple mechanism to for ensuring that: every file and directory has nine bits of access permission, corresponds to three access operations, read ( r ), write ( w ), and execute ( x ), for four classes of users, the user who owns of the file ( u ), users in the same group as the owner ( g ), all other users ( o ), and all users ( a ) (union of all three classes before)  When you run  ls -l , you will see the permission encoded as strings that look like  -rw-------  or  drwx--x--x  besides other file information.      The first character indicates if the file is a directory ( d ) or not ( - ).    The next three characters are the permission for the owner.   rwx  means that the owner can do all three: reading, writing, and executing,  rw-  means that the owner can read and write, but cannot execute.  The next three characters are the permission for the users in the same group.  The last three characters are the permission for the users in the other groups.   To change permission, we use the  chmod  command.  Let's say that we want to remove the read and write permission from all other users in the group.  You can run: 1 chmod g-rw <file>   where  <file>  is the name of the file whose permission you want to change.  This would change the permission from  -rw-rw-rw-  to  -rw----rw- , or from  -rwxr--r--  to  -rwx---r-- .  To add executable permission to everyone, you can run: 1 chmod a+x <file>   This would change the permission from  -rw-rw-rw-  to  -rwx--xrwx , or from  -rwxr--r--  to  -rwx--xr-x , and so on.  You get the idea.  Another way to change the permission is set the permission directly, instead of adding with  +  and removing with  - .  To do this, one convenient way is to treat the permission for each class of user as a 3-bit binary number between 0 to 7.  So,  rwx  is 7,  rw-  is 6,  -w-  is 2,  ---  is 0, etc.    To set the permission of a file to  -r--r--r--  (readable by everyone), run: 1 chmod 444 <file>   To set the permission to  -rw------- , run: 1 chmod 600 <file>   and so on.  It is important to ensure that your code is not readable and writable by other students, especially for graded lab exercises.",
            "title": "UNIX File Permission"
        },
        {
            "location": "/unix/index.html#secure-copy-scp",
            "text": "Secure copy, or  scp , is one way to transfer files from your local computer to  cs2030-i .  If you choose not to use  emacs  or  vim 2  and write your code on  cs2030-i , you can write your code on your local computer, and transfer them.  Let's say that you are in the directory with a bunch of java files you want to transfer, and you want them transferred into directory  test  that you have created, do the following:  1 scp *.java happytan@cs2030-i:~/test    Warning  If you have files with the same name in the remote directory, the files will be overwritten without warning.  I have lost my code a few times due to  scp .     The expression  *.java  is a regular expression that means all files with filename ending with  .java .  You can copy specific files as well.  For instance,  1 scp Circle.java Point.java happytan@cs2030-i:~/test   scp  supports  -r  (recursive copy) as well.",
            "title": "Secure Copy (scp)"
        },
        {
            "location": "/unix/index.html#setting-up-ssh-keys",
            "text": "Once you are comfortable with UNIX, you can set up a pair of public/private keys for authentication.    You can use 1 ssh-keygen -t rsa   to generate a pair of keys on your local computer.  Keep the private key  id_rsa  on your local machine in the hidden  ~/.ssh  directory, and copy the public key  id_rsa.pub  to your home directory on VM  cs2030-i .  On  cs2030-i , run 1 cat id_rsa.pub >> ~/.ssh/authorized_keys   Make sure that the permission for  .ssh  both on local machine and on VM is set to  700  and the files  id_rsa  on local machine and  authorized_keys  on remote machine is set to  600 .  Once setup, you need not enter your password every time you run  ssh  or  scp .        I run  fish  on my macOS, as you might have noticed during the in-class demos.  You can use any shell you like, if you know what you are doing.  Otherwise,  bash  is a popular one.\u00a0 \u21a9    My personal opinion is that, you should really master one of these two time-tested source code editor if you want a career in software development.\u00a0 \u21a9",
            "title": "Setting up SSH Keys"
        },
        {
            "location": "/vim/index.html",
            "text": "Vim Tips\n\n\nI collected below some tips on \nvim\n that I find helpful.\n\n\nConfiguration\n\n\nYou can configure your \nvim\n by putting your configuration options and scripts in the \n~/.vimrc\n file (a hidden file named \n.vimrc\n in your home directory).  This file will be loaded whenever you starts \nvim\n.\n\n\nHelp\n\n\nIn \nvim,\n the command \n:help <topic>\n shows help about a particular topic in \nvim\n.  Example, \n:help backup\n.\n\n\nBackup Files\n\n\nYou can ask \nvim\n to automatically backup files that you edit.  This has been a life saver for me in multiple  occasions.\n\n\nIn your \n~/.vimrc\n file, \n\n\n1\nset backup=on\n\n\n\n\n\n\nwill cause a copy of your file to be save with suffix \n~\n appended to its name everytime you save.\n\n\nI prefer not to clutter my working directory, so I set\n\n\n1\nset backupdir=~/.backup\n\n\n\n\n\n\nand create a directory named \n~/.backup\n to store my backup files.\n\n\nThe settings above are the default in your \ncs2030-i\n account.  So if you made changes to a file that you regreted on \ncs2030-i\n, or if accidentally deleted a file, you can check under \n~/.backup\n to see if the backup can save you.\n\n\nUndo\n\n\nSince we are on the topic of correcting mistakes, \nu\n in command mode undo your changes.  Prefix it with a number \n\\(n\\)\n to undo \n\\(n\\)\n times.  If you regreted your undo, \n<CTRL-R>\n will redo.\n\n\nSyntax Highlighting\n\n\nIf for some reasons, syntax highlighting is not on by default, add this to your \n~/.vimrc\n:\n\n\n1\nsyntax on\n\n\n\n\n\n\nRuler and Numbers\n\n\nIf you prefer to show the line number you are on and the column number you are on, adding the commands to \n~/.vimrc\n\n\n1\nset ruler\n\n\n\n\n\n\nwill display the line number and the column number on the lower right corner.  \n\n\nYou can also add\n\n1\nset number\n\n\n\n\n\nto label each line with a line number.\n\n\nJumping to a Line\n\n\nIf the compiler tells you there is an error on Line \n\\(x\\)\n, you can issue \n:<x>\n to jump to Line \n\\(x\\)\n.  For instance, \n:40\n will go to Line 40.\n\n\nShell Command\n\n\nIf you need to issue a shell command quickly, you don't have to exit \nvim\n, run the command, and launch \nvim\n again.  You can use \n!\n, \n\n\n1\n:!<command>\n\n\n\n\n\n\nwill issue the command to shell.  E.g.,\n\n\n1\n:!ls\n\n\n\n\n\n\nYou can use this to compile your current file, without exiting \nvim\n.\n\n\n1\n:!javac %\n\n\n\n\n\n\nAbbreviation\n\n\nYou can use the command \nab\n to abbreviate frequently typed commands.  E.g., in your \n~/.vimrc\n, \n\n\n1\nab Sop System.out.println(\"\n\n\n\n\n\n\nNow, when you type \nSop\n, it will be expanded into \nSystem.out.println(\"\n\n\nAuto-Completion\n\n\nYou can \n<CTRL-P>\n to auto-complete.  By default, the auto-complete dictionary is based on text in your current editing buffers.  This is a very useful keystroke saver for long function and variable names.\n\n\nAuto-Indent the Whole File\n\n\nYou can \ngg=G\n in command mode to auto-indent the whole file.  \ngg\n is the command to go to the beginning of the file.  \n=\n is the command to indent.  \nG\n is the command to go to the end of the file.\n\n\nSwapping Lines\n\n\nSometimes you want to swap the order of two lines of code, in command mode, \nddp\n will do the trick.  \ndd\n deletes the current line, \np\n paste it after the current line, in effect swapping the order of the two lines.\n\n\nGoto File\n\n\nPlace your cursor on the name of a class (e.g., \nEvent\n), then in command mode, issue the \ngf\n command (goto file).  \nvim\n will open \nEvent.java\n.  You can set the \npath\n to load files from directories other than the current directory.   \"Ctrl-^\" will get out and back to the previous file.\n\n\nSyntax and Style Checker\n\n\nI use \nsyntastic\n to check for style and syntax whenever I save a file.  \nsyntastic\n is a \nvim\n plugin. \n\n\nMy \n.vimrc\n configuration file contains the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n\"For syntastic\nset laststatus=2\nset statusline+=%#warningmsg#\nset statusline+=%{SyntasticStatuslineFlag()}\nset statusline+=%*\n\nlet g:syntastic_always_populate_loc_list = 1\nlet g:syntastic_auto_loc_list = 1\nlet g:syntastic_check_on_open = 1\nlet g:syntastic_check_on_wq = 0\nlet g:syntastic_java_checkers = [ \"checkstyle\", \"javac\" ]\nlet g:syntastic_java_checkstyle_classpath = \"~cs2030/bin/checkstyle-8.2-all.jar\"\nlet g:syntastic_java_checkstyle_conf_file = \"~cs2030/bin/cs2030_checks.xml\"\n\n\n\n\n\n\nThe last two lines refer to \ncheckstyle\n tool and its configuration file available from \n~cs2030/bin\n on the host \ncs2030-i.comp.nus.edu.sg\n.",
            "title": "Vim"
        },
        {
            "location": "/vim/index.html#vim-tips",
            "text": "I collected below some tips on  vim  that I find helpful.",
            "title": "Vim Tips"
        },
        {
            "location": "/vim/index.html#configuration",
            "text": "You can configure your  vim  by putting your configuration options and scripts in the  ~/.vimrc  file (a hidden file named  .vimrc  in your home directory).  This file will be loaded whenever you starts  vim .",
            "title": "Configuration"
        },
        {
            "location": "/vim/index.html#help",
            "text": "In  vim,  the command  :help <topic>  shows help about a particular topic in  vim .  Example,  :help backup .",
            "title": "Help"
        },
        {
            "location": "/vim/index.html#backup-files",
            "text": "You can ask  vim  to automatically backup files that you edit.  This has been a life saver for me in multiple  occasions.  In your  ~/.vimrc  file,   1 set backup=on   will cause a copy of your file to be save with suffix  ~  appended to its name everytime you save.  I prefer not to clutter my working directory, so I set  1 set backupdir=~/.backup   and create a directory named  ~/.backup  to store my backup files.  The settings above are the default in your  cs2030-i  account.  So if you made changes to a file that you regreted on  cs2030-i , or if accidentally deleted a file, you can check under  ~/.backup  to see if the backup can save you.",
            "title": "Backup Files"
        },
        {
            "location": "/vim/index.html#undo",
            "text": "Since we are on the topic of correcting mistakes,  u  in command mode undo your changes.  Prefix it with a number  \\(n\\)  to undo  \\(n\\)  times.  If you regreted your undo,  <CTRL-R>  will redo.",
            "title": "Undo"
        },
        {
            "location": "/vim/index.html#syntax-highlighting",
            "text": "If for some reasons, syntax highlighting is not on by default, add this to your  ~/.vimrc :  1 syntax on",
            "title": "Syntax Highlighting"
        },
        {
            "location": "/vim/index.html#ruler-and-numbers",
            "text": "If you prefer to show the line number you are on and the column number you are on, adding the commands to  ~/.vimrc  1 set ruler   will display the line number and the column number on the lower right corner.    You can also add 1 set number   to label each line with a line number.",
            "title": "Ruler and Numbers"
        },
        {
            "location": "/vim/index.html#jumping-to-a-line",
            "text": "If the compiler tells you there is an error on Line  \\(x\\) , you can issue  :<x>  to jump to Line  \\(x\\) .  For instance,  :40  will go to Line 40.",
            "title": "Jumping to a Line"
        },
        {
            "location": "/vim/index.html#shell-command",
            "text": "If you need to issue a shell command quickly, you don't have to exit  vim , run the command, and launch  vim  again.  You can use  ! ,   1 :!<command>   will issue the command to shell.  E.g.,  1 :!ls   You can use this to compile your current file, without exiting  vim .  1 :!javac %",
            "title": "Shell Command"
        },
        {
            "location": "/vim/index.html#abbreviation",
            "text": "You can use the command  ab  to abbreviate frequently typed commands.  E.g., in your  ~/.vimrc ,   1 ab Sop System.out.println(\"   Now, when you type  Sop , it will be expanded into  System.out.println(\"",
            "title": "Abbreviation"
        },
        {
            "location": "/vim/index.html#auto-completion",
            "text": "You can  <CTRL-P>  to auto-complete.  By default, the auto-complete dictionary is based on text in your current editing buffers.  This is a very useful keystroke saver for long function and variable names.",
            "title": "Auto-Completion"
        },
        {
            "location": "/vim/index.html#auto-indent-the-whole-file",
            "text": "You can  gg=G  in command mode to auto-indent the whole file.   gg  is the command to go to the beginning of the file.   =  is the command to indent.   G  is the command to go to the end of the file.",
            "title": "Auto-Indent the Whole File"
        },
        {
            "location": "/vim/index.html#swapping-lines",
            "text": "Sometimes you want to swap the order of two lines of code, in command mode,  ddp  will do the trick.   dd  deletes the current line,  p  paste it after the current line, in effect swapping the order of the two lines.",
            "title": "Swapping Lines"
        },
        {
            "location": "/vim/index.html#goto-file",
            "text": "Place your cursor on the name of a class (e.g.,  Event ), then in command mode, issue the  gf  command (goto file).   vim  will open  Event.java .  You can set the  path  to load files from directories other than the current directory.   \"Ctrl-^\" will get out and back to the previous file.",
            "title": "Goto File"
        },
        {
            "location": "/vim/index.html#syntax-and-style-checker",
            "text": "I use  syntastic  to check for style and syntax whenever I save a file.   syntastic  is a  vim  plugin.   My  .vimrc  configuration file contains the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 \"For syntastic\nset laststatus=2\nset statusline+=%#warningmsg#\nset statusline+=%{SyntasticStatuslineFlag()}\nset statusline+=%*\n\nlet g:syntastic_always_populate_loc_list = 1\nlet g:syntastic_auto_loc_list = 1\nlet g:syntastic_check_on_open = 1\nlet g:syntastic_check_on_wq = 0\nlet g:syntastic_java_checkers = [ \"checkstyle\", \"javac\" ]\nlet g:syntastic_java_checkstyle_classpath = \"~cs2030/bin/checkstyle-8.2-all.jar\"\nlet g:syntastic_java_checkstyle_conf_file = \"~cs2030/bin/cs2030_checks.xml\"   The last two lines refer to  checkstyle  tool and its configuration file available from  ~cs2030/bin  on the host  cs2030-i.comp.nus.edu.sg .",
            "title": "Syntax and Style Checker"
        }
    ]
}